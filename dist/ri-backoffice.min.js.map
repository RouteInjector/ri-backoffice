{"version":3,"sources":["ri-backoffice.js"],"names":["angular","makeArray","arr","isArray","provideRootElement","modules","element","unshift","$provide","value","createInjector","injectorModules","concat","injector","bootstrapApplication","angularApp","document","ready","bootstrap","lazy","app","$q","get","promises","errorCallback","noop","loadingCallback","doneCallback","resolve","promise","when","instantiate","push","this","all","then","finally","loading","callback","done","error","module","$rootScopeProvider","digestTtl","run","$rootScope","configs","$http","resp","constant","data","deferred","defer","extensions","assets","$","scripts","i","length","cache","asset","src","attributes","nodeValue","type","files","j","pages","p","backoffice","appendChild","createCSSNodes","getScripts","obj","div","createElement","link","href","rel","progress","internalCallback","ajaxSetup","async","forEach","script","getScript","getMultiScripts","path","_arr","map","scr","Deferred","apply","config","$routeProvider","customMenuProvider","authCheck","$location","loginProvider","auth","getUser","user","defaults","headers","common","Authorization","token","login","undefined","allowedUser","$inject","homePage","home","templateUrl","controller","reloadOnSearch","logout","menu","page","url","template","modelName","setCustomMenu","otherwise","redirectTo","$translateProvider","$translatePartialLoaderProvider","i18n","addPart","useLoader","urlTemplate","registerAvailableLanguageKeys","def","fallbackLanguage","useLocalStorage","uniqueLanguage","use","preferredLanguage","provider","menuElements","$get","cookieStore","factory","profile","userModel","cb","post","success","res","role","cookieOptions","end","Infinity","put","JSON","stringify","$broadcast","err","remove","parse","password","logged","extend","overrides","service","override","_method","_function","getService","Upload","modelsConfig","singlesCache","shards","prefix","$on","invalidate","console","log","getHttp","getUpload","setShard","key","model","shard","getShard","removeShard","getModels","schemas","models","getModel","schema","ajax","responseText","getModelElements","skip","limit","plural","body","elements","result","status","count","getModelSchema","getModelConfig","postDocument","response","getUrl","Error","getDocument","id","qParams","params","cfg","shardKey","putDocument","removeDocument","opts","delete","removeDocumentByMongoId","uploadImage","fieldName","index","image","upload","file","fileFormDataName","evt","parseInt","loaded","total","uploadFile","deleteImage","deleteFile","getImageUrl","imageName","getRandomQuery","getFileUrl","fileName","getSingleModel","search","query","documents","search_count","export","format","searchQuery","by","postAsForm","import","method","form","setAttribute","replace","hasOwnProperty","hiddenField","submit","getGraph","graphID","encodeURI","getFieldFromSchema","field","split","retElem","properties","ref","denormalize","indexOf","refSchema","copy","title","lastIndexOf","prettifyTitle","substring","Object","keys","TIMEOUT_MS","timers","selectCacheService","event","next","current","m","clearTimeout","b","posts","cached","cbks","cbk","gets","setTimeout","httpCall","q","$or","singleQ","doc","idKey","getObj","$routeParams","flash","$injector","version","ngDialog","getOpenDialogs","open","className","responseError","rejection","modelId","errorInReferencedProperty","handleError","ignoreError","redirectError","warning","errors","e","message","splice","Math","floor","reject","$httpProvider","interceptors","find","depArr","innerDependsOn","each","k","v","func","indexArray","pop","join","scope","updateFunc","modelConfig","dependsValue","arrayIndex","newVal","oldVal","param","safeAccess","replaced","setField","test","root","targetField","$watchCollection","nV","oV","Array","normPath","$watch","hasAngularVariable","deAngularizeUrl","ng","matched","f","getField","getAngularVariables","exec","separator","str","toUpperCase","splitted","ret","returnArray","parentArr","rootElem","match","tmp","elem","newPath","arrInd","getAllSchemaFields","fields","searchFields","parent","processForm","submitButtons","showSubmitButtons","innerForm","tabs","items","randomNumber","Date","getTime","setQuery","clearQuery","getQuery","setSortBy","sort","sortBy","addSortBy","asc","getSort","setSkip","setLimit","searchAndGroup","directive","restrict","$scope","customMenu","$window","actualSchema","isDisabled","isOpen","render","sections","Sections","add","section","hideMenu","isSingle","clickTo","openSection","actualSection","click","name","conf","parentSchema","location","isInstanceOf","Section","debug","a","levels","curLevel","scrollTo","$elm","attr","on","animate","scrollTop","offset","top","$compile","attrs","$eval","compile","html","contents","ngModel","graph","selected","punchCardData","graphs","g","groupMode","selectEnabled","barsData","values","$route","performAction","action","req","Content-Type","exportElements","checked","filter","x","_id","exportModels","importModels","enableDelete","checkedValues","val","removeSelected","promptAlert","del","deletions","reload","searches","buildPath","sc","updateSearch","elemSearch","noSearch","availableFields","fieldFromSchema","placeholder","addSearch","s","clear","allFields","displayField","parseMongoDate","txt","dt","parseDateTimeRange","updateYear","start","d","day","month","year","hour","sec","isNaN","second","minute","d1","d2","sec1","sec2","debugParse","Number","String","pieces","parseDateTime","trim","parseDateOrTime","dt1","dt2","parseTime","parseDate","Num","t","regex","o","toLocaleString","singleQuery","sfield","$regex","$options","alert","$parent","elemsearch","select","idSelect","getDocumentById","forDisplay","forID","searchRes","present","some","disabled","searchEnabled","printSelectedElement","selectDisplayField","selectIdField","bind","raw","arguments","target","offsetHeight","scrollHeight","$select","children","width","css","$animate","leave","eq","cleanupAfterAnimation","$controller","m_copy","$sce","getTag","tag","prune","$anchorScroll","$timeout","$modal","dependsOn","$translate","modified","buttonsPosition","walkThroughSchema","editOnCreate","toLowerCase","readonly","i18nTitle","instant","equals","schemaHREF","hash","submitForm","isApply","$valid","validation","validationErrors","$error","yOffset","cancel","history","back","ngForm","preventDefault","modalInstance","size","basePathLength","absUrl","http","window","$modalInstance","ok","close","dismiss","$document","update","loginError","encodeURIComponent","postLoginFuncs","pretty","args","defaultItemsPerPage","removeDisabled","maxSize","create","checkedGroupIds","schemaForm","allDisplayFields","extraDisplayFields","totalElements","itemsPerPage","userItemsPerPage","defaultSearch","pageChanged","currentPage","hasShard","__t","displayCustomField","sch","property","text","trustAsHtml","toString","navbar","$$route","shardKeyText","shardValues","filtered","locked","languages","showLanguages","lang"],"mappings":"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","file":"ri-backoffice.min.js","sourcesContent":["(function (angular) {\n\n    'use strict';\n\n    //Generic   \n\n    function makeArray(arr) {\n        if(!arr){\n            return [];\n        }\n        return angular.isArray(arr) ? arr : [arr];\n    }\n\n    //Angular\n\n    function provideRootElement(modules, element) {\n        element = angular.element(element);\n        modules.unshift(['$provide',\n            function ($provide) {\n                $provide.value('$rootElement', element);\n            }]);\n    }\n\n    function createInjector(injectorModules, element) {\n        var modules = ['ng'].concat(makeArray(injectorModules));\n        if (element) {\n            provideRootElement(modules, element);\n        }\n        return angular.injector(modules);\n    }\n\n    function bootstrapApplication(angularApp) {\n        angular.element(document).ready(function () {\n            angular.bootstrap(document, [angularApp]);\n        });\n    }\n\n    angular.lazy = function (app, modules) {\n\n        var injector = createInjector(modules),\n            $q = injector.get('$q'),\n            promises = [],\n            errorCallback = angular.noop,\n            loadingCallback = angular.noop,\n            doneCallback = angular.noop;\n\n        return {\n\n            resolve: function (promise) {\n                promise = $q.when(injector.instantiate(promise));\n                promises.push(promise);\n                return this;\n            },\n\n            bootstrap: function () {\n\n                loadingCallback();\n\n                return $q.all(promises)\n                    .then(function () {\n                        bootstrapApplication(app);\n                    }, errorCallback)\n                    .finally(doneCallback);\n            },\n\n            loading: function(callback){\n                loadingCallback = callback;\n                return this;\n            },\n\n            done: function(callback){\n                doneCallback = callback;\n                return this;\n            },\n\n            error: function(callback){\n                errorCallback = callback;\n                return this;\n            }\n        };\n\n    };\n\n})(angular);\n(function () {\r\n    'use strict';\r\n    var app = angular.module('injectorApp', ['ngRoute', 'ngBiscuit', 'schemaForm', 'datePicker', 'ui.select',\r\n            'ui.ace', 'ui.codemirror', 'ui.bootstrap', 'ngFileUpload', 'routeInjector-tinymce',\r\n            'ngDroplet', 'punchCard', 'nvd3ChartDirectives', 'flash', 'ngDialog', 'angular-loading-bar',\r\n            'pascalprecht.translate', 'ngCookies'],\r\n        ['$rootScopeProvider', function ($rootScopeProvider) {\r\n            $rootScopeProvider.digestTtl(15);\r\n        }])\r\n        .run(['$rootScope', 'configs', function ($rootScope, configs) {\r\n            $rootScope.configs = configs;\r\n        }]);\r\n\r\n    angular.lazy(\"injectorApp\")\r\n        .resolve(['$http', function ($http) {\r\n            return $http.get('/configs')\r\n                .then(function (resp) {\r\n                    app.constant('configs', resp.data);\r\n                });\r\n        }])\r\n        .resolve(['$http', '$q', function ($http, $q) {\r\n\r\n            var deferred = $q.defer();\r\n            $http.get('/admin/extensions').then(function (resp) {\r\n                app.constant('extensions', resp.data);\r\n\r\n                var extensions = resp.data;\r\n                var assets = $('asset-loader');\r\n                var scripts = [];\r\n\r\n                for (var i = 0; i < assets.length; i++) {\r\n                    var cache = [];\r\n\r\n                    var asset = assets[i];\r\n                    var src = asset.attributes.src.nodeValue;\r\n                    var type = asset.attributes.type.nodeValue;\r\n\r\n                    if (src === 'files') {\r\n                        if (extensions.files[type] && extensions.files[type].length) {\r\n                            cache = cache.concat(extensions.files[type]);\r\n                        }\r\n                    } else if (src === 'pages') {\r\n                        for (var j in extensions.pages) {\r\n                            var p = extensions.pages[j];\r\n                            if (p.backoffice) {\r\n                                if (p[type] && p[type].length) {\r\n                                    cache = cache.concat(p[type]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (type === 'css') {\r\n                        asset.appendChild(createCSSNodes(cache));\r\n                    } else if (type === 'js') {\r\n                        if (cache && cache.length) {\r\n                            scripts = scripts.concat(cache);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //$.getMultiScripts(scripts).done(function () {\r\n                //    deferred.resolve();\r\n                //});\r\n                getScripts(scripts, function () {\r\n                    deferred.resolve();\r\n                });\r\n\r\n            });\r\n\r\n            return deferred.promise;\r\n        }])\r\n        .bootstrap();\r\n\r\n    function createCSSNodes(obj) {\r\n        var div = document.createElement('div');\r\n        for (var i in obj) {\r\n            var link = document.createElement('link');\r\n            link.href = obj[i];\r\n            link.rel = 'stylesheet';\r\n            div.appendChild(link);\r\n        }\r\n        return div;\r\n    }\r\n\r\n    function getScripts(scripts, callback) {\r\n        if(!scripts ||  !scripts.length){\r\n            return callback();\r\n        }\r\n        var progress = 0;\r\n        var internalCallback = function () {\r\n            if (++progress == scripts.length) {\r\n                $.ajaxSetup({async:true});\r\n                callback();\r\n            }\r\n        };\r\n\r\n        $.ajaxSetup({async:false});\r\n        scripts.forEach(function (script) {\r\n            $.getScript(script, internalCallback);\r\n        });\r\n\r\n    }\r\n\r\n    $.getMultiScripts = function (arr, path) {\r\n        var _arr = $.map(arr, function (scr) {\r\n            return $.getScript((path || \"\") + scr);\r\n        });\r\n\r\n        _arr.push($.Deferred(function (deferred) {\r\n            $(deferred.resolve);\r\n        }));\r\n\r\n        return $.when.apply($, _arr);\r\n    };\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .config(['$routeProvider', 'configs', 'extensions', 'customMenuProvider', function ($routeProvider, configs, extensions, customMenuProvider) {\r\n\r\n            var authCheck = function ($q, $rootScope, $location, $http, loginProvider, configs) {\r\n                var defer = $q.defer();\r\n                if (configs.auth) {\r\n                    loginProvider.getUser(function (user) {\r\n                        if (!user) {\r\n                            $location.path('/login');\r\n                        } else {\r\n                            $http.defaults.headers.common.Authorization = 'BEARER ' + user.token;\r\n                            $rootScope.login = undefined;\r\n                        }\r\n                        defer.resolve();\r\n                    });\r\n\r\n                } else {\r\n                    $rootScope.allowedUser = true;\r\n                    defer.resolve();\r\n                }\r\n                return defer.promise;\r\n            };\n            authCheck.$inject = ['$q', '$rootScope', '$location', '$http', 'loginProvider', 'configs'];\r\n\r\n            var homePage = 'html/models.html';\r\n            if (configs.backoffice.home) {\r\n                homePage = configs.backoffice.home;\r\n            }\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: homePage,\r\n                    controller: 'MainController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema', {\r\n                    templateUrl: 'html/model.html',\r\n                    controller: 'ModelController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema/new', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'CreateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id/:shard', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/graphs', {\r\n                    templateUrl: 'html/graphs.html',\r\n                    controller: 'GraphsController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/login', {\r\n                    // login / password\r\n                    templateUrl: 'html/login.html',\r\n                    controller: 'LoginController',\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.getUser(function (user) {\r\n                                if (user) {\r\n                                    $location.path('/');\r\n                                } else {\r\n                                    $rootScope.login = true;\r\n                                }\r\n                                defer.resolve();\r\n                            });\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                })\r\n                .when('/logout', {\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.logout();\r\n                            $location.path('/');\r\n                            defer.resolve();\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                }).when('/settings', {\r\n                    templateUrl: 'html/settings.html',\r\n                    controller: 'SettingsController'\r\n                });\r\n\r\n\r\n            if (extensions && extensions.pages) {\r\n                var menu = [];\r\n                for (var i in extensions.pages) {\r\n                    var page = extensions.pages[i];\r\n\r\n                    //Add the route for the custom page. modelName controls the sharding selector if given\r\n                    if (page.backoffice) {\r\n                        $routeProvider.when('/' + page.url, {\r\n                            templateUrl: page.template,\r\n                            controller: page.controller,\r\n                            resolve: {\r\n                                app: authCheck\r\n                            },\r\n                            modelName: page.modelName\r\n                        });\r\n                    }\r\n\r\n                    if (page.menu) {\r\n                        menu.push(page.menu);\r\n                    }\r\n                }\r\n                customMenuProvider.setCustomMenu(menu);\r\n            }\r\n\r\n            $routeProvider.otherwise({redirectTo: '/'});\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .config(['$translateProvider', '$translatePartialLoaderProvider', 'configs', function ($translateProvider, $translatePartialLoaderProvider, configs) {\n            var i18n = configs.backoffice.i18n;\n            $translatePartialLoaderProvider.addPart('login');\n            $translatePartialLoaderProvider.addPart('model');\n            $translatePartialLoaderProvider.addPart('models');\n            $translatePartialLoaderProvider.addPart('navbar');\n            $translatePartialLoaderProvider.addPart('search');\n            $translatePartialLoaderProvider.addPart('create_update');\n            //$translatePartialLoaderProvider.addPart('flash');\n            $translatePartialLoaderProvider.addPart('version_dialog');\n\n            if (i18n && i18n.length) {\n                for (var i = 0; i < i18n.length; i++) {\n                    $translatePartialLoaderProvider.addPart(i18n[i]);\n                }\n            }\n\n            $translateProvider.useLoader('$translatePartialLoader', {\n                urlTemplate: 'i18n/{part}/{lang}.json'\n            });\n            $translateProvider.registerAvailableLanguageKeys(['en', 'es']);\n            var def = \"en\";\n            $translateProvider.fallbackLanguage('en');\n            $translateProvider.useLocalStorage();\n            if (configs.backoffice.uniqueLanguage) {\n                def = configs.backoffice.uniqueLanguage;\n                $translateProvider.use(def);\n            }\n            $translateProvider.preferredLanguage(def);\n        }]);\n\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('customMenu', function () {\r\n        var menuElements;\r\n\r\n        this.setCustomMenu = function(value) {\r\n            menuElements = value;\r\n        };\r\n\r\n        this.$get = function(){\r\n            return menuElements;\r\n        };\r\n    });\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('loginProvider', function () {\r\n\r\n            this.$get = ['$http', '$location', 'cookieStore', '$rootScope', function ($http, $location, cookieStore, $rootScope) {\r\n                var factory = {};\r\n                $http.defaults.headers.common['Client-Type'] = 'backoffice';\r\n                $http.defaults.headers.common.profile = 'back';\r\n                factory.login = function (userModel, cb) {\r\n                    $http.post('/auth/login', userModel).success(function (res) {\r\n                        var user = {};\r\n                        //user.name = userModel.login;\r\n                        user.login = userModel.login;\r\n                        user.role = res.role;\r\n                        user.token = res.token;\r\n                        var cookieOptions = {path: '/', end: Infinity};\r\n                        cookieStore.put('user', JSON.stringify(user), cookieOptions);\r\n                        $http.defaults.headers.common.Authorization = 'BEARER ' + res.token;\r\n                        $rootScope.$broadcast('login', user);\r\n                        $rootScope.allowedUser = true;\r\n                        cb(user);\r\n                    }).error(function (err) {\r\n                        var cookieOptions = {path: '/'};\r\n                        cookieStore.remove('user', cookieOptions);\r\n                        $rootScope.$broadcast('logout', undefined);\r\n                        $rootScope.allowedUser = false;\r\n                        cb(false);\r\n                    });\r\n                };\r\n\r\n                factory.getUser = function (cb) {\r\n                    var user = JSON.parse(cookieStore.get('user'));\r\n                    if (user && !$rootScope.allowedUser && user.login && (user.password || user.token)) {\r\n                        factory.login(user, function (logged) {\r\n                            if (logged) {\r\n                                angular.extend(user, logged);\r\n                                cb(logged);\r\n                            } else {\r\n                                cb(undefined);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        if (!user) {\r\n                            $rootScope.allowedUser = false;\r\n                        } else {\r\n                            //$rootScope.$broadcast('login', user);\r\n                        }\r\n\r\n                        cb(user);\r\n                    }\r\n                };\r\n\r\n                factory.logout = function () {\r\n                    var cookieOptions = {path: '/'};\r\n                    cookieStore.remove('user', cookieOptions);\r\n                    $location.path('/login');\r\n                    $rootScope.$broadcast('logout', undefined);\r\n                };\r\n\r\n                return factory;\r\n            }];\r\n        });\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .provider('models', function () {\r\n                var overrides = {};\r\n                var service = {};\r\n\r\n                this.override = function (_method, _function) {\r\n                    overrides[_method] = _function;\r\n                };\r\n\r\n                this.getService = function () {\r\n                    return service;\r\n                };\r\n\r\n\r\n                this.$get = ['$rootScope', '$http', 'Upload', 'configs', 'common', function ($rootScope, $http, Upload, configs, common) {\r\n\r\n                    var modelsConfig = {};\r\n                    var singlesCache = {};\r\n                    var shards = {};\r\n                    var prefix = '';\r\n\r\n                    $rootScope.$on('logout', function () {\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    $rootScope.$on('invalidate', function () {\r\n                        console.log(\"invalidate models provider\");\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    service.invalidate = function () {\r\n                        shards = {};\r\n                        singlesCache = {};\r\n                        modelsConfig = {};\r\n                    };\r\n\r\n                    service.getHttp = function () {\r\n                        return $http;\r\n                    };\r\n\r\n                    service.getUpload = function () {\r\n                        return Upload;\r\n                    };\r\n\r\n                    service.setShard = function (key, value, model) {\r\n                        var shard = {};\r\n                        shard.key = key;\r\n                        shard.value = value;\r\n                        shard.model = model;\r\n                        shards[model] = shard;\r\n                    };\r\n\r\n                    service.getShard = function (model) {\r\n                        return shards[model];\r\n                    };\r\n\r\n                    service.removeShard = function (model) {\r\n                        delete shards[model];\r\n                    };\r\n\r\n                    service.getModels = function (cb) {\r\n                        prefix = configs.app.prefix;\r\n\r\n                        //AVOID CACHE (FOR CHANGING MODELS WHEN LOGIN LOGOUT :)\r\n                        $http.get('/schemas').then(function (schemas) {\r\n                            var models = schemas.data;\r\n                            cb(models);\r\n                        });\r\n                    };\r\n\r\n                    service.getModel = function (modelName, cb) {\r\n                        if (!modelsConfig[modelName] && cb) {\r\n                            $http.get('/schema/' + modelName).then(function (schema) {\r\n                                $http.get('/schema/' + modelName + '/formconfig').then(function (config) {\r\n                                    modelsConfig[modelName] = {};\r\n                                    modelsConfig[modelName].schema = schema.data;\r\n                                    modelsConfig[modelName].config = config.data;\r\n                                    cb(modelsConfig[modelName]);\r\n                                });\r\n                            });\r\n                        } else if (!modelsConfig[modelName] && !cb) {\r\n                            var schema = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName,\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            var config = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName + '/formconfig',\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            modelsConfig[modelName] = {};\r\n                            modelsConfig[modelName].schema = schema;\r\n                            modelsConfig[modelName].config = config;\r\n\r\n                            return modelsConfig[modelName];\r\n\r\n                        } else {\r\n                            if (cb) {\r\n                                cb(modelsConfig[modelName]);\r\n                            } else {\r\n                                return modelsConfig[modelName];\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    service.getModelElements = function (modelName, skip, limit, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var plural = (data.config.plural || data.config.path + 's' || modelName + 's');\r\n                            var body = {\r\n                                skip: skip,\r\n                                limit: limit\r\n                            };\r\n                            if (service.getShard(modelName)) {\r\n                                body[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + plural, body).success(function (elements) {\r\n                                cb(elements.result, elements.status.count);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getModelSchema = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.schema);\r\n                        });\r\n                    };\r\n\r\n                    service.getModelConfig = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.config);\r\n                        });\r\n                    };\r\n\r\n                    service.postDocument = function (modelName, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.post(prefix + '/' + path, JSON.stringify(model)).then(function (response) {\r\n                                return cb(response);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getUrl = function (modelName, cb) {\r\n                        throw new Error(\"Not implemented\");\r\n                    };\r\n\r\n                    service.getDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        if (!modelName) {\r\n                            return cb();\r\n                        }\r\n                        if (!id) {\r\n                            return cb();\r\n                        }\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var qParams = {\r\n                                params: {\r\n                                    type: \"back\"\r\n                                }\r\n                            };\r\n\r\n                            service.getModelConfig(modelName, function (cfg) {\r\n                                if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                    qParams.params[cfg.shard.shardKey] = shard;\r\n                                } else if (service.getShard(modelName)) {\r\n                                    qParams.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                                }\r\n\r\n                                $http.get(prefix + '/' + path + '/' + id, qParams).success(function (document) {\r\n                                    return cb(document, null);\r\n                                }).error(function (data) {\r\n                                    return cb(null, data);\r\n                                });\r\n                            });\r\n\r\n                        });\r\n                    };\r\n\r\n                    service.putDocument = function (modelName, id, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.put(prefix + '/' + path + '/' + id, JSON.stringify(model)).then(function (document) {\r\n                                return cb(document);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (cfg.path || modelName);\r\n\r\n                            var opts = {params: {}};\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocumentByMongoId = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (data.config.path || modelName);\r\n\r\n                            var opts = {\r\n                                params: {\r\n                                    type: 'raw'\r\n                                }\r\n                            };\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.uploadImage = function (modelName, id, fieldName, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: image,\r\n                                fileFormDataName: ['image']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.uploadFile = function (modelName, id, fieldName, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: file,\r\n                                fileFormDataName: ['file']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.deleteImage = function (modelName, id, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/image/' + image).then(cb);\r\n                        });\r\n                    };\r\n\r\n\r\n                    service.deleteFile = function (modelName, id, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/file/' + file).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.getImageUrl = function (modelName, id, imageName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/image/' + imageName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getFileUrl = function (modelName, id, fileName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/file/' + fileName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getSingleModel = function (modelName, cb) {\r\n                        if (singlesCache[modelName]) {\r\n                            cb(singlesCache[modelName]);\r\n                        }\r\n                        else {\r\n                            service.search(modelName, {skip: 0, limit: 1}, function (elements, count) {\r\n                                if (count > 0) {\r\n                                    //We only cach if we found THE single document\r\n                                    singlesCache[modelName] = elements[0];\r\n                                    cb(elements[0]);\r\n                                } else {\r\n                                    //Do nothing from now\r\n                                    cb(null);\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n\r\n                    service.search = function (modelName, query, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (shard && config.shard && config.shard.shardKey) {\r\n                                query[config.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + path, JSON.stringify(query)).success(function (documents) {\r\n                                if (documents.status.search_count !== undefined) {\r\n                                    cb(documents.result, documents.status.search_count);\r\n                                }\r\n                                else {\r\n                                    cb(documents.result, documents.status.count);\r\n                                }\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.export = function (modelName, format, searchQuery, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var query = {};\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n                            query.by = config.id;\r\n                            query.query = searchQuery || {};\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/export', query);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.import = function (modelName, format, file, query, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/export', query, \"POST\", file);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.postAsForm = function (path, params, method, file) {\r\n                        method = method || \"post\"; // Set method to post by default if not specified.\r\n\r\n                        if (file) {\r\n                            console.log(\"FILE\", file);\r\n                        }\r\n\r\n                        console.log(\"POST AS FORM\", path, params, method, file);\r\n\r\n                        // The rest of this code assumes you are not using a library.\r\n                        // It can be made less wordy if you use one.\r\n                        var form = document.createElement(\"form\");\r\n                        form.setAttribute(\"method\", method);\r\n                        form.setAttribute(\"action\", path + \"?token=\" + $http.defaults.headers.common.Authorization.replace(\"BEARER \", \"\"));\r\n\r\n                        for (var key in params) {\r\n\r\n                            if (params.hasOwnProperty(key)) {\r\n                                var hiddenField = document.createElement(\"input\");\r\n                                hiddenField.setAttribute(\"type\", \"hidden\");\r\n                                hiddenField.setAttribute(\"name\", key);\r\n                                if (typeof(params[key]) == \"object\") {\r\n                                    hiddenField.setAttribute(\"value\", JSON.stringify(params[key]));\r\n                                } else {\r\n                                    hiddenField.setAttribute(\"value\", params[key]);\r\n                                }\r\n\r\n                                form.appendChild(hiddenField);\r\n                            }\r\n                        }\r\n\r\n                        /*fieldAttr(params);\r\n\r\n                         function fieldAttr(obj, parent) {\r\n\r\n                         for (var key in obj) {\r\n                         var full = parent ? parent + \".\" + key : key;\r\n                         if(typeof(obj[key]) == \"object\"){\r\n                         fieldAttr(obj[key], full);\r\n                         }\r\n                         if (obj.hasOwnProperty(key)) {\r\n                         var hiddenField = document.createElement(\"input\");\r\n                         hiddenField.setAttribute(\"type\", \"hidden\");\r\n                         hiddenField.setAttribute(\"name\", full);\r\n                         hiddenField.setAttribute(\"value\", obj[full]);\r\n\r\n                         form.appendChild(hiddenField);\r\n                         }\r\n                         }\r\n                         }*/\r\n\r\n                        form.submit();\r\n                    };\r\n\r\n                    service.getGraph = function (modelName, graphID, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.path || modelName);\r\n                            $http.post(prefix + '/' + path + '/graphs/' + encodeURI(graphID)).success(function (data) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    /**\r\n                     * Obtains point separated field {{field}} from schema {{schema}}\r\n                     * @param field\r\n                     * @param schema\r\n                     * @returns {*}\r\n                     */\r\n                    service.getFieldFromSchema = function (field, schema) {\r\n                        if (schema[field]) {\r\n                            return schema[field];\r\n                        } else {\r\n                            var elements = field.split('.');\r\n                            var retElem;\r\n                            for (var i in elements) {\r\n                                if (retElem && retElem.properties) {\r\n                                    retElem = retElem.properties[elements[i]];\r\n                                } else if (retElem && retElem.ref && retElem.denormalize && retElem.denormalize.indexOf(elements[i]) > -1) {\r\n                                    //Todo: Call api and resolve the model field\r\n                                    var refSchema = service.getModel(retElem.ref);\r\n                                    retElem = angular.copy(service.getFieldFromSchema(elements[i], refSchema.schema));\r\n                                    if (retElem && retElem.title) {\r\n                                        var index = field.lastIndexOf(\".\");\r\n                                        retElem.title = common.prettifyTitle(field.substring(0, index) + '.' + retElem.title);\r\n                                        //retElem.title = \"A \"+retElem.title;\r\n                                    }\r\n                                } else {\r\n                                    retElem = schema[elements[i]];\r\n                                }\r\n                            }\r\n\r\n                            return retElem;\r\n                        }\r\n                    };\r\n\r\n                    angular.forEach(Object.keys(overrides), function (key) {\r\n                        service[key] = overrides[key];\r\n                    });\r\n\r\n                    return service;\r\n                }];\r\n            }\r\n        );\r\n}());\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .factory('selectCacheService', function () {\n            return {\n                TIMEOUT_MS: 750,\n                timers: {},\n                cache: {}\n            };\n        })\n        .provider('selectCache', function () {\n            this.$get = ['$rootScope', 'models', 'selectCacheService', function ($rootScope, models, selectCacheService) {\n                var provider = {};\n\n                $rootScope.$on('$routeChangeStart', function (event, next, current) {\n                    if (next != current) {\n                        selectCacheService.cache = {};\n                        angular.forEach(Object.keys(selectCacheService.timers), function (m) {\n                            clearTimeout(selectCacheService.timers[m]);\n                            delete selectCacheService.timers[m];\n                        });\n                        //console.log(\"[SelectCache] CACHE CLEARED\");\n                    }\n                });\n\n                provider.search = function (modelName, b, shard, cb) {\n                    var body = JSON.stringify(b);\n                    //console.log(\"[SelectCache] POST FROM SELECT\", modelName, b);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].posts) {\n                        selectCacheService.cache[modelName].posts = {};\n                    }\n\n                    var cached = selectCacheService.cache[modelName].posts[body];\n                    if (!cached) {//A new query\n                        selectCacheService.cache[modelName].posts[body] = {}; //CALLBACKS\n                        selectCacheService.cache[modelName].posts[body].cbks = [cb]; //CALLBACKS\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP POST\", modelName, b);\n                        models.search(modelName, b, shard, function (response, count) {\n                            //console.log(\"[SelectCache] POST SELECT RESULT\", modelName, b, {\n                            //    count: count,\n                            //    response: response\n                            //});\n                            selectCacheService.cache[modelName].posts[body].res = {\n                                response: response,\n                                count: count\n                            };\n                            angular.forEach(selectCacheService.cache[modelName].posts[body].cbks, function (cbk) {\n                                cbk(response, count);\n                            });\n                            selectCacheService.cache[modelName].posts[body].cbks = [];\n                        });\n\n                    } else if (!cached.res && cached.cbks) {//Not finished query\n                        cached.cbks.push(cb);\n                        //console.log(\"[SelectCache] ADDED CB FOR POST\", modelName, b);\n                    } else { //Finished query\n                        cached.cbks.push(cb);\n                        angular.forEach(cached.cbks, function (cbk) {\n                            //console.log(\"[SelectCache] CACHED POST\", modelName, b, {\n                            //    count: cached.res.count,\n                            //    response: cached.res.response\n                            //});\n                            cbk(cached.res.response, cached.res.count);\n                        });\n                        cached.cbks = [];\n                    }\n                };\n\n                provider.getDocument = function (modelName, id, shard, cb) {\n                    //console.log(\"[SelectCache] GET FROM SELECT\", modelName, id);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].gets) {\n                        selectCacheService.cache[modelName].gets = {};\n                    }\n\n                    if (id) {\n                        if (!selectCacheService.cache[modelName].gets[id]) {\n                            selectCacheService.cache[modelName].gets[id] = {};\n                        }\n\n                        if (!selectCacheService.cache[modelName].gets[id].cbks) {\n                            selectCacheService.cache[modelName].gets[id].cbks = [];\n                        }\n\n                        if (selectCacheService.cache[modelName].gets[id].result) {\n                            //console.log(\"[SelectCache] CACHED VALUE\", modelName, id, selectCacheService.cache[modelName].gets[id].result);\n                            cb(selectCacheService.cache[modelName].gets[id].result);\n                        } else if (selectCacheService.cache[modelName].gets[id].cbks.indexOf(cb) == -1) {\n                            selectCacheService.cache[modelName].gets[id].cbks.push(cb);\n                            //console.log(\"[SelectCache] ADDED CB FOR GET\", modelName, id);\n\n                            if (selectCacheService.timers[modelName]) {\n                                clearTimeout(selectCacheService.timers[modelName]);\n                            }\n\n                            //TODO: Possible bug, ASYNC MODELNAME && SHARD !!!!!\n                            selectCacheService.timers[modelName] = setTimeout(function(){\n                                httpCall(modelName, shard);\n                            }, selectCacheService.TIMEOUT_MS);\n                        }\n                    } else{\n                        //WE HAVE TO RELEASE THE GETDOCUMENT CALLBACK!!!\n                        cb();\n                    }\n                };\n\n                function httpCall(model, shard) {\n                    models.getModelConfig(model, function (cfg) {\n                        var q = {};\n                        if (shard && cfg.shard.shardKey) {\n                            q[cfg.shard.shardKey] = shard;\n                        }\n\n                        var keys = Object.keys(selectCacheService.cache[model].gets);\n                        if (keys.length == 1) {\n                            q[cfg.id] = keys[0];\n                        } else {\n                            q.$or = [];\n                            angular.forEach(keys, function (id) {\n                                if (!selectCacheService.cache[model].gets[id].result) {\n                                    var singleQ = {};\n                                    singleQ[cfg.id] = id;\n                                    q.$or.push(singleQ);\n                                }\n                            });\n                        }\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP GETS\", model, q);\n                        models.search(model, {query: q}, function (result, count) {\n                            //console.log(\"[SelectCache] GET SELECT RESULT\", model, q, result);\n                            angular.forEach(result, function (doc) {\n                                var id = doc[cfg.id];\n                                selectCacheService.cache[model].gets[id].result = doc;\n                            });\n\n                            angular.forEach(Object.keys(selectCacheService.cache[model].gets), function (idKey) {\n                                var getObj = selectCacheService.cache[model].gets[idKey];\n                                if (getObj.cbks) {\n                                    angular.forEach(getObj.cbks, function (cb) {\n                                        cb(getObj.result);\n                                    });\n                                    delete getObj.cbks;\n                                }\n                            });\n                        });\n                    });\n                }\n\n                return provider;\n            }];\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('httpResponseInterceptor', ['$q', '$location', '$routeParams', 'flash', '$injector', 'configs', function ($q, $location, $routeParams, flash, $injector, configs) {\r\n\r\n            return {\r\n                response: function (response) {\r\n                    //console.log(response);\r\n                    if (response.headers(\"routeinjector\") && (response.headers(\"routeinjector\") !== configs.backoffice.version)) {\r\n                        var ngDialog = $injector.get(\"ngDialog\");\r\n                        if (ngDialog.getOpenDialogs().length === 0) {\r\n                            ngDialog.open({\r\n                                template: \"dialogVersionMismatch\",\r\n                                className: 'ngdialog-theme-default ngdialog-theme-custom'\r\n                            });\r\n                        }\r\n                    }\r\n                    if (response.status === 401) {\r\n                        console.log(\"Response 401\");\r\n                    } else if (response.status === 201) {\r\n                        flash.success(\"Done\", \"Document saved successfully\");\r\n                    }\r\n                    return response || $q.when(response);\r\n                },\r\n                responseError: function (rejection) {\r\n\r\n                    var models = $injector.get(\"models\");\r\n\r\n                    var modelName = $routeParams.schema;\r\n                    var modelId = $routeParams.id;\r\n\r\n                    var errorInReferencedProperty;\r\n                    var prefix = configs.app.prefix;\r\n\r\n                    if (modelName) {\r\n                        models.getModelConfig(modelName, function (model) {\r\n                            var path = \"/\" + model.path + \"/\" + modelId;\r\n                            if (prefix) {\r\n                                path = \"/\" + path;\r\n                            }\r\n\r\n                            errorInReferencedProperty = path !== rejection.config.url;\r\n                            handleError(errorInReferencedProperty);\r\n\r\n                        });\r\n                    } else {\r\n                        handleError(true);\r\n                    }\r\n\r\n                    function handleError(ignoreError) {\r\n                        function redirectError() {\r\n                            if ($location.url() != \"/login\" && $location.url() != \"/logout\" && $location.url() != \"/\") {\r\n                                if ($routeParams.schema) {\r\n                                    $location.path('/model/' + $routeParams.schema);\r\n                                } else {\r\n                                    $location.path('/');\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (rejection.status === 401) {\r\n                            console.log(\"Response Error 401\", rejection);\r\n                            redirectError();\r\n\r\n                            if ($location.url() != \"/login\") {\r\n                                flash.error(\"Unauthorized\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (rejection.status === 500) {\r\n                            flash.error(\"Internal server error\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 400) {  //Client error\r\n                            flash.error(\"Bad Request\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && !ignoreError) {\r\n                            redirectError();\r\n                            flash.error(\"Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && ignoreError) {\r\n                            flash.warning(\"Property Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 403) {\r\n                            if (rejection.data && rejection.data.errors) {\r\n                                var errors = [];\r\n                                angular.forEach(Object.keys(rejection.data.errors), function (e) {\r\n                                    errors.push(\"<strong>\" + e + \"</strong> validation failed. Caused by: \" + rejection.data.errors[e].message);\r\n                                });\r\n                                errors.splice(0, 0, \"Validation Error \" + rejection.status + \"\");\r\n                                flash.error.apply(this, errors);\r\n                            } else {\r\n                                flash.error(\"Validation Error \" + rejection.status + \"\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (Math.floor(rejection.status / 100) == 4 || Math.floor(rejection.status / 100) == 5) {\r\n                            redirectError();\r\n                            flash.error(\"Error \" + rejection.status, JSON.stringify(rejection.data));\r\n                        }\r\n                    }\r\n\r\n                    return $q.reject(rejection);\r\n                }\r\n            };\r\n        }\r\n        ])\r\n        .config(['$httpProvider', function ($httpProvider) {\r\n            //Http Interceptor to check failures\r\n            $httpProvider.interceptors.push('httpResponseInterceptor');\r\n        }]);\r\n}());\r\n\n//(function () {\r\n//    'use strict';\r\n//    angular.module('injectorApp')\r\n//        .factory('flash', function ($rootScope) {\r\n//            var queue = [];\r\n//            var currentMessage = \"\";\r\n//\r\n//            $rootScope.$on(\"$routeChangeSuccess\", function () {\r\n//                currentMessage = queue.shift() || \"\";\r\n//            });\r\n//\r\n//            return {\r\n//                setMessage: function (message) {\r\n//                    queue.push(message);\r\n//                },\r\n//                getMessage: function () {\r\n//                    return currentMessage;\r\n//                }\r\n//            };\r\n//        });\r\n//}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('dependsOn', ['$http', 'configs', 'common', 'models', function ($http, configs, common, models) {\r\n        var factory = {};\r\n\r\n        factory.find = function (obj) {\r\n            var depArr = [];\r\n            function innerDependsOn(obj, index) {\r\n                if (typeof obj == \"object\") {\r\n                    $.each(obj, function (k, v) {\r\n                        // k is either an array index or object key\r\n                        if (k == 'dependsOn') {\r\n                            depArr.push({\r\n                                path: index,\r\n                                field: v.field,\r\n                                params: v.params,\r\n                                func: v.func\r\n                            });\r\n                        }\r\n                        if (!index) {\r\n                            index = k;\r\n                        }\r\n                        else {\r\n                            index = index + '.' + k;\r\n                        }\r\n                        innerDependsOn(v, index);\r\n                        var indexArray = index.split('.');\r\n                        indexArray.pop();\r\n                        index = indexArray.join('.');\r\n                    });\r\n                }\r\n                else {\r\n                    var indexArray = index.split('.');\r\n                    indexArray.pop();\r\n                    index = indexArray.join('.');\r\n                }\r\n            }\r\n\r\n            innerDependsOn(obj);\r\n            return depArr;\r\n        };\r\n\r\n        factory.apply = function (scope, modelName, doc) {\r\n            function updateFunc(modelConfig, dependsValue, arrayIndex) {\r\n                return function(newVal, oldVal) {\r\n                    if (newVal) {\r\n                        //configs.getRoutesConfig(function (c) {\r\n                            var url = configs.app.prefix + '/_' + modelConfig.path + '/' + dependsValue.func ;\r\n                            var body = {};\r\n                            angular.forEach(dependsValue.params, function (param) {\r\n                                body[param]= safeAccess(doc, param);\r\n                            });\r\n\r\n                            /*if(arrayIndex !== undefined){ //TODO: I'm not sure...\r\n                                url += '/' + arrayIndex;\r\n                            }*/\r\n\r\n                            $http.post(url, body).success(function (data) {\r\n                                var replaced = dependsValue.path.replace(/properties\\./g, '');\r\n\r\n                                if(arrayIndex !== undefined){\r\n                                    replaced = replaced.replace(/\\.items/g, '[' + arrayIndex + ']');\r\n                                }\r\n\r\n                                common.setField(replaced, doc, data);\r\n                            });\r\n                        //});\r\n                    }\r\n                };\r\n            }\r\n\r\n\r\n            models.getModel(modelName, function (m) {\r\n                var depArr = factory.find(m.schema);\r\n                $.each(depArr, function (k, v) {\r\n                    if ((/(this\\.)/).test(v.field)) {\r\n                        var path = v.path.replace(/properties\\./g, '');\r\n                        var root = path.split('.')[0];\r\n                        var targetField = v.field.replace(/(this\\.)/, \"\");\r\n\r\n                        if ((/(items)/).test(path)) { //Is an array\r\n                            scope.$watchCollection(\"model.\" + root, function (nV, oV) {\r\n                                if (nV && nV instanceof Array) {\r\n                                    for (var i in nV) {\r\n                                        var normPath = root + \"[\" + i + \"].\" + targetField;\r\n                                        for (var p in v.params) {\r\n                                            v.params[p] = normPath;\r\n                                        }\r\n                                        scope.$watch(\"model.\" + normPath, updateFunc(m.config, angular.copy(v), angular.copy(i)));\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else{ // Is an object\r\n                            var normPath = root + \".\" + targetField;\r\n                            scope.$watch('model' + '.' + normPath, updateFunc(m.config, angular.copy(v)));\r\n                        }\r\n                    } else {\r\n                        scope.$watch('model' + '.' + v.field, updateFunc(m.config, v));\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        return factory;\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('common', ['$rootScope', function ($rootScope) {\r\n\r\n            var factory = {};\r\n\r\n            factory.hasAngularVariable = function (url) {\r\n                return (/\\{{(.*)\\}}/).test(url);\r\n            };\r\n\r\n            factory.deAngularizeUrl = function (doc, url) {\r\n                return url.replace(/\\{{(.*)\\}}/g, function (ng, matched) {\r\n\r\n                    var f = factory.getField(matched, doc);\r\n                    return f;\r\n                });\r\n            };\r\n\r\n            factory.getAngularVariables = function (url) {\r\n                return /\\{{(.*)\\}}/.exec(url)[1];\r\n            };\r\n\r\n            factory.prettifyTitle = function (title, separator) {\r\n                title = title || \"\";\r\n                separator = separator || \".\";\r\n                return title\r\n                    // look for \".\"  user.age will be User -> Age\r\n                    //TODO: Look for separator instead of \".\"\r\n                    .replace(/(\\.([a-z]|[A-Z]))/g, function (str) {\r\n                        return \" <i class='fa fa-angle-right'></i> \" + str.replace(\".\", \"\").toUpperCase();\r\n                    })\r\n                    // insert a space before all caps\r\n                    .replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) {\r\n                        return str.toUpperCase();\r\n                    });\r\n            };\r\n\r\n            /**\r\n             * Gets field value in point separated {{field}} from the model {{element}}. Also accepts [] notation.\r\n             * @param field\r\n             * @param element\r\n             * @returns {*}\r\n             */\r\n            factory.getField = function (field, element) {\r\n                if (element) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ret = element;\r\n                        var returnArray;\r\n                        var parentArr;\r\n                        for (var path in splitted) {\r\n\r\n                            //Method for extract array[].a fields or array[0].a fields.\r\n                            if ((/(\\[\\d*\\])/).test(splitted[path])) {\r\n                                //Is an array !!!\r\n                                var rootElem = splitted[path].replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = splitted[path].match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                if (ret) {\r\n                                    if (index) {\r\n                                        ret = ret[rootElem][index];\r\n                                    }\r\n                                    else {\r\n                                        parentArr = rootElem;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parentArr) {\r\n                                    var tmp = ret;\r\n                                    returnArray = [];\r\n                                    for (var elem in tmp[parentArr]) {\r\n                                        returnArray.push(tmp[parentArr][elem][splitted[path]]);\r\n                                    }\r\n                                } else {\r\n                                    if (ret) {\r\n                                        ret = ret[splitted[path]];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (returnArray) {\r\n                            return returnArray;\r\n                        }\r\n                        return ret;\r\n                    } else {\r\n                        return element[field];\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Sets value {{value}} to model {{model}} in the point separated field {{field}}\r\n             * @param field\r\n             * @param model\r\n             * @param value\r\n             */\r\n            factory.setField = function (field, model, value) {\r\n                if (model) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ref = model;\r\n                        for (var i = 0; i < splitted.length; i++) {\r\n                            var path = splitted[i];\r\n                            if ((/(\\[\\d*\\])/).test(path)) {\r\n                                var rootElem = path.replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = path.match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                var newPath;\r\n                                if (index === undefined) {\r\n                                    for (var arrInd in ref[rootElem]) {\r\n                                        newPath = splitted[i + 1];\r\n                                        factory.setField(newPath, ref[rootElem][arrInd], value);\r\n                                    }\r\n                                } else {\r\n                                    newPath = splitted[i + 1];\r\n                                    factory.setField(newPath, ref[rootElem][index], value);\r\n                                }\r\n                            } else {\r\n                                if (i < splitted.length - 1) {\r\n                                    if (!ref[path]) {\r\n                                        ref[path] = {};\r\n                                    }\r\n                                    ref = ref[path];\r\n                                } else {\r\n                                    ref[path] = value;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Obtains all the keys of an schema (using {{separator}} as nested level indicator)\r\n             * @param schema\r\n             * @param separator\r\n             * @returns {Array}\r\n             */\r\n            factory.getAllSchemaFields = function (schema, separator) {\r\n                separator = separator || \".\";\r\n                var fields = [];\r\n\r\n                function searchFields(obj, parent) {\r\n                    var keys = Object.keys(obj);\r\n                    angular.forEach(keys, function (k) {\r\n                        if (obj[k].properties) {\r\n                            searchFields(obj[k].properties, parent ? (parent + separator + k) : k);\r\n                        } else if (obj[k].denormalize) {\r\n                            angular.forEach(obj[k].denormalize, function (field) {\r\n                                fields.push((parent ? (parent + separator) : \"\") + k + separator + field);\r\n                            });\r\n                        } else {\r\n                            fields.push(parent ? (parent + separator + k) : k);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                searchFields(schema);\r\n\r\n                return fields;\r\n            };\r\n\r\n            /**\r\n             * Process the form and returns the schema form for the schemaForm module\r\n             * @param form\r\n             * @param submitButtons\r\n             * @returns {*|string[]}\r\n             */\r\n            factory.processForm = function (form, submitButtons) {\r\n                var showSubmitButtons = (submitButtons === undefined || submitButtons);\r\n                var innerForm;\r\n\r\n                if (form && form.tabs) {\r\n                    innerForm = innerForm || [];\r\n                    innerForm.push({\r\n                        \"type\": \"tabs\",\r\n                        \"tabs\": form.tabs\r\n                    });\r\n                } else if (form && form.items) {\r\n                    innerForm = form.items;\r\n                }\r\n\r\n                innerForm = innerForm || [\"*\"];\r\n\r\n                //TODO: Keep this comment out to wait if someone complains of missing feature\r\n                //if (showSubmitButtons) {\r\n                //    var hasSubmitButton = false;\r\n                //    angular.forEach(innerForm, function (item) {\r\n                //        if (item.type == \"submit\") {\r\n                //            hasSubmitButton = true;\r\n                //        }\r\n                //    });\r\n                //\r\n                //    if (!hasSubmitButton) {\r\n                //        innerForm.push({\r\n                //            type: \"submit\",\r\n                //            title: \"Save\"\r\n                //        });\r\n                //    }\r\n                //\r\n                //}\r\n\r\n                return innerForm;\r\n            };\r\n\r\n            factory.randomNumber = function () {\r\n                return (new Date()).getTime();\r\n            };\r\n\r\n            factory.getRandomQuery = function () {\r\n                return '?r=' + factory.randomNumber();\r\n            };\r\n\r\n            return factory;\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('search', ['$rootScope', 'models', function ($rootScope, models) {\r\n            var query = {};\r\n\r\n            return {\r\n                setQuery: function (q) {\r\n                    query.query = q;\r\n                },\r\n                clearQuery: function() {\r\n                    this.setQuery({});\r\n                },\r\n                getQuery: function () {\r\n                    return query.query;\r\n                },\r\n                setSortBy: function (sort) {\r\n                    query.sortBy = sort;\r\n                },\r\n                addSortBy: function(field, asc) {\r\n                    query.sortBy = {};\r\n                    query.sortBy[field] = asc ? 1 : -1;\r\n                },\r\n                getSort: function(field) {\r\n                    if(query.sortBy) {\r\n                        return query.sortBy[field];\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                },\r\n                setSkip: function(skip){\r\n                    query.skip = skip;\r\n                },\r\n                setLimit: function(limit){\r\n                    query.limit = limit;\r\n                },\r\n                search: function (schema,  callback) {\r\n                    models.search(schema, query, function (elements, count) {\r\n                        callback(elements, count, null);\r\n                    });\r\n                },\r\n                searchAndGroup: function(schema, callback) {\r\n                    //TODO: Montar la query con grupos\r\n                    //TODO: Volver al modelController y añadir una columna de grupo (p.ej. count)\r\n                    //TODO: Pintar !!\r\n                }\r\n            };\r\n\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('sideMenu', function () {\r\n            return {\r\n                restrict: 'E',\r\n                scope: false,\r\n                templateUrl: 'html/side-menu.html',\r\n                controller: ['$scope', '$routeParams', '$location', 'common', 'models', 'customMenu', '$window', '$rootScope', function ($scope, $routeParams, $location, common, models, customMenu, $window, $rootScope) {\r\n                    $scope.common = common;\r\n\r\n                    $scope.$on(\"$routeChangeStart\", function (event, next, current) {\r\n                        if (next.params.schema) {\r\n                            $scope.actualSchema = next.params.schema;\r\n                        }\r\n                    });\r\n                    $scope.isDisabled = false;\r\n                    $scope.isOpen = false;\r\n\r\n                    var render = function () {\r\n                        $scope.sections = new Sections();\r\n\r\n                        angular.forEach(customMenu, function (elem) {\r\n                            $scope.sections.add(elem.section, elem.title, elem);\r\n                        });\r\n\r\n                        models.getModels(function (m) {\r\n                            angular.forEach(m, function (schema) {\r\n                                models.getModelConfig(schema, function (config) {\r\n                                    if (!config.hideMenu) {\r\n                                        if(config.isSingle) {\r\n                                            models.getSingleModel(schema, function(doc) {\r\n                                                if(doc) {\r\n                                                    config.clickTo = \"model/\" + schema + \"/update/\" + doc[config.id];\r\n                                                } else {\r\n                                                    config.clickTo = \"model/\" + schema + \"/new\";\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            config.clickTo = \"model/\" + schema;\r\n                                        }\r\n                                        $scope.sections.add(config.section, schema, config);\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    };\r\n\r\n\r\n                    render();\r\n                    $rootScope.$on('invalidate', function () {\r\n                        render();\r\n                    });\r\n\r\n                    $scope.openSection = function (section) {\r\n                        $scope.actualSection = section;\r\n                    };\r\n\r\n                    $scope.click = function (section, name, conf) {\r\n                        $scope.parentSchema = section;\r\n                        $scope.actualSchema = name;\r\n                        $scope.actualSection = section;\r\n                        if (conf.clickTo) {\r\n                            $location.path(conf.clickTo);\r\n                        } else if (conf.url) {\r\n                            $window.location.href = conf.url;\r\n                        }\r\n                    };\r\n\r\n                    $scope.isInstanceOf = function (obj) {\r\n                        return (obj instanceof Section);\r\n                    };\r\n\r\n                    $scope.debug = function (a, b) {\r\n                        console.log(a, b);\r\n                    };\r\n                }]\r\n            };\r\n        });\r\n}());\r\n\r\nvar Section = function () {\r\n};\r\nvar Sections = function () {\r\n\r\n\r\n    var menu = {};\r\n\r\n    this.get = function () {\r\n        return menu;\r\n    };\r\n\r\n\r\n    this.add = function (key, schema, config) {\r\n        /**\r\n         * Dot notation loop: http://stackoverflow.com/a/10253459/607354\r\n         */\r\n        var levels = key.split(\".\");\r\n        var curLevel = menu;\r\n        var i = 0;\r\n        while (i < levels.length - 1) {\r\n            if (typeof curLevel[levels[i]] === 'undefined') {\r\n                curLevel[levels[i]] = new Section();\r\n            }\r\n\r\n            curLevel = curLevel[levels[i]];\r\n            i++;\r\n        }\r\n\r\n        curLevel[levels[levels.length - 1]] = curLevel[levels[levels.length - 1]] || new Section();\r\n        curLevel[levels[levels.length - 1]][schema] = config;\r\n    };\r\n};\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive('scrollToItem', function () {\n            return {\n                restrict: 'A',\n                scope: {\n                    scrollTo: \"@\"\n                },\n                link: function (scope, $elm, attr) {\n\n                    $elm.on('click', function () {\n                        $('html,body').animate({scrollTop: $(scope.scrollTo).offset().top}, \"slow\");\n                    });\n                }\n            };\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('compile', ['$compile', function($compile) {\r\n        // directive factory creates a link function\r\n        return function(scope, element, attrs) {\r\n            scope.$watch(\r\n                function(scope) {\r\n                    // watch the 'compile' expression for changes\r\n                    return scope.$eval(attrs.compile);\r\n                },\r\n                function(value) {\r\n                    // when the 'compile' expression changes\r\n                    // assign it into the current DOM\r\n                    element.html(value);\r\n\r\n                    // compile the new DOM and link it to the current\r\n                    // scope.\r\n                    // NOTE: we only compile .childNodes so that\r\n                    // we don't get into infinite loop compiling ourselves\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            );\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorPunchcard', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-punchcard/injector-punchcard.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var modelName = $routeParams.schema;\r\n                models.getGraph(modelName, attrs.graph, function(data){\r\n                    scope.elements = Object.keys(data);\r\n                    scope.selected = scope.elements[0];\r\n                    scope.punchCardData = data[scope.selected];\r\n                    scope.$watch('selected', function(selected){\r\n                       scope.punchCardData = data[selected];\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorBargraph', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-bargraph/injector-bargraph.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n\r\n                var modelName = $routeParams.schema;\r\n                models.getModelConfig(modelName, function (config) {\r\n                    models.getGraph(modelName, attrs.graph, function (data) {\r\n\r\n                        var graph = {};\r\n                        for(var i in config.graphs){\r\n                            var g = config.graphs[i];\r\n\r\n                            if(g.title == attrs.graph){\r\n                                graph = g;\r\n                            }\r\n                        }\r\n\r\n                        scope.elements = Object.keys(data);\r\n                        scope.selected = scope.elements[0];\r\n\r\n                        if(graph.groupMode == \"series\"){\r\n                            scope.selectEnabled = false;\r\n\r\n                        } else if(graph.groupMode == \"select\"){\r\n                            scope.selectEnabled = true;\r\n                        } else{\r\n                            console.error(\"Invalid configuration at bargraph group Mode:\", graph.groupMode);\r\n                        }\r\n\r\n                        if (scope.selectEnabled === true) {\r\n                            //GroupedBy with select2 !!\r\n                            scope.barsData = [\r\n                                {\r\n                                    key: scope.selected,\r\n                                    values: data[scope.selected]\r\n                                }\r\n                            ];\r\n\r\n                            scope.$watch('selected', function (selected) {\r\n                                if (scope.selectEnabled === true) {\r\n                                    scope.barsData = [\r\n                                        {\r\n                                            key: selected,\r\n                                            values: data[selected]\r\n                                        }\r\n                                    ];\r\n                                }\r\n                            });\r\n\r\n                        } else {\r\n                            //Grouped by in legend !\r\n                            scope.barsData = [];\r\n                            for (var key in data) {\r\n                                scope.barsData.push(\r\n                                    {\r\n                                        key: key,\r\n                                        values: data[key]\r\n                                    });\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp').directive('modelButtons', ['$routeParams', '$http', '$q', '$route', 'models', '$location', function ($routeParams, $http, $q, $route, models, $location) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: false, //Use the parent scope, in this case the modelController (this directive always will be loaded in the model page!)\r\n            //If not, we should set scope to true and implement here all the functions\r\n            templateUrl: 'js/directives/model-buttons/model-buttons.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.performAction = function (action) {\r\n                    if (action.type && action.type == \"form\") {\r\n                        //post as form\r\n                        models.postAsForm(action.path, action.data, 'post');\r\n                    } else if (action.type && action.type == \"location\") {\r\n                        $location.path(action.location);\r\n                    } else {\r\n                        var req = {\r\n                            method: action.method,\r\n                            url: action.path,\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            data: action.data\r\n                        };\r\n\r\n                        $http(req);\r\n                    }\r\n                };\r\n\r\n                function exportElements() {\r\n                    var checked = scope.elements.filter(function (x) {\r\n                        return x.checked;\r\n                    });\r\n\r\n                    if (checked && checked.length > 0) {\r\n                        var query = {$or: []};\r\n                        angular.forEach(checked, function (elem) {\r\n                            query.$or.push({_id: elem._id});//We search by id\r\n                        });\r\n                        return query;\r\n                    } else {\r\n                        return scope.query;\r\n                    }\r\n                }\r\n\r\n                scope.export = function exportModels(format) {\r\n                    models.export(scope.schema, format, exportElements(), function (doc) {\r\n                    });\r\n                };\r\n\r\n\r\n                scope.import = function importModels(format) {\r\n                    console.log(\"IMPORT\", format, scope.schema);\r\n                    var file = \"\";\r\n                    models.import(scope.schema, format, file, function (doc) {\r\n                    });\r\n                };\r\n\r\n                scope.enableDelete = function () {\r\n                    if (!scope.elements) {\r\n                        return false;\r\n                    }\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    return checkedValues.length > 0;\r\n                };\r\n\r\n                scope.removeSelected = function removeSelected() {\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    if (checkedValues.length > 0) {\r\n                        scope.promptAlert(function (del) {\r\n                            if (del) {\r\n                                var deletions = [];\r\n                                angular.forEach(checkedValues, function (element) {\r\n                                    var deferred = $q.defer();\r\n                                    deletions.push(deferred.promise);\r\n\r\n                                    models.getModelConfig(scope.schema, function (cfg) {\r\n                                        var shard;\r\n\r\n                                        if (cfg.shard && cfg.shard.shardKey) {\r\n                                            shard = element[cfg.shard.shardKey];\r\n                                        }\r\n\r\n                                        if (scope.isDisabled(element)) {\r\n                                            models.removeDocumentByMongoId(scope.schema, element._id, shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        } else {\r\n                                            models.removeDocument(scope.schema, scope.id(element), shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                });\r\n                                $q.all(deletions).then(function () {\r\n                                    $route.reload();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .directive('searchInModel', ['$routeParams', 'models', 'common', 'search', function ($routeParams, models, common, search) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.searches = [];\r\n                    scope.models = models;\r\n                    var modelName = $routeParams.schema;\r\n\r\n\r\n                    scope.buildPath = function (field, schema) {\r\n                        var sc = models.getFieldFromSchema(field, schema);\r\n                        var title;\r\n                        if (sc && sc.title) {\r\n                            var i = field.lastIndexOf(\".\");\r\n                            if (i > -1 && sc.title.indexOf(\"<i\") == -1) {//TODO: ÑAPA DE LAS GUAPAS, ESTO HAY QUE CAMBIARLO\r\n                                title = common.prettifyTitle(field.substring(0, i) + '.' + sc.title);\r\n                            } else {\r\n                                title = sc.title;\r\n                            }\r\n\r\n                        } else {\r\n                            title = common.prettifyTitle(field);\r\n                        }\r\n\r\n                        return title;\r\n                    };\r\n\r\n                    scope.updateSearch = function (elemSearch, field, noSearch) {\r\n                        var index;\r\n                        if (elemSearch.field) {\r\n                            index = scope.availableFields.indexOf(elemSearch.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(elemSearch.field);\r\n                            }\r\n                        }\r\n\r\n                        var fieldFromSchema = models.getFieldFromSchema(field, scope.schema);\r\n\r\n                        elemSearch.title = fieldFromSchema.title;\r\n                        elemSearch.field = field;\r\n                        elemSearch.placeholder = {modelName: modelName, field: elemSearch.field};\r\n                        elemSearch.ref = (fieldFromSchema.ref && !fieldFromSchema.denormalize) ? fieldFromSchema.ref : undefined;\r\n\r\n                        index = scope.availableFields.indexOf(field);\r\n                        if (index > -1) {\r\n                            scope.availableFields.splice(index, 1);\r\n                        }\r\n\r\n                        if (!noSearch) {\r\n                            scope.search();\r\n                        }\r\n                    };\r\n\r\n                    scope.addSearch = function (field) {\r\n                        var s = {};\r\n                        field = field || scope.availableFields[0];\r\n\r\n                        s.clear = function () {\r\n                            s.value = \"\";\r\n                            scope.search();\r\n                        };\r\n\r\n                        s.remove = function () {\r\n\r\n                            var index = scope.searches.indexOf(s);\r\n                            if (index > -1) {\r\n                                scope.searches.splice(index, 1);\r\n                            }\r\n\r\n                            index = scope.availableFields.indexOf(s.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(s.field);\r\n                            }\r\n                            scope.search();\r\n                        };\r\n\r\n                        scope.updateSearch(s, field, true);\r\n                        scope.searches.push(s);\r\n                    };\r\n\r\n                    models.getModelSchema(modelName, function (schema) {\r\n                        if (schema) {\r\n                            scope.schema = schema;\r\n                            scope.allFields = common.getAllSchemaFields(schema);\r\n                            scope.availableFields = scope.allFields.filter(function (val) {\r\n                                var f = models.getFieldFromSchema(val, schema);\r\n                                return (f && f.format != \"image\" && f.format != \"mixed\");\r\n                            });\r\n                        }\r\n                    });\r\n                    models.getModelConfig(modelName, function (config) {\r\n                        scope.addSearch(config.displayField);\r\n                    });\r\n\r\n                    /*scope.$on('$routeChangeSuccess', function (event, current, previous) {\r\n                     searchFunc(current.params.schema);\r\n                     });*/\r\n\r\n                    //scope.newSearch = function () {\r\n                    //    scope.addSearch(scope.availableFields[0]);\r\n                    //};\r\n\r\n                    /*** MONGO DATE PARSING **/\r\n                    function parseMongoDate(txt) {\r\n                        var result = {};\r\n                        var dt = parseDateTimeRange(txt);\r\n\r\n                        if(dt.err) {\r\n                            return dt;\r\n                        }\r\n\r\n                        if(!dt.end) {\r\n                            //CASE 0 1/12/15 convert year\r\n                            updateYear(dt.start);\r\n                            var d = dt.start;\r\n\r\n                            if(d.day == undefined && d.month != undefined && d.year != undefined && d.hour == undefined) {\r\n                                //CASE 4 12/2015 -> gte 1/12/2015 0:00:00 .. lt 1/1/2016 0:00:00\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,1,0,0,0,0);\r\n                                result[\"$lt\"]  = new Date(d.year,d.month,1,0,0,0,0);\r\n                            } else if(d.day != undefined && d.month != undefined && d.year != undefined && d.hour == undefined) {\r\n                                //CASE 1 1/12/2015 -> 1/12/2015 0:00:00 .. lt 2/12/2015 0:00:00\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,d.day,0,0,0,0);\r\n                                result[\"$lt\"] =  new Date(d.year,d.month-1,d.day+1,0,0,0,0);\r\n                            } else if(d.day != undefined && d.month != undefined && d.year != undefined && d.hour != undefined) {\r\n                                //CASE 2 1/12/2015 HH:MM -> gte 1/12/2015 HH:MM:00 .. lte 1/12/2015 HH:MM:59\r\n                                //CASE 3 1/12/2015 HH:MM:SS\r\n                                var sec = 0;\r\n                                if(!isNaN(d.second)) {\r\n                                    sec = d.second;\r\n                                }\r\n                                result[\"$gte\"] = new Date(d.year,d.month-1,d.day,d.hour,d.minute,sec,0);\r\n                                result[\"$lte\"] = new Date(d.year,d.month-1,d.day,d.hour,d.minute,sec,999);\r\n                            } else {\r\n                                result = {err: \"format invalid\"};\r\n                            }\r\n                        } else {\r\n                            //CASE 0 1/12/15 convert year\r\n                            updateYear(dt.start);\r\n                            updateYear(dt.end);\r\n                            var d1 = dt.start;\r\n                            var d2 = dt.end;\r\n                            var sec1 = 0;\r\n                            var sec2 = 0;\r\n\r\n                            if(d1.second != undefined) {\r\n                                sec1 = d1.second;\r\n                            }\r\n\r\n                            if(d2.second != undefined) {\r\n                                sec2 = d2.second;\r\n                            }\r\n\r\n                            if(d1.hour == undefined && d2.hour == undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 - 2/2/90\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,0,0,0,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,23,59,59,999);\r\n                            } else if(d1.hour != undefined && d2.hour != undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 H:M - 2/2/90 H:M\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,d2.hour,d2.minute,sec2,999);\r\n                            } else if(d1.hour != undefined && d2.hour != undefined && d1.year != undefined && d2.year == undefined) {\r\n                                // 1/2/90 H:M - H:M\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d1.year,d1.month-1,d1.day,d2.hour,d2.minute,sec2,999);\r\n                            } else if(d1.hour != undefined && d2.hour == undefined && d1.year != undefined && d2.year != undefined) {\r\n                                // 1/2/90 H:M - 2/2/90\r\n                                result[\"$gte\"] = new Date(d1.year,d1.month-1,d1.day,d1.hour,d1.minute,sec1,0);\r\n                                result[\"$lte\"] = new Date(d2.year,d2.month-1,d2.day,d1.hour,d1.minute,sec1,999);\r\n                            } else {\r\n                                result = {err: \"format invalid\"};\r\n                            }\r\n                        }\r\n                        debugParse(result);\r\n                        return result;\r\n                    }\r\n\r\n                    function updateYear(dt) {\r\n                        var year = Number(dt.year);\r\n                        if(year<100) {\r\n                            if(year<46) {\r\n                                year = 2000 + year;\r\n                            } else {\r\n                                year = 1900 + year;\r\n                            }\r\n                            dt.year = String(year);\r\n                        }\r\n                    }\r\n\r\n                    function parseDateTimeRange(txt) {\r\n                        var pieces = txt.split(\"-\");\r\n                        switch(pieces.length) {\r\n                            case 1:\r\n                                var d1 = parseDateTime(pieces[0].trim());\r\n                                if(d1) {\r\n                                    return {start: d1};\r\n                                } else {\r\n                                    return {err:\"format invalid\"};\r\n                                }\r\n                            case 2:\r\n                                var d1 = parseDateTime(pieces[0].trim());\r\n                                var d2 = parseDateTime(pieces[1].trim());\r\n                                if(d1 && d2) {\r\n                                    return {start: d1, end: d2};\r\n                                } else {\r\n                                    return {err:\"format invalid\"};\r\n                                }\r\n                            default:\r\n                                return {err:\"format invalid\"};\r\n                        }\r\n                    }\r\n\r\n                    function parseDateTime(dt) {\r\n                        var pieces = dt.split(\" \");\r\n                        switch(pieces.length) {\r\n                            case 1:\r\n                                return parseDateOrTime(pieces[0].trim());\r\n                            case 2:\r\n                                var dt1 = parseDateOrTime(pieces[0].trim());\r\n                                var dt2 = parseDateOrTime(pieces[1].trim());\r\n                                if(!dt1 || !dt2) {\r\n                                    return null;\r\n                                } else {\r\n                                    dt1.hour = dt2.hour;\r\n                                    dt1.minute = dt2.minute;\r\n                                    dt1.second = dt2.second;\r\n                                    return dt1;\r\n                                }\r\n                            default:\r\n                                return null;\r\n                        }\r\n                    }\r\n\r\n                    function parseDateOrTime(dt) {\r\n                        if(dt.indexOf(':')!=-1) {\r\n                            return parseTime(dt);\r\n                        } else if(dt.indexOf('/')!=-1) {\r\n                            return parseDate(dt);\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function Num(txt) {\r\n                        if(txt==undefined) return undefined;\r\n                        return Number(txt);\r\n                    }\r\n\r\n                    function parseTime(t) {\r\n                        var regex = /^(\\d?\\d):(\\d\\d)(:(\\d\\d))?$/g\r\n                        var result = regex.exec(t);\r\n                        if(result) {\r\n                            return {hour: Num(result[1]) , minute: Num(result[2]), second: Num(result[4])};\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function parseDate(d) {\r\n                        var regex = /^((\\d?\\d)\\/)?(\\d?\\d)\\/(\\d{2,4})$/g\r\n                        var result = regex.exec(d);\r\n                        if(result) {\r\n                            var o = {day: Num(result[2]) , month: Num(result[3]), year: Num(result[4])};\r\n                            return o;\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n\r\n                    function debugParse(x) {\r\n                        if(x[\"$gte\"]) {\r\n                            console.log(\"GTE\", x[\"$gte\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$gt\"]) {\r\n                            console.log(\"GT \", x[\"$gt\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$lte\"]) {\r\n                            console.log(\"LTE\", x[\"$lte\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        if(x[\"$lt\"]) {\r\n                            console.log(\"LT \", x[\"$lt\"].toLocaleString(\"es-ES\"));\r\n                        }\r\n                        console.log(\"----------------------------------------\");\r\n                    }\r\n\r\n                    /** END MONGO DATE PARSING ***/\r\n\r\n                    scope.search = function () {\r\n                        var query = {};\r\n\r\n                        models.getModelSchema(modelName, function (schema) {\r\n                            angular.forEach(scope.searches, function (s) {\r\n                                var singleQuery = {};\r\n                                if (s.value) {\r\n                                    var sfield = models.getFieldFromSchema(s.field, schema);\r\n                                    if (sfield) {\r\n                                        if (sfield.type == \"string\" && !sfield.format && !sfield.ref) {\r\n                                            if (s.value !== \"\") {\r\n                                                singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                            }\r\n                                        } else if (sfield.type == \"string\" && sfield.format == \"date\") {\r\n                                            var q = parseMongoDate(s.value);\r\n\r\n                                            if (s.value !== \"\") {\r\n                                                if(q.err == undefined) {\r\n                                                    singleQuery[s.field] = q;\r\n                                                } else {\r\n                                                    alert(\"Format invalid in field \"+s.field);\r\n                                                }\r\n                                            }\r\n                                        } else if (sfield.ref && !sfield.denormalize) {\r\n                                            singleQuery[s.field] = s.value;\r\n                                            //References may be we should load before some useful information for querying references\r\n                                        } else if (sfield.ref && sfield.denormalize) {\r\n                                            singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                        } else {\r\n                                            singleQuery[s.field] = s.value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                angular.extend(query, singleQuery);\r\n                            });\r\n                        });\r\n\r\n                        search.setQuery(query);\r\n                        search.setSkip(0);\r\n                        scope.$parent.search();\r\n\r\n                    };\r\n                }\r\n            };\r\n        }])\r\n        .directive(\"searchRefInModel\", ['models', 'common', function (models, common) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-ref-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.elemsearch = scope.$eval(attrs.elemsearch);\r\n                    var ref = scope.elemsearch.ref;\r\n\r\n                    if (!element.select) {\r\n                        return;\r\n                    }\r\n\r\n                    var displayField = \"\";\r\n                    var idSelect = \"\";\r\n\r\n                    function getDocumentById(modelId) {\r\n                        return function (query, skip) {\r\n                            return models.getModel(ref, function (m) {\r\n                                var config = m.config;\r\n                                var elem = \"\";\r\n                                if (modelId instanceof Object) {\r\n                                    elem = modelId[config.id];\r\n                                } else {\r\n                                    elem = modelId;\r\n                                }\r\n                                models.getDocument(ref, elem, function (doc) {\r\n                                    displayField = config.displayField;\r\n                                    idSelect = config.id;\r\n\r\n                                    var q = {};\r\n                                    q.query = {};\r\n                                    var regex = query.search;\r\n                                    q.query.$or = [];\r\n\r\n                                    var forDisplay = {};\r\n                                    forDisplay[displayField] = {$regex: regex, $options: 'i'};\r\n                                    q.query.$or.push(forDisplay);\r\n\r\n\r\n                                    if (config.id != \"_id\" && m.schema[config.id] && m.schema[config.id].type == \"string\") {\r\n                                        var forID = {};\r\n                                        forID[idSelect] = {$regex: regex, $options: 'i'};\r\n                                        q.query.$or.push(forID);\r\n                                    }\r\n\r\n                                    q.limit = 20;\r\n                                    q.skip = skip;\r\n\r\n                                    //SHARDING\r\n                                    if (models.getShard(ref)) {\r\n                                        q[models.getShard(ref).key] = models.getShard(ref).value;\r\n                                    }\r\n\r\n                                    models.search(ref, q, function (response, count) {\r\n                                        if (skip) {\r\n                                            scope.searchRes = scope.searchRes.concat(response);\r\n                                        } else {\r\n                                            scope.searchRes = response;\r\n                                        }\r\n\r\n                                        if (doc) {\r\n                                            var present = scope.searchRes.some(function (element) {\r\n                                                return element[config.id] == doc[config.id];\r\n                                            });\r\n\r\n                                            if (!present) {\r\n                                                scope.searchRes.splice(0, 0, doc);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        };\r\n                    }\r\n\r\n                    var elements = getDocumentById(scope.$eval(attrs.ngModel));\r\n\r\n                    scope.disabled = false;\r\n                    scope.searchEnabled = true;\r\n                    scope.searchRes = [];\r\n                    scope.search = elements;\r\n\r\n                    scope.printSelectedElement = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f + \" <\" + document[idSelect] + \">\";\r\n                            } else {\r\n                                return \"No display field. ID: <\" + document[idSelect] + \">\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectDisplayField = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f;\r\n                            } else {\r\n                                return \"<empty>\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectIdField = function (document) {\r\n                        if (document !== undefined) {\r\n                            return document[idSelect] || \"No ID\";\r\n                        }\r\n                    };\r\n\r\n                    scope.$on('refreshSelect2' + ref, function () {\r\n                        console.log(\"REFRESH SELECT2\");\r\n                        elements();\r\n                    });\r\n\r\n                    element.find('ul').bind('scroll', function () {\r\n                        var raw = arguments[0].target;\r\n                        if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {\r\n                            elements(scope.$select, (raw.children[0].children.length - 2));\r\n                        }\r\n                    });\r\n\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp').directive('ellipsis', function () {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function (scope, element, attrs, ngModel) {\n                var width = element.width();\n                element.css(\"width\", width);\n                element.css(\"text-overflow\", 'ellipsis');\n                element.css(\"overflow\", 'hidden');\n                element.css(\"white-space\", 'nowrap');\n                // Do calculation\n                //var model = scope.$eval(attrs.ngModel);\n                //console.log(\"Model\", model);\n                //console.log(\"Model > Length\", model.width());\n            }\n        };\n    });\n}());\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive(\n            \"mAppLoading\",\n            ['$animate', function ($animate) {\n                // Return the directive configuration.\n                return ({\n                    link: link,\n                    restrict: \"C\"\n                });\n                // I bind the JavaScript events to the scope.\n                function link(scope, element, attributes) {\n                    // Due to the way AngularJS prevents animation during the bootstrap\n                    // of the application, we can't animate the top-level container; but,\n                    // since we added \"ngAnimateChildren\", we can animated the inner\n                    // container during this phase.\n                    // --\n                    // NOTE: Am using .eq(1) so that we don't animate the Style block.\n                    $animate.leave(element.children().eq(1)).then(\n                        function cleanupAfterAnimation() {\n                            // Remove the root directive element.\n                            element.remove();\n                            // Clear the closed-over variable references.\n                            scope = element = attributes = null;\n                        }\n                    );\n                }\n            }]\n        );\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('CreateController', ['$scope', '$http', '$location', '$routeParams', 'models', '$controller', function ($scope, $http, $location, $routeParams, models, $controller) {\r\n            var modelName = $routeParams.schema;\r\n            $scope.action = \"create\";\r\n            models.getModel(modelName, function (m) {\r\n                if (!m.config.post) {\r\n                    $location.path('/model/' + modelName);\r\n                } else {\r\n                    $scope.model = {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $scope.action = \"create\";\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                }\r\n            });\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('GraphsController', ['$scope', '$routeParams', '$sce', '$compile', 'models', function ($scope, $routeParams, $sce, $compile, models) {\r\n        $scope.schema = $routeParams.schema;\r\n\r\n        models.getModelConfig($scope.schema, function (config) {\r\n            $scope.config = config;\r\n            $scope.graphs = config.graphs;\r\n        });\r\n\r\n        $scope.getTag = function (graph) {\r\n            var tag = graph.type;\r\n            return '<injector-'+ tag +' graph=\"' + graph.title + '\"></injector-'+ tag +'>';\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('UpdateController', ['$scope', '$http', '$routeParams', '$location', 'models', '$controller', function ($scope, $http, $routeParams, $location, models, $controller) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var shard = $routeParams.shard;\r\n\r\n            models.getModel(modelName, function (m) {\r\n                models.getDocument(modelName, id, shard, function (document) {\r\n                    $scope.prune(document);\r\n                    $scope.action = \"update\";\r\n                    $scope.model = document || {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                });\r\n            });\r\n\r\n            //We made this in client because is an specific management of angular-schema-form\r\n            $scope.prune = function (document) {\r\n                for (var key in document) {\r\n                    var elem = document[key];\r\n                    if (elem && (typeof elem === 'object' || elem instanceof Array)) {\r\n                        $scope.prune(elem);\r\n                    }\r\n                    if (elem == null) {//Angular schema form does not allow null elements. Undefined is better\r\n                        document[key] = undefined;\r\n                    }\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('FormController', ['$rootScope', '$scope', '$http', '$location', '$routeParams', '$anchorScroll', '$timeout', '$modal', 'models', 'configs', 'dependsOn', 'common', '$window', 'flash', '$translate', function ($rootScope, $scope, $http, $location, $routeParams, $anchorScroll, $timeout, $modal, models, configs, dependsOn, common, $window, flash, $translate) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var modified = false;\r\n\r\n            $scope.buttonsPosition = configs.backoffice.buttonsPosition || 'bottom';\r\n\r\n            function walkThroughSchema(schema) {\r\n                var keys = Object.keys(schema);\r\n                for (var i in keys) {\r\n                    if(schema[keys[i]]) {\r\n                        if (schema[keys[i]].editOnCreate) {\r\n                            var action = $scope.action.toLowerCase();\r\n                            schema[keys[i]].readonly = !(action === \"create\");\r\n                        }\r\n\r\n                        if (schema[keys[i]].i18nTitle) {\r\n                            schema[keys[i]].title = $translate.instant(schema[keys[i]].i18nTitle);\r\n                        }\r\n\r\n                        var type = schema[keys[i]].type;\r\n                        if ((type === 'array' || type === 'object') && schema[keys[i]].properties) {\r\n                            walkThroughSchema(schema[keys[i]].properties);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            $scope.m = angular.copy($scope.m_copy);\r\n            walkThroughSchema($scope.m.schema);\r\n\r\n            $scope.schema = {\r\n                \"type\": \"object\",\r\n                \"title\": modelName,\r\n                \"action\": $scope.action,\r\n                \"properties\": $scope.m.schema\r\n            };\r\n\r\n            $scope.form = common.processForm($scope.m.config.form);\r\n\r\n            if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n            }\r\n\r\n            $rootScope.$on('shardChangeEvent', function () {\r\n                if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                    $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n                }\r\n            });\r\n\r\n\r\n            dependsOn.apply($scope, modelName, $scope.model);\r\n\r\n            $timeout(function () {\r\n                $scope.$watch('model', function (newVal, oldVal) {\r\n                    if (!angular.equals(newVal, oldVal)) {\r\n                        modified = true;\r\n                    }\r\n                }, true);\r\n            }, 0);\r\n\r\n            $scope.schemaHREF = function () {\r\n                $location.path(\"/model/\" + modelName);\r\n                $location.hash('');\r\n            };\r\n\r\n            $scope.submitForm = function (form, model, isApply) {\r\n                $scope.$broadcast('schemaFormValidate');\r\n                if (form.$valid) {\r\n                    if ($scope.action.toLowerCase() == 'update' && $scope.m.config.put) {\r\n                        models.putDocument(modelName, id, model, function (response) {\r\n                            if (response.status == '200') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                $scope.$broadcast('puttedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    } else if ($scope.action.toLowerCase() == 'create' && $scope.m.config.post) {\r\n                        models.postDocument(modelName, model, function (response) {\r\n                            if (response.status == '201') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                } else {\r\n                                    $location.path('/model/' + modelName + '/update/' + response.data[Object.keys(response.data)[0]]);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    $scope.validation = !form.$valid;\r\n                    $scope.validationErrors = form.$error;\r\n                    $location.hash('error');\r\n                    $anchorScroll.yOffset = 100;\r\n                    $anchorScroll();\r\n\r\n                }\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $window.history.back();\r\n            };\r\n\r\n            $scope.$on('$locationChangeStart', function (event, next, current) {\r\n                if ($scope.ngForm.$valid && modified) {\r\n                    event.preventDefault();\r\n\r\n                    var modalInstance = $modal.open({\r\n                        templateUrl: 'changedDocument.html',\r\n                        controller: 'ModalChangedCtrl',\r\n                        size: 'sm',\r\n                        resolve: {\r\n                            items: function () {\r\n                                return $scope.items;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function () { //CLOSE CALLBACK\r\n                        $scope.submitForm($scope.ngForm, $scope.model);\r\n                    }, function () { //DISMISS CALLBACK\r\n                        modified = false;\r\n                        var basePathLength = $location.absUrl().length - $location.url().length;\r\n                        $location.path(next.substring(basePathLength));\r\n                    });\r\n\r\n                }\r\n            });\r\n\r\n\r\n            $scope.$on('bkButton', function (event, form) {\r\n                if (form.action == 'api') {\r\n                    var http;\r\n                    var url = form.url;\r\n\r\n                    var getUrl = function (path) {\r\n                        return path.replace(/[^/]*:([^/]*)+/g, function (s, m) {\r\n                            return safeAccess($scope.model, m);\r\n                        });\r\n                    };\r\n\r\n                    url = getUrl(url);\r\n\r\n                    switch (form.method.toUpperCase()) {\r\n                        case 'GET':\r\n                            http = $http.get(url);\r\n                            break;\r\n                        case 'PUT':\r\n                            http = $http.put(url, $scope.model);\r\n                            break;\r\n                        case 'POST':\r\n                            var body = {};\r\n                            if (form.body) {\r\n                                angular.extend(body, form.body);\r\n                            } else {\r\n                                body = $scope.model;\r\n                            }\r\n                            http = $http.post(url, body);\r\n                            break;\r\n                        case 'DELETE':\r\n                            http = $http.delete(url);\r\n                            break;\r\n                        default :\r\n                            throw new Error('Method not configured properly');\r\n                    }\r\n                    if (http) {\r\n                        http.success(function (res) {\r\n                            angular.forEach(Object.keys(res), function (key) {\r\n                                $scope.model[key] = res[key];\r\n                            });\r\n                        }).error(function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                } else if (form.action == 'function') {\r\n                    window[form.func]($scope.model, $scope.m.schema);\r\n                }\r\n            });\r\n\r\n            $rootScope.$on('$translateChangeSuccess', function () {\r\n                walkThroughSchema($scope.schema.properties);\r\n                $scope.$broadcast('schemaFormRedraw');\r\n            });\r\n        }])\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalChangedCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .controller('LoginController', ['$http', '$scope', '$document', '$location', 'loginProvider', function ($http, $scope, $document, $location, loginProvider) {\r\n        $scope.update = function (user) {\r\n            loginProvider.login(user, function (res) {\r\n                if (!res) {\r\n                    $scope.loginError = 'incorrect login';\r\n                } else{\r\n                    $location.path('/');\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .filter('encodeURIComponent', function() {\r\n            return window.encodeURIComponent;\r\n        })\r\n\r\n        .controller('MainController', ['$rootScope', '$scope', '$q', 'loginProvider', 'models', 'common', function ($rootScope, $scope, $q, loginProvider, models, common) {\r\n            $scope.postLoginFuncs = [];\r\n            $scope.postLoginFuncs.push(function(){\r\n                models.getModels(function (m) {\r\n                    $scope.schemas = {};\r\n                    angular.forEach(m, function (schema) {\r\n                        models.getModelConfig(schema, function (config) {\r\n                            $scope.schemas[schema] = config;\r\n\r\n                            loginProvider.getUser(function(){}); //Force first login\r\n                            if (config.isSingle) {\r\n                                models.getSingleModel(schema, function (doc) {\r\n                                    if (!doc) {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/new\";\r\n                                    } else {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/update/\" + doc[config.id];\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n\r\n\r\n            $scope.pretty = function pretty(str) {\r\n                return common.prettifyTitle(str);\r\n            };\r\n\r\n            $scope.schemaHREF = function (name, conf) {\r\n                return conf.redirectTo || \"#/model/\" + name;\r\n            };\r\n\r\n            angular.element('body').ready(function () {\r\n                $rootScope.$broadcast('bodyReady', 'MainController');\r\n            });\r\n\r\n            $rootScope.$on('login', function (event, args) {\r\n                angular.forEach($scope.postLoginFuncs, function(v){\r\n                    v();\r\n                });\r\n                $scope.postLoginFuncs = [];\r\n            });\r\n\r\n            $rootScope.$on('logout', function (event, args) {\r\n            });\r\n    }]);\r\n}());\r\n\r\n\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .controller('ModelController', ['$scope', '$http', '$route', '$routeParams', '$modal', '$location', 'common', 'models', 'flash', 'configs', 'search', function ($scope, $http, $route, $routeParams, $modal, $location, common, models, flash, configs, search) {\r\n            var defaultItemsPerPage = 20;\r\n            $scope.flash = flash;\r\n            $scope.common = common;\r\n            $scope.removeDisabled = 'disabled';\r\n\r\n            $scope.maxSize = 10;\r\n            $scope.schema = $routeParams.schema;\r\n            $scope.create = false;\r\n            $scope.checkedGroupIds = {};\r\n            search.clearQuery();\r\n\r\n            $scope.$watch(\"removeAll\", function (value) {\r\n                if (value !== undefined) {\r\n                    for (var i in $scope.elements) {\r\n                        $scope.elements[i].checked = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            models.getModel($scope.schema, function (model) {\r\n                $scope.config = model.config;\r\n                $scope.schemaForm = model.schema;\r\n\r\n                if (model.config.isSingle) { //In single documents, this page / controller should not appear anymore !\r\n                    $location.path('/');   //Redirect to home\r\n                    return;\r\n                }\r\n\r\n                //Build the array with all the displayable elements\r\n                $scope.config.allDisplayFields = [];\r\n                $scope.config.allDisplayFields.push($scope.config.displayField);\r\n                if ($scope.config.extraDisplayFields) {\r\n                    $scope.config.allDisplayFields = $scope.config.allDisplayFields.concat($scope.config.extraDisplayFields);\r\n                }\r\n\r\n                $scope.search = function (skip) {\r\n                    if (skip !== undefined) {\r\n                        search.setSkip(skip);\r\n                    }\r\n\r\n                    search.search($scope.schema, function (elements, count, err) {\r\n                        if (elements) {\r\n                            $scope.elements = elements;\r\n                        }\r\n                        $scope.totalElements = count;\r\n                    });\r\n                };\r\n\r\n                $scope.itemsPerPage = $scope.userItemsPerPage = configs.backoffice.itemsPerPage || defaultItemsPerPage;\r\n                search.setLimit($scope.itemsPerPage);\r\n                search.setSkip(0);\r\n\r\n                if(model.config.defaultSearch) {\r\n                    search.setSortBy(model.config.defaultSearch);\r\n                }\r\n\r\n                //Init elements\r\n                $scope.search();\r\n\r\n                // Init function of pageChanged\r\n                $scope.pageChanged = function () {\r\n                    $scope.itemsPerPage = $scope.userItemsPerPage;\r\n                    if ($scope.currentPage > 0 && $scope.itemsPerPage > 0) {\r\n                        var skip = (($scope.currentPage - 1) * $scope.itemsPerPage);\r\n                        search.setSkip(skip);\r\n                    } else {\r\n                        search.setSkip(0);\r\n                    }\r\n                    search.setLimit($scope.itemsPerPage);\r\n                    $scope.search();\r\n                };\r\n\r\n                $scope.id = function (element) {\r\n                    return element[$scope.config.id];\r\n                };\r\n\r\n                $scope.shard = function (element) {\r\n                    return element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.hasShard = function (element) {\r\n                    var hasShard = $scope.config.shard && $scope.config.shard.shardKey;\r\n                    return hasShard && element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.getUrl = function (element, schema) {\r\n                    var model;\r\n                    if(element.__t) {\r\n                        model = element.__t;\r\n                    } else {\r\n                        model = schema;\r\n                    }\r\n                    var url = \"#/model/\" + model + \"/update/\" + encodeURIComponent($scope.id(element));\r\n                    if ($scope.hasShard(element)) {\r\n                        url += \"/\" + encodeURIComponent($scope.shard(element));\r\n                    }\r\n                    return url;\r\n                };\r\n\r\n                $scope.isDisabled = function (element) {\r\n                    return !(element[$scope.config.id] && element[$scope.config.id] !== \"\");\r\n                };\r\n\r\n                $scope.displayCustomField = function (field, element, schema) {\r\n                    var s = common.getField(field, element);\r\n                    var sch = models.getFieldFromSchema(field, schema);\r\n                    if(sch && sch.format === 'date') {\r\n                        if(s && s !=='') {\r\n                            s = new Date(Date.parse(s)).toLocaleString();\r\n                        }\r\n                    }\r\n                    return (s === undefined || s === \"\") ? \"<empty>\" : s;\r\n                };\r\n\r\n                $scope.sortBy = function (property, asc) {\r\n                    search.addSortBy(property, asc);\r\n                    $scope.search(0);\r\n                };\r\n\r\n                $scope.getSort = function (property) {\r\n                    return search.getSort(property);\r\n                };\r\n\r\n                $scope.$on('shardChangeEvent', function (event, data) {\r\n                    $scope.search(0);\r\n                });\r\n            });\r\n\r\n            $scope.promptAlert = function (cb) {\r\n                var del;\r\n                if (del) {\r\n                    cb(del);\r\n                }\r\n                var modalInstance = $modal.open({\r\n                    templateUrl: 'myModalContent.html',\r\n                    controller: 'ModalInstanceCtrl',\r\n                    size: 'sm',\r\n                    resolve: {\r\n                        items: function () {\r\n                            return $scope.items;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                modalInstance.result.then(function () {\r\n                    del = true;\r\n                    cb(true);\r\n                });\r\n            };\r\n        }])\r\n\r\n        .filter('to_trusted', ['$sce', function ($sce) {\r\n            return function (text) {\r\n                if (text) {\r\n                    return $sce.trustAsHtml(text.toString());\r\n                } else {\r\n                    return text;\r\n                }\r\n            };\r\n        }])\r\n\r\n        // Please note that $modalInstance represents a modal window (instance) dependency.\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }])\r\n\r\n        .controller('ImportModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('NavbarController', ['$scope', '$location', 'loginProvider', function ($scope, $location, loginProvider) {\r\n            var navbar = function () {\r\n                loginProvider.getUser(function (user) {\r\n                    $scope.user = user;\r\n                });\r\n            };\r\n            navbar();\r\n            $scope.$on('login', function (event, data) {\r\n                navbar();\r\n            });\r\n\r\n            $scope.logout = function () {\r\n                loginProvider.logout();\r\n                $location.path('/logout');\r\n            };\r\n        }]);\r\n}());\n(function() {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .controller('ShardingController', ['$scope', '$routeParams', '$rootScope', 'models', 'configs', function($scope, $routeParams, $rootScope, models, configs) {\r\n            var modelName;\r\n            $scope.$on('$routeChangeSuccess', function(event, current) {\r\n                modelName = current.params.schema;\r\n\r\n                // Gets configuration from custom page \"modelName\" parameter\r\n                if(modelName == undefined) {\r\n                    modelName = current.$$route.modelName;\r\n                }\r\n\r\n                if(modelName) {\r\n                    models.getModel(modelName, function(m) {\r\n                        if(m.config.shard) {\r\n                            $scope.shardKey = m.config.shard.shardKey;\r\n                            $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n                            $scope.shardValues = m.config.shard.shardValues;\r\n\r\n                            if(models.getShard(modelName)) {\r\n                                $scope.shardKeyText = 'Using ' + models.getShard(modelName).key + ' ' + models.getShard(\r\n                                        modelName).value;\r\n                            } else {\r\n                                if(m.config.shard.filtered) {\r\n                                    $scope.locked = true;\r\n                                    $scope.setShard($scope.shardValues[0]);\r\n                                } else {\r\n                                    $scope.locked = false;\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            $scope.shardKey = undefined;\r\n                            $scope.shardKeyText = undefined;\r\n                            $scope.shardValues = undefined;\r\n                        }\r\n                    });\r\n                } else {\r\n                    $scope.shardKey = undefined;\r\n                    $scope.shardKeyText = undefined;\r\n                    $scope.shardValues = undefined;\r\n                }\r\n            });\r\n\r\n            $scope.setShard = function(value) {\r\n                $scope.shardKeyText = 'Using ' + $scope.shardKey + ' ' + value;\r\n                models.setShard($scope.shardKey, value, modelName);\r\n\r\n                $rootScope.$broadcast('shardChangeEvent');\r\n            };\r\n\r\n            $scope.removeShard = function() {\r\n                $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n                //models.setShard($scope.shardKey, '', modelName);\r\n                models.removeShard(modelName);\r\n                $rootScope.$broadcast('shardChangeEvent');\r\n            };\r\n            $scope.shardKey = undefined;\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .controller('TranslateController', ['$scope', '$translate', 'configs', function ($scope, $translate, configs) {\n            //$scope.languages = $translate.getAvailableLanguageKeys();\n            $scope.languages = ['en', 'es'];\n            if (configs.backoffice.uniqueLanguage) {\n                $scope.showLanguages = false;\n                $translate.use(configs.backoffice.uniqueLanguage);\n            } else {\n                $scope.showLanguages = true;\n                $scope.use = function (lang) {\n                    $translate.use(lang);\n                };\n            }\n        }]);\n}());"]}