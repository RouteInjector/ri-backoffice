{"version":3,"sources":["ri-backoffice.js"],"names":["angular","makeArray","arr","isArray","provideRootElement","modules","element","unshift","$provide","value","createInjector","injectorModules","concat","injector","bootstrapApplication","angularApp","document","ready","bootstrap","lazy","app","$q","get","promises","errorCallback","noop","loadingCallback","doneCallback","resolve","promise","when","instantiate","push","this","all","then","finally","loading","callback","done","error","createCSSNodes","obj","div","createElement","i","link","href","rel","appendChild","getScripts","scripts","length","progress","internalCallback","$","ajaxSetup","async","forEach","script","getScript","module","$rootScopeProvider","digestTtl","run","$rootScope","configs","$http","resp","constant","data","deferred","defer","extensions","assets","cache","asset","src","attributes","nodeValue","type","files","j","pages","p","backoffice","getMultiScripts","path","_arr","map","scr","Deferred","apply","config","$routeProvider","customMenuProvider","authCheck","$location","loginProvider","auth","getUser","user","defaults","headers","common","Authorization","token","login","undefined","allowedUser","$inject","homePage","home","templateUrl","controller","reloadOnSearch","logout","menu","page","url","template","setCustomMenu","otherwise","redirectTo","$translateProvider","$translatePartialLoaderProvider","i18n","addPart","useLoader","urlTemplate","registerAvailableLanguageKeys","def","fallbackLanguage","useLocalStorage","uniqueLanguage","use","preferredLanguage","provider","menuElements","$get","cookieStore","factory","profile","userModel","cb","post","success","res","role","cookieOptions","end","Infinity","put","JSON","stringify","$broadcast","err","remove","parse","password","logged","extend","overrides","service","override","_method","_function","getService","Upload","modelsConfig","singlesCache","shards","prefix","$on","invalidate","console","log","getHttp","getUpload","setShard","key","model","shard","getShard","removeShard","getModels","schemas","models","getModel","modelName","schema","ajax","responseText","getModelElements","skip","limit","plural","body","elements","result","status","count","getModelSchema","getModelConfig","postDocument","response","getUrl","Error","getDocument","id","qParams","params","cfg","shardKey","putDocument","removeDocument","opts","delete","removeDocumentByMongoId","uploadImage","fieldName","index","image","upload","file","fileFormDataName","evt","parseInt","loaded","total","uploadFile","deleteImage","deleteFile","getImageUrl","imageName","getRandomQuery","getFileUrl","fileName","getSingleModel","search","query","documents","search_count","export","format","searchQuery","by","postAsForm","import","method","form","setAttribute","replace","hasOwnProperty","hiddenField","submit","getGraph","graphID","encodeURI","getFieldFromSchema","field","retElem","split","properties","ref","denormalize","indexOf","refSchema","copy","title","lastIndexOf","prettifyTitle","substring","Object","keys","TIMEOUT_MS","timers","selectCacheService","httpCall","q","gets","$or","singleQ","doc","idKey","getObj","cbks","event","next","current","m","clearTimeout","b","posts","cached","cbk","setTimeout","$routeParams","flash","$injector","version","ngDialog","getOpenDialogs","open","className","responseError","rejection","handleError","ignoreError","redirectError","warning","errors","e","message","splice","Math","floor","errorInReferencedProperty","modelId","reject","$httpProvider","interceptors","find","innerDependsOn","each","k","v","depArr","func","indexArray","pop","join","scope","updateFunc","modelConfig","dependsValue","arrayIndex","newVal","oldVal","param","safeAccess","replaced","setField","test","root","targetField","$watchCollection","nV","oV","Array","normPath","$watch","hasAngularVariable","deAngularizeUrl","ng","matched","f","getField","getAngularVariables","exec","separator","str","toUpperCase","splitted","returnArray","parentArr","ret","rootElem","match","tmp","elem","newPath","arrInd","getAllSchemaFields","searchFields","parent","fields","processForm","submitButtons","innerForm","tabs","items","randomNumber","Date","getTime","setQuery","clearQuery","getQuery","setSortBy","sort","sortBy","addSortBy","asc","getSort","setSkip","setLimit","searchAndGroup","directive","restrict","$scope","customMenu","$window","actualSchema","isDisabled","isOpen","render","sections","Sections","add","section","isSingle","clickTo","openSection","actualSection","click","name","conf","parentSchema","location","isInstanceOf","Section","debug","a","levels","curLevel","scrollTo","$elm","attr","on","animate","scrollTop","offset","top","$compile","attrs","$eval","compile","html","contents","ngModel","graph","selected","punchCardData","graphs","g","groupMode","selectEnabled","barsData","values","$route","exportElements","checked","filter","x","_id","performAction","action","req","Content-Type","enableDelete","checkedValues","val","removeSelected","promptAlert","del","deletions","reload","searches","buildPath","sc","updateSearch","elemSearch","noSearch","availableFields","fieldFromSchema","placeholder","addSearch","s","clear","allFields","displayField","singleQuery","sfield","$regex","$options","$parent","getDocumentById","idSelect","regex","forDisplay","forID","searchRes","present","some","elemsearch","select","disabled","searchEnabled","printSelectedElement","selectDisplayField","selectIdField","bind","raw","arguments","target","offsetHeight","scrollHeight","$select","children","width","css","$animate","leave","eq","$controller","m_copy","$sce","getTag","tag","prune","$anchorScroll","$timeout","$modal","dependsOn","$translate","walkThroughSchema","editOnCreate","toLowerCase","readonly","i18nTitle","instant","modified","buttonsPosition","equals","schemaHREF","hash","submitForm","isApply","$valid","validation","validationErrors","$error","yOffset","cancel","history","back","ngForm","preventDefault","modalInstance","size","basePathLength","absUrl","http","window","$modalInstance","ok","close","dismiss","$document","update","loginError","encodeURIComponent","postLoginFuncs","args","defaultItemsPerPage","removeDisabled","maxSize","create","checkedGroupIds","schemaForm","allDisplayFields","extraDisplayFields","totalElements","itemsPerPage","userItemsPerPage","pageChanged","currentPage","hasShard","__t","displayCustomField","property","text","trustAsHtml","toString","navbar","shardKeyText","shardValues","filtered","locked","languages","showLanguages","lang"],"mappings":";;CAAA,SAAWA,GAEP,YAIA,SAASC,GAAUC,GACf,MAAIA,GAGGF,EAAQG,QAAQD,GAAOA,GAAOA,MAKzC,QAASE,GAAmBC,EAASC,GACjCA,EAAUN,EAAQM,QAAQA,GAC1BD,EAAQE,SAAS,WACb,SAAUC,GACNA,EAASC,MAAM,eAAgBH,MAI3C,QAASI,GAAeC,EAAiBL,GACrC,GAAID,IAAW,MAAMO,OAAOX,EAAUU,GAItC,OAHIL,IACAF,EAAmBC,EAASC,GAEzBN,EAAQa,SAASR,GAG5B,QAASS,GAAqBC,GAC1Bf,EAAQM,QAAQU,UAAUC,MAAM,WAC5BjB,EAAQkB,UAAUF,UAAWD,MAIrCf,EAAQmB,KAAO,SAAUC,EAAKf,GAE1B,GAAIQ,GAAWH,EAAeL,GAC1BgB,EAAKR,EAASS,IAAI,MAClBC,KACAC,EAAgBxB,EAAQyB,KACxBC,EAAkB1B,EAAQyB,KAC1BE,EAAe3B,EAAQyB,IAE3B,QAEIG,QAAS,SAAUC,GAGf,MAFAA,GAAUR,EAAGS,KAAKjB,EAASkB,YAAYF,IACvCN,EAASS,KAAKH,GACPI,MAGXf,UAAW,WAIP,MAFAQ,KAEOL,EAAGa,IAAIX,GACTY,KAAK,WACFrB,EAAqBM,IACtBI,GACFY,QAAQT,IAGjBU,QAAS,SAASC,GAEd,MADAZ,GAAkBY,EACXL,MAGXM,KAAM,SAASD,GAEX,MADAX,GAAeW,EACRL,MAGXO,MAAO,SAASF,GAEZ,MADAd,GAAgBc,EACTL,SAMpBjC,SACH,WACI,YAyEA,SAASyC,GAAeC,GACpB,GAAIC,GAAM3B,SAAS4B,cAAc,MACjC,KAAK,GAAIC,KAAKH,GAAK,CACf,GAAII,GAAO9B,SAAS4B,cAAc,OAClCE,GAAKC,KAAOL,EAAIG,GAChBC,EAAKE,IAAM,aACXL,EAAIM,YAAYH,GAEpB,MAAOH,GAGX,QAASO,GAAWC,EAASb,GACzB,IAAIa,IAAaA,EAAQC,OACrB,MAAOd,IAEX,IAAIe,GAAW,EACXC,EAAmB,aACbD,GAAYF,EAAQC,SACtBG,EAAEC,WAAWC,OAAM,IACnBnB,KAIRiB,GAAEC,WAAWC,OAAM,IACnBN,EAAQO,QAAQ,SAAUC,GACtBJ,EAAEK,UAAUD,EAAQL,KAjG5B,GAAIlC,GAAMpB,QAAQ6D,OAAO,eAAgB,UAAW,YAAa,aAAc,aAAc,YACrF,SAAU,gBAAiB,eAAgB,eAAgB,wBAC3D,YAAa,YAAa,sBAAuB,QAAS,WAAY,sBACtE,yBAA0B,cAC7B,qBAAsB,SAAUC,GAC7BA,EAAmBC,UAAU,OAEhCC,KAAK,aAAc,UAAW,SAAUC,EAAYC,GACjDD,EAAWC,QAAUA,IAG7BlE,SAAQmB,KAAK,eACRS,SAAS,QAAS,SAAUuC,GACzB,MAAOA,GAAM7C,IAAI,YACZa,KAAK,SAAUiC,GACZhD,EAAIiD,SAAS,UAAWD,EAAKE,WAGxC1C,SAAS,QAAS,KAAM,SAAUuC,EAAO9C,GAEtC,GAAIkD,GAAWlD,EAAGmD,OAgDlB,OA/CAL,GAAM7C,IAAI,qBAAqBa,KAAK,SAAUiC,GAC1ChD,EAAIiD,SAAS,aAAcD,EAAKE,KAMhC,KAAK,GAJDG,GAAaL,EAAKE,KAClBI,EAASnB,EAAE,gBACXJ,KAEKN,EAAI,EAAGA,EAAI6B,EAAOtB,OAAQP,IAAK,CACpC,GAAI8B,MAEAC,EAAQF,EAAO7B,GACfgC,EAAMD,EAAME,WAAWD,IAAIE,UAC3BC,EAAOJ,EAAME,WAAWE,KAAKD,SAEjC,IAAY,UAARF,EACIJ,EAAWQ,MAAMD,IAASP,EAAWQ,MAAMD,GAAM5B,SACjDuB,EAAQA,EAAM/D,OAAO6D,EAAWQ,MAAMD,SAEvC,IAAY,UAARH,EACP,IAAK,GAAIK,KAAKT,GAAWU,MAAO,CAC5B,GAAIC,GAAIX,EAAWU,MAAMD,EACrBE,GAAEC,YACED,EAAEJ,IAASI,EAAEJ,GAAM5B,SACnBuB,EAAQA,EAAM/D,OAAOwE,EAAEJ,KAM1B,QAATA,EACAJ,EAAM3B,YAAYR,EAAekC,IACjB,OAATK,GACHL,GAASA,EAAMvB,SACfD,EAAUA,EAAQvC,OAAO+D,IAQrCzB,EAAWC,EAAS,WAChBoB,EAAS3C,cAKV2C,EAAS1C,WAEnBX,YAgCLqC,EAAE+B,gBAAkB,SAAUpF,EAAKqF,GAC/B,GAAIC,GAAOjC,EAAEkC,IAAIvF,EAAK,SAAUwF,GAC5B,MAAOnC,GAAEK,WAAW2B,GAAQ,IAAMG,IAOtC,OAJAF,GAAKxD,KAAKuB,EAAEoC,SAAS,SAAUpB,GAC3BhB,EAAEgB,EAAS3C,YAGR2B,EAAEzB,KAAK8D,MAAMrC,EAAGiC,OAI9B,WACG,YAEAxF,SAAQ6D,OAAO,eACVgC,QAAQ,iBAAkB,UAAW,aAAc,qBAAsB,SAAUC,EAAgB5B,EAASO,EAAYsB,GAErH,GAAIC,GAAY,SAAU3E,EAAI4C,EAAYgC,EAAW9B,EAAO+B,EAAehC,GACvE,GAAIM,GAAQnD,EAAGmD,OAgBf,OAfIN,GAAQiC,KACRD,EAAcE,QAAQ,SAAUC,GACvBA,GAGDlC,EAAMmC,SAASC,QAAQC,OAAOC,cAAgB,UAAYJ,EAAKK,MAC/DzC,EAAW0C,MAAQC,QAHnBX,EAAUV,KAAK,UAKnBf,EAAM5C,aAIVqC,EAAW4C,aAAc,EACzBrC,EAAM5C,WAEH4C,EAAM3C,QAEjBmE,GAAUc,SAAW,KAAM,aAAc,YAAa,QAAS,gBAAiB,UAEhF,IAAIC,GAAW,kBAsFf,IArFI7C,EAAQmB,WAAW2B,OACnBD,EAAW7C,EAAQmB,WAAW2B,MAGlClB,EACKhE,KAAK,KACFmF,YAAaF,EACbG,WAAY,iBACZtF,SACIR,IAAK4E,KAGZlE,KAAK,kBACFmF,YAAa,kBACbC,WAAY,kBACZtF,SACIR,IAAK4E,KAGZlE,KAAK,sBACFmF,YAAa,8BACbC,WAAY,mBACZtF,SACIR,IAAK4E,GAETmB,gBAAgB,IAEnBrF,KAAK,6BACFmF,YAAa,8BACbC,WAAY,mBACZtF,SACIR,IAAK4E,GAETmB,gBAAgB,IAEnBrF,KAAK,oCACFmF,YAAa,8BACbC,WAAY,mBACZtF,SACIR,IAAK4E,GAETmB,gBAAgB,IAEnBrF,KAAK,yBACFmF,YAAa,mBACbC,WAAY,mBACZtF,SACIR,IAAK4E,KAGZlE,KAAK,UAEFmF,YAAa,kBACbC,WAAY,kBACZtF,SACIR,KAAM,KAAM,aAAc,YAAa,gBAAiB,SAAUC,EAAI4C,EAAYgC,EAAWC,GACzF,GAAI1B,GAAQnD,EAAGmD,OASf,OARA0B,GAAcE,QAAQ,SAAUC,GACxBA,EACAJ,EAAUV,KAAK,KAEftB,EAAW0C,OAAQ,EAEvBnC,EAAM5C,YAEH4C,EAAM3C,aAIxBC,KAAK,WACFF,SACIR,KAAM,KAAM,aAAc,YAAa,gBAAiB,SAAUC,EAAI4C,EAAYgC,EAAWC,GACzF,GAAI1B,GAAQnD,EAAGmD,OAIf,OAHA0B,GAAckB,SACdnB,EAAUV,KAAK,KACff,EAAM5C,UACC4C,EAAM3C,aAGtBC,KAAK,aACJmF,YAAa,qBACbC,WAAY,uBAIhBzC,GAAcA,EAAWU,MAAO,CAChC,GAAIkC,KACJ,KAAK,GAAIxE,KAAK4B,GAAWU,MAAO,CAC5B,GAAImC,GAAO7C,EAAWU,MAAMtC,EAExByE,GAAKjC,YACLS,EAAehE,KAAK,IAAMwF,EAAKC,KAC3BN,YAAaK,EAAKE,SAClBN,WAAYI,EAAKJ,WACjBtF,SACIR,IAAK4E,KAKbsB,EAAKD,MACLA,EAAKrF,KAAKsF,EAAKD,MAGvBtB,EAAmB0B,cAAcJ,GAGrCvB,EAAe4B,WAAWC,WAAY,YAIjD,WACG,YAEA3H,SAAQ6D,OAAO,eACVgC,QAAQ,qBAAsB,kCAAmC,UAAW,SAAU+B,EAAoBC,EAAiC3D,GACxI,GAAI4D,GAAO5D,EAAQmB,WAAWyC,IAU9B,IATAD,EAAgCE,QAAQ,SACxCF,EAAgCE,QAAQ,SACxCF,EAAgCE,QAAQ,UACxCF,EAAgCE,QAAQ,UACxCF,EAAgCE,QAAQ,UACxCF,EAAgCE,QAAQ,iBAExCF,EAAgCE,QAAQ,kBAEpCD,GAAQA,EAAK1E,OACb,IAAK,GAAIP,GAAI,EAAGA,EAAIiF,EAAK1E,OAAQP,IAC7BgF,EAAgCE,QAAQD,EAAKjF,GAIrD+E,GAAmBI,UAAU,2BACzBC,YAAa,4BAEjBL,EAAmBM,+BAA+B,KAAM,MACxD,IAAIC,GAAM,IACVP,GAAmBQ,iBAAiB,MACpCR,EAAmBS,kBACfnE,EAAQmB,WAAWiD,iBACnBH,EAAMjE,EAAQmB,WAAWiD,eACzBV,EAAmBW,IAAIJ,IAE3BP,EAAmBY,kBAAkBL,SAIhD,WACG,YACAnI,SAAQ6D,OAAO,eACV4E,SAAS,aAAc,WACxB,GAAIC,EAEJzG,MAAKwF,cAAgB,SAAShH,GAC1BiI,EAAejI,GAGnBwB,KAAK0G,KAAO,WACR,MAAOD,SAIlB,WACG,YACA1I,SAAQ6D,OAAO,eACV4E,SAAS,gBAAiB,WAEvBxG,KAAK0G,MAAQ,QAAS,YAAa,cAAe,aAAc,SAAUxE,EAAO8B,EAAW2C,EAAa3E,GACrG,GAAI4E,KAsDJ,OArDA1E,GAAMmC,SAASC,QAAQC,OAAO,eAAiB,aAC/CrC,EAAMmC,SAASC,QAAQC,OAAOsC,QAAU,OACxCD,EAAQlC,MAAQ,SAAUoC,EAAWC,GACjC7E,EAAM8E,KAAK,cAAeF,GAAWG,QAAQ,SAAUC,GACnD,GAAI9C,KAEJA,GAAKM,MAAQoC,EAAUpC,MACvBN,EAAK+C,KAAOD,EAAIC,KAChB/C,EAAKK,MAAQyC,EAAIzC,KACjB,IAAI2C,IAAiB9D,KAAM,IAAK+D,IAAKC,EAAAA,EACrCX,GAAYY,IAAI,OAAQC,KAAKC,UAAUrD,GAAOgD,GAC9ClF,EAAMmC,SAASC,QAAQC,OAAOC,cAAgB,UAAY0C,EAAIzC,MAC9DzC,EAAW0F,WAAW,QAAStD,GAC/BpC,EAAW4C,aAAc,EACzBmC,EAAG3C,KACJ7D,MAAM,SAAUoH,GACf,GAAIP,IAAiB9D,KAAM,IAC3BqD,GAAYiB,OAAO,OAAQR,GAC3BpF,EAAW0F,WAAW,SAAU/C,QAChC3C,EAAW4C,aAAc,EACzBmC,GAAG,MAIXH,EAAQzC,QAAU,SAAU4C,GACxB,GAAI3C,GAAOoD,KAAKK,MAAMlB,EAAYtH,IAAI,QAClC+E,KAASpC,EAAW4C,aAAeR,EAAKM,QAAUN,EAAK0D,UAAY1D,EAAKK,OACxEmC,EAAQlC,MAAMN,EAAM,SAAU2D,GACtBA,GACAhK,QAAQiK,OAAO5D,EAAM2D,GACrBhB,EAAGgB,IAEHhB,EAAGpC,WAINP,IACDpC,EAAW4C,aAAc,GAK7BmC,EAAG3C,KAIXwC,EAAQzB,OAAS,WACb,GAAIiC,IAAiB9D,KAAM,IAC3BqD,GAAYiB,OAAO,OAAQR,GAC3BpD,EAAUV,KAAK,UACftB,EAAW0F,WAAW,SAAU/C,SAG7BiC,SAKtB,WACG,YAEA7I,SAAQ6D,OAAO,eACV4E,SAAS,SAAU,WACZ,GAAIyB,MACAC,IAEJlI,MAAKmI,SAAW,SAAUC,EAASC,GAC/BJ,EAAUG,GAAWC,GAGzBrI,KAAKsI,WAAa,WACd,MAAOJ,IAIXlI,KAAK0G,MAAQ,aAAc,QAAS,SAAU,UAAW,SAAU,SAAU1E,EAAYE,EAAOqG,EAAQtG,EAASsC,GAE7G,GAAIiE,MACAC,KACAC,KACAC,EAAS,EA2cb,OAzcA3G,GAAW4G,IAAI,SAAU,WACrBV,EAAQW,eAGZ7G,EAAW4G,IAAI,aAAc,WACzBE,QAAQC,IAAI,8BACZb,EAAQW,eAGZX,EAAQW,WAAa,WACjBH,KACAD,KACAD,MAGJN,EAAQc,QAAU,WACd,MAAO9G,IAGXgG,EAAQe,UAAY,WAChB,MAAOV,IAGXL,EAAQgB,SAAW,SAAUC,EAAK3K,EAAO4K,GACrC,GAAIC,KACJA,GAAMF,IAAMA,EACZE,EAAM7K,MAAQA,EACd6K,EAAMD,MAAQA,EACdV,EAAOU,GAASC,GAGpBnB,EAAQoB,SAAW,SAAUF,GACzB,MAAOV,GAAOU,IAGlBlB,EAAQqB,YAAc,SAAUH,SACrBV,GAAOU,IAGlBlB,EAAQsB,UAAY,SAAUzC,GAC1B4B,EAAS1G,EAAQ9C,IAAIwJ,OAGrBzG,EAAM7C,IAAI,YAAYa,KAAK,SAAUuJ,GACjC,GAAIC,GAASD,EAAQpH,IACrB0E,GAAG2C,MAIXxB,EAAQyB,SAAW,SAAUC,EAAW7C,GACpC,IAAKyB,EAAaoB,IAAc7C,EAC5B7E,EAAM7C,IAAI,WAAauK,GAAW1J,KAAK,SAAU2J,GAC7C3H,EAAM7C,IAAI,WAAauK,EAAY,eAAe1J,KAAK,SAAU0D,GAC7D4E,EAAaoB,MACbpB,EAAaoB,GAAWC,OAASA,EAAOxH,KACxCmG,EAAaoB,GAAWhG,OAASA,EAAOvB,KACxC0E,EAAGyB,EAAaoB,YAGrB,CAAA,IAAKpB,EAAaoB,KAAe7C,EAAI,CACxC,GAAI8C,GAASrC,KAAKK,MAAMvG,EAAEwI,MACtB/G,KAAM,MACNuC,IAAK,WAAasE,EAClBpI,OAAO,IACRuI,cAECnG,EAAS4D,KAAKK,MAAMvG,EAAEwI,MACtB/G,KAAM,MACNuC,IAAK,WAAasE,EAAY,cAC9BpI,OAAO,IACRuI,aAMH,OAJAvB,GAAaoB,MACbpB,EAAaoB,GAAWC,OAASA,EACjCrB,EAAaoB,GAAWhG,OAASA,EAE1B4E,EAAaoB,GAGpB,IAAI7C,EAGA,MAAOyB,GAAaoB,EAFpB7C,GAAGyB,EAAaoB,MAO5B1B,EAAQ8B,iBAAmB,SAAUJ,EAAWK,EAAMC,EAAOnD,GACzDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAI8H,GAAU9H,EAAKuB,OAAOuG,QAAU9H,EAAKuB,OAAON,KAAO,KAAOsG,EAAY,IACtEQ,GACAH,KAAMA,EACNC,MAAOA,EAEPhC,GAAQoB,SAASM,KACjBQ,EAAKlC,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAExE0D,EAAM8E,KAAK2B,EAAS,IAAMwB,EAAQC,GAAMnD,QAAQ,SAAUoD,GACtDtD,EAAGsD,EAASC,OAAQD,EAASE,OAAOC,YAKhDtC,EAAQuC,eAAiB,SAAUb,EAAW7C,GAC1CmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,MAAO0E,GAAG1E,EAAKwH,WAIvB3B,EAAQwC,eAAiB,SAAUd,EAAW7C,GAC1CmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,MAAO0E,GAAG1E,EAAKuB,WAIvBsE,EAAQyC,aAAe,SAAUf,EAAWR,EAAOrC,GAC/CmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChC1H,GAAM8E,KAAK2B,EAAS,IAAMrF,EAAMkE,KAAKC,UAAU2B,IAAQlJ,KAAK,SAAU0K,GAClE,MAAO7D,GAAG6D,QAKtB1C,EAAQ2C,OAAS,SAAUjB,EAAW7C,GAClC,KAAM,IAAI+D,OAAM,oBAGpB5C,EAAQ6C,YAAc,SAAUnB,EAAWoB,EAAI3B,EAAOtC,GAMlD,MALKA,KACDA,EAAKsC,EACLA,EAAQ1E,QAGPiF,GAGAoB,MAGL9C,GAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,EAC5BqB,GACAC,QACInI,KAAM,QAIdmF,GAAQwC,eAAed,EAAW,SAAUuB,GACpC9B,GAAS8B,EAAI9B,OAAS8B,EAAI9B,MAAM+B,SAChCH,EAAQC,OAAOC,EAAI9B,MAAM+B,UAAY/B,EAC9BnB,EAAQoB,SAASM,KACxBqB,EAAQC,OAAOhD,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAGlF0D,EAAM7C,IAAIsJ,EAAS,IAAMrF,EAAO,IAAM0H,EAAIC,GAAShE,QAAQ,SAAUlI,GACjE,MAAOgI,GAAGhI,EAAU,QACrBwB,MAAM,SAAU8B,GACf,MAAO0E,GAAG,KAAM1E,SAvBjB0E,KA8BfmB,EAAQmD,YAAc,SAAUzB,EAAWoB,EAAI5B,EAAOrC,GAClDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChC1H,GAAMqF,IAAIoB,EAAS,IAAMrF,EAAO,IAAM0H,EAAIxD,KAAKC,UAAU2B,IAAQlJ,KAAK,SAAUnB,GAC5E,MAAOgI,GAAGhI,QAKtBmJ,EAAQoD,eAAiB,SAAU1B,EAAWoB,EAAI3B,EAAOtC,GAChDA,IACDA,EAAKsC,EACLA,EAAQ1E,QAIZuD,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAI8I,GAAM9I,EAAKuB,OACXN,EAAQ6H,EAAI7H,MAAQsG,EAEpB2B,GAAQL,UAER7B,IAAS8B,EAAI9B,OAAS8B,EAAI9B,MAAM+B,SAChCG,EAAKL,OAAOC,EAAI9B,MAAM+B,UAAY/B,EAC3BnB,EAAQoB,SAASM,KACxB2B,EAAKL,OAAOhD,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAE/E0D,EAAMsJ,OAAO7C,EAAS,IAAMrF,EAAO,IAAM0H,EAAIO,GAAMrL,KAAK6G,MAIhEmB,EAAQuD,wBAA0B,SAAU7B,EAAWoB,EAAI3B,EAAOtC,GACzDA,IACDA,EAAKsC,EACLA,EAAQ1E,QAGZuD,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAI8I,GAAM9I,EAAKuB,OACXN,EAAQjB,EAAKuB,OAAON,MAAQsG,EAE5B2B,GACAL,QACInI,KAAM,OAIVsG,IAAS8B,EAAI9B,OAAS8B,EAAI9B,MAAM+B,SAChCG,EAAKL,OAAOC,EAAI9B,MAAM+B,UAAY/B,EAC3BnB,EAAQoB,SAASM,KACxB2B,EAAKL,OAAOhD,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAE/E0D,EAAMsJ,OAAO7C,EAAS,IAAMrF,EAAO,IAAM0H,EAAIO,GAAMrL,KAAK6G,MAIhEmB,EAAQwD,YAAc,SAAU9B,EAAWoB,EAAIW,EAAWC,EAAOC,EAAO9E,GACpEmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChCrB,GAAOuD,QACHxG,IAAKqD,EAAS,IAAMrF,EAAO,IAAM0H,EAAK,IAAMW,EAC5CtJ,MAAOuJ,MAAOA,GACdG,KAAMF,EACNG,kBAAmB,WACpB5K,SAAS,SAAU6K,GAClBnD,QAAQC,IAAI,YAAcmD,SAAS,IAAQD,EAAIE,OAASF,EAAIG,UAC7DnF,QAAQ,SAAU5E,EAAMkI,EAAQjG,EAASV,GACxCmD,EAAG1E,QAKf6F,EAAQmE,WAAa,SAAUzC,EAAWoB,EAAIW,EAAWC,EAAOG,EAAMhF,GAClEmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChCrB,GAAOuD,QACHxG,IAAKqD,EAAS,IAAMrF,EAAO,IAAM0H,EAAK,IAAMW,EAC5CtJ,MAAOuJ,MAAOA,GACdG,KAAMA,EACNC,kBAAmB,UACpB5K,SAAS,SAAU6K,GAClBnD,QAAQC,IAAI,YAAcmD,SAAS,IAAQD,EAAIE,OAASF,EAAIG,UAC7DnF,QAAQ,SAAU5E,EAAMkI,EAAQjG,EAASV,GACxCmD,EAAG1E,QAKf6F,EAAQoE,YAAc,SAAU1C,EAAWoB,EAAIY,EAAOC,EAAO9E,GACzDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChC1H,GAAMsJ,OAAO7C,EAAS,IAAMrF,EAAO,IAAM0H,EAAK,UAAYa,GAAO3L,KAAK6G,MAK9EmB,EAAQqE,WAAa,SAAU3C,EAAWoB,EAAIY,EAAOG,EAAMhF,GACvDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,CAChC1H,GAAMsJ,OAAO7C,EAAS,IAAMrF,EAAO,IAAM0H,EAAK,SAAWe,GAAM7L,KAAK6G,MAI5EmB,EAAQsE,YAAc,SAAU5C,EAAWoB,EAAIyB,EAAW1F,GACtDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,EAC5BtE,EAAMqD,EAAS,IAAMrF,EAAO,UAAYmJ,EAAYlI,EAAOmI,gBAC/D3F,GAAGzB,MAIX4C,EAAQyE,WAAa,SAAU/C,EAAWoB,EAAI4B,EAAU7F,GACpDmB,EAAQyB,SAASC,EAAW,SAAUvH,GAClC,GAAIiB,GAAQjB,EAAKuB,OAAON,MAAQsG,EAC5BtE,EAAMqD,EAAS,IAAMrF,EAAO,SAAWsJ,EAAWrI,EAAOmI,gBAC7D3F,GAAGzB,MAIX4C,EAAQ2E,eAAiB,SAAUjD,EAAW7C,GACtC0B,EAAamB,GACb7C,EAAG0B,EAAamB,IAGhB1B,EAAQ4E,OAAOlD,GAAYK,KAAM,EAAGC,MAAO,GAAI,SAAUG,EAAUG,GAC3DA,EAAQ,GAER/B,EAAamB,GAAaS,EAAS,GACnCtD,EAAGsD,EAAS,KAGZtD,EAAG,SAMnBmB,EAAQ4E,OAAS,SAAUlD,EAAWmD,EAAO1D,EAAOtC,GAC3CA,IACDA,EAAKsC,EACLA,EAAQ1E,QAGZuD,EAAQwC,eAAed,EAAW,SAAUhG,GACxC,GAAIN,GAAQM,EAAOuG,QAAUP,CACzBP,IAASzF,EAAOyF,OAASzF,EAAOyF,MAAM+B,SACtC2B,EAAMnJ,EAAOyF,MAAM+B,UAAY/B,EACxBnB,EAAQoB,SAASM,KACxBmD,EAAM7E,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAEzE0D,EAAM8E,KAAK2B,EAAS,IAAMrF,EAAMkE,KAAKC,UAAUsF,IAAQ9F,QAAQ,SAAU+F,GAC/BrI,SAAlCqI,EAAUzC,OAAO0C,aACjBlG,EAAGiG,EAAU1C,OAAQ0C,EAAUzC,OAAO0C,cAGtClG,EAAGiG,EAAU1C,OAAQ0C,EAAUzC,OAAOC,YAMtDtC,EAAQgF,OAAS,SAAUtD,EAAWuD,EAAQC,EAAarG,GACvDmB,EAAQwC,eAAed,EAAW,SAAUhG,GACxC,GAAImJ,MACAzJ,EAAQM,EAAOuG,QAAUP,CACzB1B,GAAQoB,SAASM,KACjBmD,EAAM7E,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAGzEuO,EAAMI,OAASA,EACfJ,EAAMM,GAAKzJ,EAAOoH,GAClB+B,EAAMA,MAAQK,MAEdlF,EAAQoF,WAAW3E,EAAS,IAAMrF,EAAO,UAAWyJ,GACpDhG,OAIRmB,EAAQqF,OAAS,SAAU3D,EAAWuD,EAAQpB,EAAMgB,EAAOhG,GACvDmB,EAAQwC,eAAed,EAAW,SAAUhG,GACxC,GAAIN,GAAQM,EAAOuG,QAAUP,CACzB1B,GAAQoB,SAASM,KACjBmD,EAAM7E,EAAQoB,SAASM,GAAWT,KAAOjB,EAAQoB,SAASM,GAAWpL,OAGzEuO,EAAMI,OAASA,EAEfjF,EAAQoF,WAAW3E,EAAS,IAAMrF,EAAO,UAAWyJ,EAAO,OAAQhB,GACnEhF,OAIRmB,EAAQoF,WAAa,SAAUhK,EAAM4H,EAAQsC,EAAQzB,GACjDyB,EAASA,GAAU,OAEfzB,GACAjD,QAAQC,IAAI,OAAQgD,GAGxBjD,QAAQC,IAAI,eAAgBzF,EAAM4H,EAAQsC,EAAQzB,EAIlD,IAAI0B,GAAO1O,SAAS4B,cAAc,OAClC8M,GAAKC,aAAa,SAAUF,GAC5BC,EAAKC,aAAa,SAAUpK,EAAO,UAAYpB,EAAMmC,SAASC,QAAQC,OAAOC,cAAcmJ,QAAQ,UAAW,IAE9G,KAAK,GAAIxE,KAAO+B,GAEZ,GAAIA,EAAO0C,eAAezE,GAAM,CAC5B,GAAI0E,GAAc9O,SAAS4B,cAAc,QACzCkN,GAAYH,aAAa,OAAQ,UACjCG,EAAYH,aAAa,OAAQvE,GACN,gBAAhB+B,GAAO/B,GACd0E,EAAYH,aAAa,QAASlG,KAAKC,UAAUyD,EAAO/B,KAExD0E,EAAYH,aAAa,QAASxC,EAAO/B,IAG7CsE,EAAKzM,YAAY6M,GAwBzBJ,EAAKK,UAGT5F,EAAQ6F,SAAW,SAAUnE,EAAWoE,EAASjH,GAC7CmB,EAAQwC,eAAed,EAAW,SAAUhG,GACxC,GAAIN,GAAQM,EAAON,MAAQsG,CAC3B1H,GAAM8E,KAAK2B,EAAS,IAAMrF,EAAO,WAAa2K,UAAUD,IAAU/G,QAAQ,SAAU5E,GAChF0E,EAAG1E,QAWf6F,EAAQgG,mBAAqB,SAAUC,EAAOtE,GAC1C,GAAIA,EAAOsE,GACP,MAAOtE,GAAOsE,EAEd,IACIC,GADA/D,EAAW8D,EAAME,MAAM,IAE3B,KAAK,GAAIzN,KAAKyJ,GACV,GAAI+D,GAAWA,EAAQE,WACnBF,EAAUA,EAAQE,WAAWjE,EAASzJ,QACnC,IAAIwN,GAAWA,EAAQG,KAAOH,EAAQI,aAAeJ,EAAQI,YAAYC,QAAQpE,EAASzJ,KAAM,EAAI,CAEvG,GAAI8N,GAAYxG,EAAQyB,SAASyE,EAAQG,IAEzC,IADAH,EAAUrQ,QAAQ4Q,KAAKzG,EAAQgG,mBAAmB7D,EAASzJ,GAAI8N,EAAU7E,SACrEuE,GAAWA,EAAQQ,MAAO,CAC1B,GAAIhD,GAAQuC,EAAMU,YAAY,IAC9BT,GAAQQ,MAAQrK,EAAOuK,cAAcX,EAAMY,UAAU,EAAGnD,GAAS,IAAMwC,EAAQQ,YAInFR,GAAUvE,EAAOQ,EAASzJ,GAIlC,OAAOwN,IAIfrQ,QAAQ0D,QAAQuN,OAAOC,KAAKhH,GAAY,SAAUkB,GAC9CjB,EAAQiB,GAAOlB,EAAUkB,KAGtBjB,SAK1B,WACG,YACAnK,SAAQ6D,OAAO,eACVgF,QAAQ,qBAAsB,WAC3B,OACIsI,WAAY,IACZC,UACAzM,YAGP8D,SAAS,cAAe,WACrBxG,KAAK0G,MAAQ,aAAc,SAAU,qBAAsB,SAAU1E,EAAY0H,EAAQ0F,GAyGrF,QAASC,GAASjG,EAAOC,GACrBK,EAAOgB,eAAetB,EAAO,SAAU+B,GACnC,GAAImE,KACAjG,IAAS8B,EAAI9B,MAAM+B,WACnBkE,EAAEnE,EAAI9B,MAAM+B,UAAY/B,EAG5B,IAAI4F,GAAOD,OAAOC,KAAKG,EAAmB1M,MAAM0G,GAAOmG,KACpC,IAAfN,EAAK9N,OACLmO,EAAEnE,EAAIH,IAAMiE,EAAK,IAEjBK,EAAEE,OACFzR,QAAQ0D,QAAQwN,EAAM,SAAUjE,GAC5B,IAAKoE,EAAmB1M,MAAM0G,GAAOmG,KAAKvE,GAAIV,OAAQ,CAClD,GAAImF,KACJA,GAAQtE,EAAIH,IAAMA,EAClBsE,EAAEE,IAAIzP,KAAK0P,OAMvB/F,EAAOoD,OAAO1D,GAAQ2D,MAAOuC,GAAI,SAAUhF,EAAQE,GAE/CzM,QAAQ0D,QAAQ6I,EAAQ,SAAUoF,GAC9B,GAAI1E,GAAK0E,EAAIvE,EAAIH,GACjBoE,GAAmB1M,MAAM0G,GAAOmG,KAAKvE,GAAIV,OAASoF,IAGtD3R,QAAQ0D,QAAQuN,OAAOC,KAAKG,EAAmB1M,MAAM0G,GAAOmG,MAAO,SAAUI,GACzE,GAAIC,GAASR,EAAmB1M,MAAM0G,GAAOmG,KAAKI,EAC9CC,GAAOC,OACP9R,QAAQ0D,QAAQmO,EAAOC,KAAM,SAAU9I,GACnCA,EAAG6I,EAAOtF,gBAEPsF,GAAOC,YA3IlC,GAAIrJ,KAkJJ,OAhJAxE,GAAW4G,IAAI,oBAAqB,SAAUkH,EAAOC,EAAMC,GACnDD,GAAQC,IACRZ,EAAmB1M,SACnB3E,QAAQ0D,QAAQuN,OAAOC,KAAKG,EAAmBD,QAAS,SAAUc,GAC9DC,aAAad,EAAmBD,OAAOc,UAChCb,GAAmBD,OAAOc,QAM7CzJ,EAASsG,OAAS,SAAUlD,EAAWuG,EAAG9G,EAAOtC,GAC7C,GAAIqD,GAAO5C,KAAKC,UAAU0I,EAGrBf,GAAmB1M,MAAMkH,KAC1BwF,EAAmB1M,MAAMkH,OAGxBwF,EAAmB1M,MAAMkH,GAAWwG,QACrChB,EAAmB1M,MAAMkH,GAAWwG,SAGxC,IAAIC,GAASjB,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,EAClDiG,IAoBOA,EAAOnJ,KAAOmJ,EAAOR,KAC7BQ,EAAOR,KAAK9P,KAAKgH,IAGjBsJ,EAAOR,KAAK9P,KAAKgH,GACjBhJ,QAAQ0D,QAAQ4O,EAAOR,KAAM,SAAUS,GAKnCA,EAAID,EAAOnJ,IAAI0D,SAAUyF,EAAOnJ,IAAIsD,SAExC6F,EAAOR,UA/BPT,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,MAC1CgF,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,GAAMyF,MAAQ9I,GAGxD2C,EAAOoD,OAAOlD,EAAWuG,EAAG9G,EAAO,SAAUuB,EAAUJ,GAKnD4E,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,GAAMlD,KAC5C0D,SAAUA,EACVJ,MAAOA,GAEXzM,QAAQ0D,QAAQ2N,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,GAAMyF,KAAM,SAAUS,GAC5EA,EAAI1F,EAAUJ,KAElB4E,EAAmB1M,MAAMkH,GAAWwG,MAAMhG,GAAMyF,YAmB5DrJ,EAASuE,YAAc,SAAUnB,EAAWoB,EAAI3B,EAAOtC,GAG9CqI,EAAmB1M,MAAMkH,KAC1BwF,EAAmB1M,MAAMkH,OAGxBwF,EAAmB1M,MAAMkH,GAAW2F,OACrCH,EAAmB1M,MAAMkH,GAAW2F,SAGpCvE,GACKoE,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,KAC1CoE,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,OAGxCoE,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAI6E,OAC9CT,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAI6E,SAG7CT,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAIV,OAE7CvD,EAAGqI,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAIV,QACzC8E,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAI6E,KAAKpB,QAAQ1H,KAAO,IACxEqI,EAAmB1M,MAAMkH,GAAW2F,KAAKvE,GAAI6E,KAAK9P,KAAKgH,GAGnDqI,EAAmBD,OAAOvF,IAC1BsG,aAAad,EAAmBD,OAAOvF,IAI3CwF,EAAmBD,OAAOvF,GAAa2G,WAAW,WAC9ClB,EAASzF,EAAWP,IACrB+F,EAAmBF,cAI1BnI,KA8CDP,SAItB,WACG,YACAzI,SAAQ6D,OAAO,eACVgF,QAAQ,2BAA4B,KAAM,YAAa,eAAgB,QAAS,YAAa,UAAW,SAAUxH,EAAI4E,EAAWwM,EAAcC,EAAOC,EAAWzO,GAE9J,OACI2I,SAAU,SAAUA,GAEhB,GAAIA,EAAStG,QAAQ,kBAAqBsG,EAAStG,QAAQ,mBAAqBrC,EAAQmB,WAAWuN,QAAU,CACzG,GAAIC,GAAWF,EAAUrR,IAAI,WACY,KAArCuR,EAASC,iBAAiB1P,QAC1ByP,EAASE,MACLvL,SAAU,wBACVwL,UAAW,iDASvB,MALwB,OAApBnG,EAASL,OACTzB,QAAQC,IAAI,gBACe,MAApB6B,EAASL,QAChBkG,EAAMxJ,QAAQ,OAAQ,+BAEnB2D,GAAYxL,EAAGS,KAAK+K,IAE/BoG,cAAe,SAAUC,GAyBrB,QAASC,GAAYC,GACjB,QAASC,KACkB,UAAnBpN,EAAUsB,OAAwC,WAAnBtB,EAAUsB,OAAyC,KAAnBtB,EAAUsB,QACrEkL,EAAa3G,OACb7F,EAAUV,KAAK,UAAYkN,EAAa3G,QAExC7F,EAAUV,KAAK,MAK3B,GAAyB,MAArB2N,EAAU1G,OACVzB,QAAQC,IAAI,qBAAsBkI,GAClCG,IAEuB,UAAnBpN,EAAUsB,OACVmL,EAAMlQ,MAAM,eAAgBiH,KAAKC,UAAUwJ,EAAU5O,WAEtD,IAAyB,MAArB4O,EAAU1G,OACjBkG,EAAMlQ,MAAM,wBAAyBiH,KAAKC,UAAUwJ,EAAU5O,WAC3D,IAAyB,MAArB4O,EAAU1G,OACjBkG,EAAMlQ,MAAM,cAAeiH,KAAKC,UAAUwJ,EAAU5O,WACjD,IAAyB,MAArB4O,EAAU1G,QAAmB4G,EAGjC,GAAyB,MAArBF,EAAU1G,QAAkB4G,EACnCV,EAAMY,QAAQ,qBAAsB7J,KAAKC,UAAUwJ,EAAU5O,WAC1D,IAAyB,MAArB4O,EAAU1G,OACjB,GAAI0G,EAAU5O,MAAQ4O,EAAU5O,KAAKiP,OAAQ,CACzC,GAAIA,KACJvT,SAAQ0D,QAAQuN,OAAOC,KAAKgC,EAAU5O,KAAKiP,QAAS,SAAUC,GAC1DD,EAAOvR,KAAK,WAAawR,EAAI,2CAA6CN,EAAU5O,KAAKiP,OAAOC,GAAGC,WAEvGF,EAAOG,OAAO,EAAG,EAAG,oBAAsBR,EAAU1G,QACpDkG,EAAMlQ,MAAMoD,MAAM3D,KAAMsR,OAExBb,GAAMlQ,MAAM,oBAAsB0Q,EAAU1G,OAAa/C,KAAKC,UAAUwJ,EAAU5O,WAEzC,IAAtCqP,KAAKC,MAAMV,EAAU1G,OAAS,MAAmD,GAAtCmH,KAAKC,MAAMV,EAAU1G,OAAS,OAChF6G,IACAX,EAAMlQ,MAAM,SAAW0Q,EAAU1G,OAAQ/C,KAAKC,UAAUwJ,EAAU5O,YAjBlE+O,KACAX,EAAMlQ,MAAM,YAAaiH,KAAKC,UAAUwJ,EAAU5O,OA/C1D,GAKIuP,GALAlI,EAASgH,EAAUrR,IAAI,UAEvBuK,EAAY4G,EAAa3G,OACzBgI,EAAUrB,EAAaxF,GAGvBrC,EAAS1G,EAAQ9C,IAAIwJ,MA6DzB,OA3DIiB,GACAF,EAAOgB,eAAed,EAAW,SAAUR,GACvC,GAAI9F,GAAO,IAAM8F,EAAM9F,KAAO,IAAMuO,CAChClJ,KACArF,EAAO,IAAMA,GAGjBsO,EAA4BtO,IAAS2N,EAAUrN,OAAO0B,IACtD4L,EAAYU,KAIhBV,GAAY,GA+CT9R,EAAG0S,OAAOb,QAK5BrN,QAAQ,gBAAiB,SAAUmO,GAEhCA,EAAcC,aAAajS,KAAK,iCAyB3C,WACG,YACAhC,SAAQ6D,OAAO,eACVgF,QAAQ,aAAc,QAAS,UAAW,SAAU,SAAU,SAAU1E,EAAOD,EAASsC,EAAQmF,GACjG,GAAI9C,KAoGJ,OAlGAA,GAAQqL,KAAO,SAAUxR,GAErB,QAASyR,GAAezR,EAAKmL,GACzB,GAAkB,gBAAPnL,GACPa,EAAE6Q,KAAK1R,EAAK,SAAU2R,EAAGC,GAEZ,aAALD,GACAE,EAAOvS,MACHuD,KAAMsI,EACNuC,MAAOkE,EAAElE,MACTjD,OAAQmH,EAAEnH,OACVqH,KAAMF,EAAEE,OAOZ3G,EAJCA,EAIOA,EAAQ,IAAMwG,EAHdA,EAKZF,EAAeG,EAAGzG,EAClB,IAAI4G,GAAa5G,EAAMyC,MAAM,IAC7BmE,GAAWC,MACX7G,EAAQ4G,EAAWE,KAAK,WAG3B,CACD,GAAIF,GAAa5G,EAAMyC,MAAM,IAC7BmE,GAAWC,MACX7G,EAAQ4G,EAAWE,KAAK,MA5BhC,GAAIJ,KAiCJ,OADAJ,GAAezR,GACR6R,GAGX1L,EAAQjD,MAAQ,SAAUgP,EAAO/I,EAAW8F,GACxC,QAASkD,GAAWC,EAAaC,EAAcC,GAC3C,MAAO,UAASC,EAAQC,GACpB,GAAID,EAAQ,CAEJ,GAAI1N,GAAMrD,EAAQ9C,IAAIwJ,OAAS,KAAOkK,EAAYvP,KAAO,IAAMwP,EAAaP,KACxEnI,IACJrM,SAAQ0D,QAAQqR,EAAa5H,OAAQ,SAAUgI,GAC3C9I,EAAK8I,GAAQC,WAAWzD,EAAKwD,KAOjChR,EAAM8E,KAAK1B,EAAK8E,GAAMnD,QAAQ,SAAU5E,GACpC,GAAI+Q,GAAWN,EAAaxP,KAAKqK,QAAQ,gBAAiB,GAExChJ,UAAfoO,IACCK,EAAWA,EAASzF,QAAQ,WAAY,IAAMoF,EAAa,MAG/DxO,EAAO8O,SAASD,EAAU1D,EAAKrN,OAQnDqH,EAAOC,SAASC,EAAW,SAAUqG,GACjC,GAAIqC,GAAS1L,EAAQqL,KAAKhC,EAAEpG,OAC5BvI,GAAE6Q,KAAKG,EAAQ,SAAUF,EAAGC,GACxB,GAAI,WAAaiB,KAAKjB,EAAElE,OAAQ,CAC5B,GAAI7K,GAAO+O,EAAE/O,KAAKqK,QAAQ,gBAAiB,IACvC4F,EAAOjQ,EAAK+K,MAAM,KAAK,GACvBmF,EAAcnB,EAAElE,MAAMR,QAAQ,WAAY,GAE9C,IAAI,UAAY2F,KAAKhQ,GACjBqP,EAAMc,iBAAiB,SAAWF,EAAM,SAAUG,EAAIC,GAClD,GAAID,GAAMA,YAAcE,OACpB,IAAK,GAAIhT,KAAK8S,GAAI,CACd,GAAIG,GAAWN,EAAO,IAAM3S,EAAI,KAAO4S,CACvC,KAAK,GAAIrQ,KAAKkP,GAAEnH,OACZmH,EAAEnH,OAAO/H,GAAK0Q,CAElBlB,GAAMmB,OAAO,SAAWD,EAAUjB,EAAW3C,EAAErM,OAAQ7F,QAAQ4Q,KAAK0D,GAAItU,QAAQ4Q,KAAK/N,YAI/F,CACF,GAAIiT,GAAWN,EAAO,IAAMC,CAC5Bb,GAAMmB,OAAO,SAAgBD,EAAUjB,EAAW3C,EAAErM,OAAQ7F,QAAQ4Q,KAAK0D,UAG7EM,GAAMmB,OAAO,SAAgBzB,EAAElE,MAAOyE,EAAW3C,EAAErM,OAAQyO,SAMpEzL,QAGd,WACG,YACA7I,SAAQ6D,OAAO,eACVgF,QAAQ,UAAW,aAAc,SAAU5E,GAExC,GAAI4E,KA+OJ,OA7OAA,GAAQmN,mBAAqB,SAAUzO,GACnC,MAAO,aAAegO,KAAKhO,IAG/BsB,EAAQoN,gBAAkB,SAAUtE,EAAKpK,GACrC,MAAOA,GAAIqI,QAAQ,cAAe,SAAUsG,EAAIC,GAE5C,GAAIC,GAAIvN,EAAQwN,SAASF,EAASxE,EAClC,OAAOyE,MAIfvN,EAAQyN,oBAAsB,SAAU/O,GACpC,MAAO,aAAagP,KAAKhP,GAAK,IAGlCsB,EAAQkI,cAAgB,SAAUF,EAAO2F,GAGrC,MAFA3F,GAAQA,GAAS,GACjB2F,EAAYA,GAAa,IAClB3F,EAGFjB,QAAQ,qBAAsB,SAAU6G,GACrC,MAAO,sCAAwCA,EAAI7G,QAAQ,IAAK,IAAI8G,gBAGvE9G,QAAQ,WAAY,OAEpBA,QAAQ,KAAM,SAAU6G,GACrB,MAAOA,GAAIC,iBAUvB7N,EAAQwN,SAAW,SAAUjG,EAAO9P,GAChC,GAAIA,EAAS,CACT,GAAIqW,GAAWvG,EAAME,MAAM,IAC3B,IAAIqG,YAAoBd,QAASc,EAASvT,OAAS,EAAG,CAClD,GACIwT,GACAC,EAFAC,EAAMxW,CAGV,KAAK,GAAIiF,KAAQoR,GAGb,GAAI,YAAcpB,KAAKoB,EAASpR,IAAQ,CAEpC,GAAIwR,GAAWJ,EAASpR,GAAMqK,QAAQ,YAAa,IAC/C/B,EAAQ8I,EAASpR,GAAMyR,MAAM,eAAe,EAE5CF,KACIjJ,EACAiJ,EAAMA,EAAIC,GAAUlJ,GAGpBgJ,EAAYE,OAIpB,IAAIF,EAAW,CACX,GAAII,GAAMH,CACVF,KACA,KAAK,GAAIM,KAAQD,GAAIJ,GACjBD,EAAY5U,KAAKiV,EAAIJ,GAAWK,GAAMP,EAASpR,SAG/CuR,KACAA,EAAMA,EAAIH,EAASpR,IAKnC,OAAIqR,GACOA,EAEJE,EAEP,MAAOxW,GAAQ8P,KAW3BvH,EAAQyM,SAAW,SAAUlF,EAAO/E,EAAO5K,GACvC,GAAI4K,EAAO,CACP,GAAIsL,GAAWvG,EAAME,MAAM,IAC3B,IAAIqG,YAAoBd,QAASc,EAASvT,OAAS,EAE/C,IAAK,GADDoN,GAAMnF,EACDxI,EAAI,EAAGA,EAAI8T,EAASvT,OAAQP,IAAK,CACtC,GAAI0C,GAAOoR,EAAS9T,EACpB,IAAI,YAAc0S,KAAKhQ,GAAO,CAC1B,GAGI4R,GAHAJ,EAAWxR,EAAKqK,QAAQ,YAAa,IACrC/B,EAAQtI,EAAKyR,MAAM,eAAe,EAGtC,IAAcpQ,SAAViH,EACA,IAAK,GAAIuJ,KAAU5G,GAAIuG,GACnBI,EAAUR,EAAS9T,EAAI,GACvBgG,EAAQyM,SAAS6B,EAAS3G,EAAIuG,GAAUK,GAAS3W,OAGrD0W,GAAUR,EAAS9T,EAAI,GACvBgG,EAAQyM,SAAS6B,EAAS3G,EAAIuG,GAAUlJ,GAAQpN,OAGhDoC,GAAI8T,EAASvT,OAAS,GACjBoN,EAAIjL,KACLiL,EAAIjL,OAERiL,EAAMA,EAAIjL,IAEViL,EAAIjL,GAAQ9E,KA0CpCoI,EAAQwO,mBAAqB,SAAUvL,EAAQ0K,GAI3C,QAASc,GAAa5U,EAAK6U,GACvB,GAAIrG,GAAOD,OAAOC,KAAKxO,EACvB1C,SAAQ0D,QAAQwN,EAAM,SAAUmD,GACxB3R,EAAI2R,GAAG9D,WACP+G,EAAa5U,EAAI2R,GAAG9D,WAAYgH,EAAUA,EAASf,EAAYnC,EAAKA,GAC7D3R,EAAI2R,GAAG5D,YACdzQ,QAAQ0D,QAAQhB,EAAI2R,GAAG5D,YAAa,SAAUL,GAC1CoH,EAAOxV,MAAMuV,EAAUA,EAASf,EAAa,IAAMnC,EAAImC,EAAYpG,KAGvEoH,EAAOxV,KAAKuV,EAAUA,EAASf,EAAYnC,EAAKA,KAb5DmC,EAAYA,GAAa,GACzB,IAAIgB,KAmBJ,OAFAF,GAAaxL,GAEN0L,GASX3O,EAAQ4O,YAAc,SAAU/H,EAAMgI,GAClC,GACIC,EAgCJ,OA9BIjI,IAAQA,EAAKkI,MACbD,EAAYA,MACZA,EAAU3V,MACNgD,KAAQ,OACR4S,KAAQlI,EAAKkI,QAEVlI,GAAQA,EAAKmI,QACpBF,EAAYjI,EAAKmI,OAGrBF,EAAYA,IAAc,MAuB9B9O,EAAQiP,aAAe,WACnB,OAAO,GAAKC,OAAQC,WAGxBnP,EAAQ8F,eAAiB,WACrB,MAAO,MAAQ9F,EAAQiP,gBAGpBjP,QAGlB,WACG,YACA7I,SAAQ6D,OAAO,eACVgF,QAAQ,UAAW,aAAc,SAAU,SAAU5E,EAAY0H,GAC9D,GAAIqD,KAEJ,QACIiJ,SAAU,SAAU1G,GAChBvC,EAAMA,MAAQuC,GAElB2G,WAAY,WACRjW,KAAKgW,cAETE,SAAU,WACN,MAAOnJ,GAAMA,OAEjBoJ,UAAW,SAAUC,GACjBrJ,EAAMsJ,OAASD,GAEnBE,UAAW,SAASnI,EAAOoI,GACvBxJ,EAAMsJ,UACNtJ,EAAMsJ,OAAOlI,GAASoI,EAAM,GAAI,GAEpCC,QAAS,SAASrI,GACd,MAAGpB,GAAMsJ,OACEtJ,EAAMsJ,OAAOlI,GAEpB,QAGRsI,QAAS,SAASxM,GACd8C,EAAM9C,KAAOA,GAEjByM,SAAU,SAASxM,GACf6C,EAAM7C,MAAQA,GAElB4C,OAAQ,SAAUjD,EAASxJ,GACvBqJ,EAAOoD,OAAOjD,EAAQkD,EAAO,SAAU1C,EAAUG,GAC7CnK,EAASgK,EAAUG,EAAO,SAGlCmM,eAAgB,SAAS9M,EAAQxJ,YAUhD,WACG,YACAtC,SAAQ6D,OAAO,eACVgV,UAAU,WAAY,WACnB,OACIC,SAAU,IACVlE,OAAO,EACP3N,YAAa,sBACbC,YAAa,SAAU,eAAgB,YAAa,SAAU,SAAU,aAAc,UAAW,aAAc,SAAU6R,EAAQtG,EAAcxM,EAAWO,EAAQmF,EAAQqN,EAAYC,EAAShV,GAC3L8U,EAAOvS,OAASA,EAEhBuS,EAAOlO,IAAI,oBAAqB,SAAUkH,EAAOC,EAAMC,GAC/CD,EAAK7E,OAAOrB,SACZiN,EAAOG,aAAelH,EAAK7E,OAAOrB,UAG1CiN,EAAOI,YAAa,EACpBJ,EAAOK,QAAS,CAEhB,IAAIC,GAAS,WACTN,EAAOO,SAAW,GAAIC,UAEtBvZ,QAAQ0D,QAAQsV,EAAY,SAAU9B,GAClC6B,EAAOO,SAASE,IAAItC,EAAKuC,QAASvC,EAAKrG,MAAOqG,KAGlDvL,EAAOF,UAAU,SAAUyG,GACvBlS,QAAQ0D,QAAQwO,EAAG,SAAUpG,GACzBH,EAAOgB,eAAeb,EAAQ,SAAUjG,GAChCA,EAAO6T,SACP/N,EAAOmD,eAAehD,EAAQ,SAAU6F,GAChCA,EACA9L,EAAO8T,QAAU,SAAW7N,EAAS,WAAa6F,EAAI9L,EAAOoH,IAE7DpH,EAAO8T,QAAU,SAAW7N,EAAS,SAI7CjG,EAAO8T,QAAU,SAAW7N,EAEhCiN,EAAOO,SAASE,IAAI3T,EAAO4T,QAAS3N,EAAQjG,SAO5DwT,KACApV,EAAW4G,IAAI,aAAc,WACzBwO,MAGJN,EAAOa,YAAc,SAAUH,GAC3BV,EAAOc,cAAgBJ,GAG3BV,EAAOe,MAAQ,SAAUL,EAASM,EAAMC,GACpCjB,EAAOkB,aAAeR,EACtBV,EAAOG,aAAea,EACtBhB,EAAOc,cAAgBJ,EACnBO,EAAKL,QACL1T,EAAUV,KAAKyU,EAAKL,SACbK,EAAKzS,MACZ0R,EAAQiB,SAASnX,KAAOiX,EAAKzS,MAIrCwR,EAAOoB,aAAe,SAAUzX,GAC5B,MAAQA,aAAe0X,UAG3BrB,EAAOsB,MAAQ,SAAUC,EAAGlI,GACxBrH,QAAQC,IAAIsP,EAAGlI,WAOvC,IAAIgI,SAAU,aAEVb,SAAW,WAGX,GAAIlS,KAEJpF,MAAKX,IAAM,WACP,MAAO+F,IAIXpF,KAAKuX,IAAM,SAAUpO,EAAKU,EAAQjG,GAO9B,IAHA,GAAI0U,GAASnP,EAAIkF,MAAM,KACnBkK,EAAWnT,EACXxE,EAAI,EACDA,EAAI0X,EAAOnX,OAAS,GACY,mBAAxBoX,GAASD,EAAO1X,MACvB2X,EAASD,EAAO1X,IAAM,GAAIuX,UAG9BI,EAAWA,EAASD,EAAO1X,IAC3BA,GAGJ2X,GAASD,EAAOA,EAAOnX,OAAS,IAAMoX,EAASD,EAAOA,EAAOnX,OAAS,KAAO,GAAIgX,SACjFI,EAASD,EAAOA,EAAOnX,OAAS,IAAI0I,GAAUjG,KAIrD,WACG,YACA7F,SAAQ6D,OAAO,eACVgV,UAAU,eAAgB,WACvB,OACIC,SAAU,IACVlE,OACI6F,SAAU,KAEd3X,KAAM,SAAU8R,EAAO8F,EAAMC,GAEzBD,EAAKE,GAAG,QAAS,WACbrX,EAAE,aAAasX,SAASC,UAAWvX,EAAEqR,EAAM6F,UAAUM,SAASC,KAAM,iBAM3F,WACG,YACAhb,SAAQ6D,OAAO,eACVgV,UAAU,WAAY,WAAY,SAASoC,GAE5C,MAAO,UAASrG,EAAOtU,EAAS4a,GAC5BtG,EAAMmB,OACF,SAASnB,GAEL,MAAOA,GAAMuG,MAAMD,EAAME,UAE7B,SAAS3a,GAGLH,EAAQ+a,KAAK5a,GAMbwa,EAAS3a,EAAQgb,YAAY1G,YAMhD,WACG,YAEA5U,SAAQ6D,OAAO,eAAegV,UAAU,qBAAsB,eAAgB,SAAU,SAAUpG,EAAc9G,GAC5G,OACImN,SAAU,KACVlE,OAAO,EACP3N,YAAa,2DACbnE,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GACnC,GAAI1P,GAAY4G,EAAa3G,MAC7BH,GAAOqE,SAASnE,EAAWqP,EAAMM,MAAO,SAASlX,GAC7CsQ,EAAMtI,SAAW2E,OAAOC,KAAK5M,GAC7BsQ,EAAM6G,SAAW7G,EAAMtI,SAAS,GAChCsI,EAAM8G,cAAgBpX,EAAKsQ,EAAM6G,UACjC7G,EAAMmB,OAAO,WAAY,SAAS0F,GAC/B7G,EAAM8G,cAAgBpX,EAAKmX,eAQjD,WACG,YAEAzb,SAAQ6D,OAAO,eAAegV,UAAU,oBAAqB,eAAgB,SAAU,SAAUpG,EAAc9G,GAC3G,OACImN,SAAU,KACVlE,OAAO,EACP3N,YAAa,yDACbnE,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GAEnC,GAAI1P,GAAY4G,EAAa3G,MAC7BH,GAAOgB,eAAed,EAAW,SAAUhG,GACvC8F,EAAOqE,SAASnE,EAAWqP,EAAMM,MAAO,SAAUlX,GAE9C,GAAIkX,KACJ,KAAI,GAAI3Y,KAAKgD,GAAO8V,OAAO,CACvB,GAAIC,GAAI/V,EAAO8V,OAAO9Y,EAEnB+Y,GAAE/K,OAASqK,EAAMM,QAChBA,EAAQI,GAgBhB,GAZAhH,EAAMtI,SAAW2E,OAAOC,KAAK5M,GAC7BsQ,EAAM6G,SAAW7G,EAAMtI,SAAS,GAEV,UAAnBkP,EAAMK,UACLjH,EAAMkH,eAAgB,EAEG,UAAnBN,EAAMK,UACZjH,EAAMkH,eAAgB,EAEtB/Q,QAAQvI,MAAM,gDAAiDgZ,EAAMK,WAGrEjH,EAAMkH,iBAAkB,EAExBlH,EAAMmH,WAEE3Q,IAAKwJ,EAAM6G,SACXO,OAAQ1X,EAAKsQ,EAAM6G,YAI3B7G,EAAMmB,OAAO,WAAY,SAAU0F,GAC3B7G,EAAMkH,iBAAkB,IACxBlH,EAAMmH,WAEE3Q,IAAKqQ,EACLO,OAAQ1X,EAAKmX,YAM1B,CAEH7G,EAAMmH,WACN,KAAK,GAAI3Q,KAAO9G,GACZsQ,EAAMmH,SAAS/Z,MAEPoJ,IAAKA,EACL4Q,OAAQ1X,EAAK8G,kBAWpD,WACG,YACApL,SAAQ6D,OAAO,eAAegV,UAAU,gBAAiB,eAAgB,QAAS,KAAM,SAAU,SAAU,YAAa,SAAUpG,EAActO,EAAO9C,EAAI4a,EAAQtQ,EAAQ1F,GACxK,OACI6S,SAAU,KACVlE,OAAO,EAEP3N,YAAa,iDACbnE,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GAqBnC,QAASW,KACL,GAAIC,GAAUvH,EAAMtI,SAAS8P,OAAO,SAAUC,GAC1C,MAAOA,GAAEF,SAGb,IAAIA,GAAWA,EAAQ/Y,OAAS,EAAG,CAC/B,GAAI4L,IAASyC,OAIb,OAHAzR,SAAQ0D,QAAQyY,EAAS,SAAUjF,GAC/BlI,EAAMyC,IAAIzP,MAAMsa,IAAKpF,EAAKoF,QAEvBtN,EAEP,MAAO4F,GAAM5F,MAhCrB4F,EAAM2H,cAAgB,SAAUC,GAC5B,GAAIA,EAAOxX,MAAuB,QAAfwX,EAAOxX,KAEtB2G,EAAO4D,WAAWiN,EAAOjX,KAAMiX,EAAOlY,KAAM,YACzC,IAAIkY,EAAOxX,MAAuB,YAAfwX,EAAOxX,KAC7BiB,EAAUV,KAAKiX,EAAOtC,cACnB,CACH,GAAIuC,IACAhN,OAAQ+M,EAAO/M,OACflI,IAAKiV,EAAOjX,KACZgB,SACImW,eAAgB,oBAEpBpY,KAAMkY,EAAOlY,KAGjBH,GAAMsY,KAoBd7H,EAAMzF,OAAS,SAAsBC,GACjCzD,EAAOwD,OAAOyF,EAAM9I,OAAQsD,EAAQ8M,IAAkB,SAAUvK,OAKpEiD,EAAMpF,OAAS,SAAsBJ,GACjCrE,QAAQC,IAAI,SAAUoE,EAAQwF,EAAM9I,OACpC,IAAIkC,GAAO,EACXrC,GAAO6D,OAAOoF,EAAM9I,OAAQsD,EAAQpB,EAAM,SAAU2D,OAIxDiD,EAAM+H,aAAe,WACjB,IAAK/H,EAAMtI,SACP,OAAO,CAEX,IAAIsQ,GAAgBhI,EAAMtI,SAAS8P,OAAO,SAAUS,GAChD,MAAOA,GAAIV,SAGf,OAAOS,GAAcxZ,OAAS,GAGlCwR,EAAMkI,eAAiB,WACnB,GAAIF,GAAgBhI,EAAMtI,SAAS8P,OAAO,SAAUS,GAChD,MAAOA,GAAIV,SAGXS,GAAcxZ,OAAS,GACvBwR,EAAMmI,YAAY,SAAUC,GACxB,GAAIA,EAAK,CACL,GAAIC,KACJjd,SAAQ0D,QAAQkZ,EAAe,SAAUtc,GACrC,GAAIiE,GAAWlD,EAAGmD,OAClByY,GAAUjb,KAAKuC,EAAS1C,SAExB8J,EAAOgB,eAAeiI,EAAM9I,OAAQ,SAAUsB,GAC1C,GAAI9B,EAEA8B,GAAI9B,OAAS8B,EAAI9B,MAAM+B,WACvB/B,EAAQhL,EAAQ8M,EAAI9B,MAAM+B,WAG1BuH,EAAMuE,WAAW7Y,GACjBqL,EAAO+B,wBAAwBkH,EAAM9I,OAAQxL,EAAQgc,IAAKhR,EAAO,SAAUqG,GACvEpN,EAAS3C,YAGb+J,EAAO4B,eAAeqH,EAAM9I,OAAQ8I,EAAM3H,GAAG3M,GAAUgL,EAAO,SAAUqG,GACpEpN,EAAS3C,gBAKzBP,EAAGa,IAAI+a,GAAW9a,KAAK,WACnB8Z,EAAOiB,uBAW1C,WACG,YAEAld,SAAQ6D,OAAO,eACVgV,UAAU,iBAAkB,eAAgB,SAAU,SAAU,SAAU,SAAUpG,EAAc9G,EAAQnF,EAAQuI,GAC/G,OACI+J,SAAU,KACVlE,OAAO,EACP3N,YAAa,+CACbnE,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GACnC3G,EAAMuI,YACNvI,EAAMjJ,OAASA,CACf,IAAIE,GAAY4G,EAAa3G,MAG7B8I,GAAMwI,UAAY,SAAUhN,EAAOtE,GAC/B,GACI+E,GADAwM,EAAK1R,EAAOwE,mBAAmBC,EAAOtE,EAE1C,IAAIuR,GAAMA,EAAGxM,MAAO,CAChB,GAAIhO,GAAIuN,EAAMU,YAAY,IAEtBD,GADAhO,GAAI,GAAMwa,EAAGxM,MAAMH,QAAQ,QAAS,EAC5BlK,EAAOuK,cAAcX,EAAMY,UAAU,EAAGnO,GAAK,IAAMwa,EAAGxM,OAEtDwM,EAAGxM,UAIfA,GAAQrK,EAAOuK,cAAcX,EAGjC,OAAOS,IAGX+D,EAAM0I,aAAe,SAAUC,EAAYnN,EAAOoN,GAC9C,GAAI3P,EACA0P,GAAWnN,QACXvC,EAAQ+G,EAAM6I,gBAAgB/M,QAAQ6M,EAAWnN,OAC7CvC,IAAS,GACT+G,EAAM6I,gBAAgBzb,KAAKub,EAAWnN,OAI9C,IAAIsN,GAAkB/R,EAAOwE,mBAAmBC,EAAOwE,EAAM9I,OAE7DyR,GAAW1M,MAAQ6M,EAAgB7M,MACnC0M,EAAWnN,MAAQA,EAEnBmN,EAAWI,aAAe9R,UAAWA,EAAWuE,MAAOmN,EAAWnN,OAClEmN,EAAW/M,IAAOkN,EAAgBlN,MAAQkN,EAAgBjN,YAAeiN,EAAgBlN,IAAM5J,OAI/FiH,EAAQ+G,EAAM6I,gBAAgB/M,QAAQN,GAClCvC,GAAQ,GACR+G,EAAM6I,gBAAgB/J,OAAO7F,EAAO,GAGnC2P,GACD5I,EAAM7F,UAId6F,EAAMgJ,UAAY,SAAUxN,GACxB,GAAIyN,KACJzN,GAAQA,GAASwE,EAAM6I,gBAAgB,GAEvCI,EAAEC,MAAQ,WACND,EAAEpd,MAAQ,GACVmU,EAAM7F,UAGV8O,EAAEhU,OAAS,WAEP,GAAIgE,GAAQ+G,EAAMuI,SAASzM,QAAQmN,EAC/BhQ,IAAQ,GACR+G,EAAMuI,SAASzJ,OAAO7F,EAAO,GAGjCA,EAAQ+G,EAAM6I,gBAAgB/M,QAAQmN,EAAEzN,OACpCvC,IAAS,GACT+G,EAAM6I,gBAAgBzb,KAAK6b,EAAEzN,OAEjCwE,EAAM7F,UAGV6F,EAAM0I,aAAaO,EAAGzN,GAAO,GAC7BwE,EAAMuI,SAASnb,KAAK6b,IAGxBlS,EAAOe,eAAeb,EAAW,SAAUC,GACnCA,IACA8I,EAAM9I,OAASA,EACf8I,EAAMmJ,UAAYvX,EAAO6Q,mBAAmBvL,GAC5C8I,EAAM6I,gBAAkB7I,EAAMmJ,UAAU3B,OAAO,SAAUS,GACrD,GAAIzG,GAAIzK,EAAOwE,mBAAmB0M,EAAK/Q,EACvC,OAAQsK,IAAiB,SAAZA,EAAEhH,QAAiC,SAAZgH,EAAEhH,YAIlDzD,EAAOgB,eAAed,EAAW,SAAUhG,GACvC+O,EAAMgJ,UAAU/X,EAAOmY,gBAW3BpJ,EAAM7F,OAAS,WACX,GAAIC,KAEJrD,GAAOe,eAAeb,EAAW,SAAUC,GACvC9L,QAAQ0D,QAAQkR,EAAMuI,SAAU,SAAUU,GACtC,GAAII,KACJ,IAAIJ,EAAEpd,MAAO,CACT,GAAIyd,GAASvS,EAAOwE,mBAAmB0N,EAAEzN,MAAOtE,EAC5CoS,KACmB,UAAfA,EAAOlZ,MAAqBkZ,EAAO9O,QAAW8O,EAAO1N,IAI/B,UAAf0N,EAAOlZ,MAAqC,QAAjBkZ,EAAO9O,OACzB,KAAZyO,EAAEpd,QACFwd,EAAYJ,EAAEzN,OAASyN,EAAEpd,OAEtByd,EAAO1N,MAAQ0N,EAAOzN,YAC7BwN,EAAYJ,EAAEzN,OAASyN,EAAEpd,MAElByd,EAAO1N,KAAO0N,EAAOzN,YAC5BwN,EAAYJ,EAAEzN,QAAU+N,OAAQN,EAAEpd,MAAO2d,SAAU,KAEnDH,EAAYJ,EAAEzN,OAASyN,EAAEpd,MAbT,KAAZod,EAAEpd,QACFwd,EAAYJ,EAAEzN,QAAU+N,OAAQN,EAAEpd,MAAO2d,SAAU,OAgBnEpe,QAAQiK,OAAO+E,EAAOiP,OAI9BlP,EAAOkJ,SAASjJ,GAChBD,EAAO2J,QAAQ,GACf9D,EAAMyJ,QAAQtP,eAM7B8J,UAAU,oBAAqB,SAAU,SAAU,SAAUlN,EAAQnF,GAClE,OACIsS,SAAU,KACVlE,OAAO,EACP3N,YAAa,mDACbnE,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GAWnC,QAAS+C,GAAgBxK,GACrB,MAAO,UAAU9E,EAAO9C,GACpB,MAAOP,GAAOC,SAAS4E,EAAK,SAAU0B,GAClC,GAAIrM,GAASqM,EAAErM,OACXqR,EAAO,EAEPA,GADApD,YAAmB7C,QACZ6C,EAAQjO,EAAOoH,IAEf6G,EAEXnI,EAAOqB,YAAYwD,EAAK0G,EAAM,SAAUvF,GACpCqM,EAAenY,EAAOmY,aACtBO,EAAW1Y,EAAOoH,EAElB,IAAIsE,KACJA,GAAEvC,QACF,IAAIwP,GAAQxP,EAAMD,MAClBwC,GAAEvC,MAAMyC,MAER,IAAIgN,KAKJ,IAJAA,EAAWT,IAAiBG,OAAQK,EAAOJ,SAAU,KACrD7M,EAAEvC,MAAMyC,IAAIzP,KAAKyc,GAGA,OAAb5Y,EAAOoH,IAAeiF,EAAEpG,OAAOjG,EAAOoH,KAAmC,UAA5BiF,EAAEpG,OAAOjG,EAAOoH,IAAIjI,KAAkB,CACnF,GAAI0Z,KACJA,GAAMH,IAAaJ,OAAQK,EAAOJ,SAAU,KAC5C7M,EAAEvC,MAAMyC,IAAIzP,KAAK0c,GAGrBnN,EAAEpF,MAAQ,GACVoF,EAAErF,KAAOA,EAGLP,EAAOJ,SAASiF,KAChBe,EAAE5F,EAAOJ,SAASiF,GAAKpF,KAAOO,EAAOJ,SAASiF,GAAK/P,OAGvDkL,EAAOoD,OAAOyB,EAAKe,EAAG,SAAU1E,EAAUJ,GAOtC,GANIP,EACA0I,EAAM+J,UAAY/J,EAAM+J,UAAU/d,OAAOiM,GAEzC+H,EAAM+J,UAAY9R,EAGlB8E,EAAK,CACL,GAAIiN,GAAUhK,EAAM+J,UAAUE,KAAK,SAAUve,GACzC,MAAOA,GAAQuF,EAAOoH,KAAO0E,EAAI9L,EAAOoH,KAGvC2R,IACDhK,EAAM+J,UAAUjL,OAAO,EAAG,EAAG/B,WA7DzDiD,EAAMkK,WAAalK,EAAMuG,MAAMD,EAAM4D,WACrC,IAAItO,GAAMoE,EAAMkK,WAAWtO,GAE3B,IAAKlQ,EAAQye,OAAb,CAIA,GAAIf,GAAe,GACfO,EAAW,GA8DXjS,EAAWgS,EAAgB1J,EAAMuG,MAAMD,EAAMK,SAEjD3G,GAAMoK,UAAW,EACjBpK,EAAMqK,eAAgB,EACtBrK,EAAM+J,aACN/J,EAAM7F,OAASzC,EAEfsI,EAAMsK,qBAAuB,SAAUle,GACnC,GAAIA,EAAU,CACV,GAAIoV,GAAI5P,EAAO6P,SAAS2H,EAAchd,EACtC,OAAIoV,IAAW,KAANA,GAAYA,EAAEhT,OAAS,EACrBgT,EAAI,KAAOpV,EAASud,GAAY,IAEhC,0BAA4Bvd,EAASud,GAAY,MAKpE3J,EAAMuK,mBAAqB,SAAUne,GACjC,GAAIA,EAAU,CACV,GAAIoV,GAAI5P,EAAO6P,SAAS2H,EAAchd,EACtC,OAAIoV,IAAW,KAANA,GAAYA,EAAEhT,OAAS,EACrBgT,EAEA,YAKnBxB,EAAMwK,cAAgB,SAAUpe,GAC5B,GAAiB4F,SAAb5F,EACA,MAAOA,GAASud,IAAa,SAIrC3J,EAAM/J,IAAI,iBAAmB2F,EAAK,WAC9BzF,QAAQC,IAAI,mBACZsB,MAGJhM,EAAQ4T,KAAK,MAAMmL,KAAK,SAAU,WAC9B,GAAIC,GAAMC,UAAU,GAAGC,MACnBF,GAAIxE,UAAYwE,EAAIG,aAAeH,EAAII,cACvCpT,EAASsI,EAAM+K,QAAUL,EAAIM,SAAS,GAAGA,SAASxc,OAAS,cAStF,WACG,YACApD,SAAQ6D,OAAO,eAAegV,UAAU,WAAY,WAChD,OACIC,SAAU,IACVlE,OAAO,EACP9R,KAAM,SAAU8R,EAAOtU,EAAS4a,EAAOK,GACnC,GAAIsE,GAAQvf,EAAQuf,OACpBvf,GAAQwf,IAAI,QAASD,GACrBvf,EAAQwf,IAAI,gBAAiB,YAC7Bxf,EAAQwf,IAAI,WAAY,UACxBxf,EAAQwf,IAAI,cAAe,iBAS1C,WACG,YACA9f,SAAQ6D,OAAO,eACVgV,UACG,eACC,WAAY,SAAUkH,GAOnB,QAASjd,GAAK8R,EAAOtU,EAASwE,GAO1Bib,EAASC,MAAM1f,EAAQsf,WAAWK,GAAG,IAAI9d,KACrC,WAEI7B,EAAQuJ,SAER+K,EAAQtU,EAAUwE,EAAa,OAjB3C,OACIhC,KAAMA,EACNgW,SAAU,WAsB7B,WACG,YAEA9Y,SAAQ6D,OAAO,eACVqD,WAAW,oBAAqB,SAAU,QAAS,YAAa,eAAgB,SAAU,cAAe,SAAU6R,EAAQ5U,EAAO8B,EAAWwM,EAAc9G,EAAQuU,GAChK,GAAIrU,GAAY4G,EAAa3G,MAC7BiN,GAAOyD,OAAS,SAChB7Q,EAAOC,SAASC,EAAW,SAAUqG,GACjC,GAAKA,EAAErM,OAAOoD,KAEP,CACH8P,EAAO1N,QACP,IAAI8U,GAASngB,QAAQ4Q,KAAKsB,EAC1B6G,GAAO7G,EAAIA,EACX6G,EAAOoH,OAASA,EAChBpH,EAAOyD,OAAS,SAChB0D,EAAY,kBAAmBnH,OAAQA,QAPvC9S,GAAUV,KAAK,UAAYsG,WAY9C,WACG,YAEA7L,SAAQ6D,OAAO,eACVqD,WAAW,oBAAqB,SAAU,eAAgB,OAAQ,WAAY,SAAU,SAAU6R,EAAQtG,EAAc2N,EAAMnF,EAAUtP,GACzIoN,EAAOjN,OAAS2G,EAAa3G,OAE7BH,EAAOgB,eAAeoM,EAAOjN,OAAQ,SAAUjG,GAC3CkT,EAAOlT,OAASA,EAChBkT,EAAO4C,OAAS9V,EAAO8V,SAG3B5C,EAAOsH,OAAS,SAAU7E,GACtB,GAAI8E,GAAM9E,EAAMxW,IAChB,OAAO,aAAcsb,EAAK,WAAa9E,EAAM3K,MAAQ,gBAAiByP,EAAK,WAItF,WACG,YAEAtgB,SAAQ6D,OAAO,eACVqD,WAAW,oBAAqB,SAAU,QAAS,eAAgB,YAAa,SAAU,cAAe,SAAU6R,EAAQ5U,EAAOsO,EAAcxM,EAAW0F,EAAQuU,GAChK,GAAIrU,GAAY4G,EAAa3G,OACzBmB,EAAKwF,EAAaxF,GAClB3B,EAAQmH,EAAanH,KAEzBK,GAAOC,SAASC,EAAW,SAAUqG,GACjCvG,EAAOqB,YAAYnB,EAAWoB,EAAI3B,EAAO,SAAUtK,GAC/C+X,EAAOwH,MAAMvf,GACb+X,EAAOyD,OAAS,SAChBzD,EAAO1N,MAAQrK,KACf,IAAImf,GAASngB,QAAQ4Q,KAAKsB,EAC1B6G,GAAO7G,EAAIA,EACX6G,EAAOoH,OAASA,EAChBD,EAAY,kBAAmBnH,OAAQA,QAK/CA,EAAOwH,MAAQ,SAAUvf,GACrB,IAAK,GAAIoK,KAAOpK,GAAU,CACtB,GAAIkW,GAAOlW,EAASoK,EAChB8L,KAAyB,gBAATA,IAAqBA,YAAgBrB,SACrDkD,EAAOwH,MAAMrJ,GAEL,MAARA,IACAlW,EAASoK,GAAOxE,gBAOvC,WACG,YAEA5G,SAAQ6D,OAAO,eACVqD,WAAW,kBAAmB,aAAc,SAAU,QAAS,YAAa,eAAgB,gBAAiB,WAAY,SAAU,SAAU,UAAW,YAAa,SAAU,UAAW,QAAS,aAAc,SAAUjD,EAAY8U,EAAQ5U,EAAO8B,EAAWwM,EAAc+N,EAAeC,EAAUC,EAAQ/U,EAAQzH,EAASyc,EAAWna,EAAQyS,EAASvG,EAAOkO,GAOjW,QAASC,GAAkB/U,GACvB,GAAIoF,GAAOD,OAAOC,KAAKpF,EACvB,KAAK,GAAIjJ,KAAKqO,GACV,GAAGpF,EAAOoF,EAAKrO,IAAK,CAChB,GAAIiJ,EAAOoF,EAAKrO,IAAIie,aAAc,CAC9B,GAAItE,GAASzD,EAAOyD,OAAOuE,aAC3BjV,GAAOoF,EAAKrO,IAAIme,WAAwB,WAAXxE,GAG7B1Q,EAAOoF,EAAKrO,IAAIoe,YAChBnV,EAAOoF,EAAKrO,IAAIgO,MAAQ+P,EAAWM,QAAQpV,EAAOoF,EAAKrO,IAAIoe,WAG/D,IAAIjc,GAAO8G,EAAOoF,EAAKrO,IAAImC,IACb,WAATA,GAA6B,WAATA,IAAsB8G,EAAOoF,EAAKrO,IAAI0N,YAC3DsQ,EAAkB/U,EAAOoF,EAAKrO,IAAI0N,aArBlD,GAAI1E,GAAY4G,EAAa3G,OACzBmB,EAAKwF,EAAaxF,GAClBkU,GAAW,CAEfpI,GAAOqI,gBAAkBld,EAAQmB,WAAW+b,iBAAmB,SAuB/DrI,EAAO7G,EAAIlS,QAAQ4Q,KAAKmI,EAAOoH,QAC/BU,EAAkB9H,EAAO7G,EAAEpG,QAE3BiN,EAAOjN,QACH9G,KAAQ,SACR6L,MAAShF,EACT2Q,OAAUzD,EAAOyD,OACjBjM,WAAcwI,EAAO7G,EAAEpG,QAG3BiN,EAAOrJ,KAAOlJ,EAAOiR,YAAYsB,EAAO7G,EAAErM,OAAO6J,MAEd,UAA/BqJ,EAAOyD,OAAOuE,eAA6BpV,EAAOJ,SAASM,IAAcF,EAAOJ,SAASM,GAAWpL,QACpGsY,EAAO1N,MAAMM,EAAOJ,SAASM,GAAWT,KAAOO,EAAOJ,SAASM,GAAWpL,OAG9EwD,EAAW4G,IAAI,mBAAoB,WACI,UAA/BkO,EAAOyD,OAAOuE,eAA6BpV,EAAOJ,SAASM,IAAcF,EAAOJ,SAASM,GAAWpL,QACpGsY,EAAO1N,MAAMM,EAAOJ,SAASM,GAAWT,KAAOO,EAAOJ,SAASM,GAAWpL,SAKlFkgB,EAAU/a,MAAMmT,EAAQlN,EAAWkN,EAAO1N,OAE1CoV,EAAS,WACL1H,EAAOhD,OAAO,QAAS,SAAUd,EAAQC,GAChClV,QAAQqhB,OAAOpM,EAAQC,KACxBiM,GAAW,KAEhB,IACJ,GAEHpI,EAAOuI,WAAa,WAChBrb,EAAUV,KAAK,UAAYsG,GAC3B5F,EAAUsb,KAAK,KAGnBxI,EAAOyI,WAAa,SAAU9R,EAAMrE,EAAOoW,GACvC1I,EAAOpP,WAAW,sBACd+F,EAAKgS,OAC8B,UAA/B3I,EAAOyD,OAAOuE,eAA6BhI,EAAO7G,EAAErM,OAAO2D,IAC3DmC,EAAO2B,YAAYzB,EAAWoB,EAAI5B,EAAO,SAAUwB,GACxB,OAAnBA,EAASL,SACT2U,GAAW,EACXzO,EAAMxJ,QAAQ,OAAQ,+BACtB6P,EAAOpP,WAAW,iBAAkBkD,EAASvI,MAC7CyU,EAAOpP,WAAW,iBAAkBkD,EAASvI,MACxCmd,IACDxb,EAAUV,KAAK,UAAYsG,GAC3B5F,EAAUsb,KAAK,QAIW,UAA/BxI,EAAOyD,OAAOuE,eAA6BhI,EAAO7G,EAAErM,OAAOoD,MAClE0C,EAAOiB,aAAaf,EAAWR,EAAO,SAAUwB,GACrB,OAAnBA,EAASL,SACT2U,GAAW,EACXzO,EAAMxJ,QAAQ,OAAQ,+BACtB6P,EAAOpP,WAAW,iBAAkBkD,EAASvI,MACxCmd,GAIDxb,EAAUV,KAAK,UAAYsG,EAAY,WAAagB,EAASvI,KAAK2M,OAAOC,KAAKrE,EAASvI,MAAM,KAC7F2B,EAAUsb,KAAK,MAJftb,EAAUV,KAAK,UAAYsG,GAC3B5F,EAAUsb,KAAK,SAU/BxI,EAAO4I,YAAcjS,EAAKgS,OAC1B3I,EAAO6I,iBAAmBlS,EAAKmS,OAC/B5b,EAAUsb,KAAK,SACff,EAAcsB,QAAU,IACxBtB,MAKRzH,EAAOgJ,OAAS,WACZ9I,EAAQ+I,QAAQC,QAGpBlJ,EAAOlO,IAAI,uBAAwB,SAAUkH,EAAOC,EAAMC,GACtD,GAAI8G,EAAOmJ,OAAOR,QAAUP,EAAU,CAClCpP,EAAMoQ,gBAEN,IAAIC,GAAgB1B,EAAO3N,MACvB9L,YAAa,uBACbC,WAAY,mBACZmb,KAAM,KACNzgB,SACIiW,MAAO,WACH,MAAOkB,GAAOlB,SAK1BuK,GAAc7V,OAAOpK,KAAK,WACtB4W,EAAOyI,WAAWzI,EAAOmJ,OAAQnJ,EAAO1N,QACzC,WACC8V,GAAW,CACX,IAAImB,GAAiBrc,EAAUsc,SAASnf,OAAS6C,EAAUsB,MAAMnE,MACjE6C,GAAUV,KAAKyM,EAAKhB,UAAUsR,SAO1CvJ,EAAOlO,IAAI,WAAY,SAAUkH,EAAOrC,GACpC,GAAmB,OAAfA,EAAK8M,OAAiB,CACtB,GAAIgG,GACAjb,EAAMmI,EAAKnI,IAEXuF,EAAS,SAAUvH,GACnB,MAAOA,GAAKqK,QAAQ,oBAAmB,SAAUiO,EAAG3L;AAChD,MAAOkD,YAAW2D,EAAO1N,MAAO6G,KAMxC,QAFA3K,EAAMuF,EAAOvF,GAELmI,EAAKD,OAAOiH,eAChB,IAAK,MACD8L,EAAOre,EAAM7C,IAAIiG,EACjB,MACJ,KAAK,MACDib,EAAOre,EAAMqF,IAAIjC,EAAKwR,EAAO1N,MAC7B,MACJ,KAAK,OACD,GAAIgB,KACAqD,GAAKrD,KACLrM,QAAQiK,OAAOoC,EAAMqD,EAAKrD,MAE1BA,EAAO0M,EAAO1N,MAElBmX,EAAOre,EAAM8E,KAAK1B,EAAK8E,EACvB,MACJ,KAAK,SACDmW,EAAOre,EAAMsJ,OAAOlG,EACpB,MACJ,SACI,KAAM,IAAIwF,OAAM,kCAEpByV,GACAA,EAAKtZ,QAAQ,SAAUC,GACnBnJ,QAAQ0D,QAAQuN,OAAOC,KAAK/H,GAAM,SAAUiC,GACxC2N,EAAO1N,MAAMD,GAAOjC,EAAIiC,OAE7B5I,MAAM,SAAUoH,GACfmB,QAAQvI,MAAMoH,SAGA,YAAf8F,EAAK8M,QACZiG,OAAO/S,EAAK8E,MAAMuE,EAAO1N,MAAO0N,EAAO7G,EAAEpG,UAIjD7H,EAAW4G,IAAI,0BAA2B,WACtCgW,EAAkB9H,EAAOjN,OAAOyE,YAChCwI,EAAOpP,WAAW,yBAIzBzC,WAAW,oBAAqB,SAAU,iBAAkB,QAAS,SAAU6R,EAAQ2J,EAAgB7K,GAEpGkB,EAAO4J,GAAK,WACRD,EAAeE,MAAM,OAGzB7J,EAAOgJ,OAAS,WACZW,EAAeG,QAAQ,iBAKtC,WACG,YACA7iB,SAAQ6D,OAAO,eACVqD,WAAW,mBAAoB,QAAS,SAAU,YAAa,YAAa,gBAAiB,SAAU/C,EAAO4U,EAAQ+J,EAAW7c,EAAWC,GAC7I6S,EAAOgK,OAAS,SAAU1c,GACtBH,EAAcS,MAAMN,EAAM,SAAU8C,GAC3BA,EAGDlD,EAAUV,KAAK,KAFfwT,EAAOiK,WAAa,0CAQvC,WACG,YACAhjB,SAAQ6D,OAAO,eAEVuY,OAAO,qBAAsB,WAC1B,MAAOqG,QAAOQ,qBAGjB/b,WAAW,kBAAmB,aAAc,SAAU,KAAM,gBAAiB,SAAU,SAAUjD,EAAY8U,EAAQ1X,EAAI6E,EAAeyF,GACrIoN,EAAOmK,kBAEPnK,EAAOmK,eAAelhB,KAAK,WACvB2J,EAAOF,UAAU,SAAUyG,GACvB6G,EAAOrN,WACP1L,QAAQ0D,QAAQwO,EAAG,SAAUpG,GACzBH,EAAOgB,eAAeb,EAAQ,SAAUjG,GACpCkT,EAAOrN,QAAQI,GAAUjG,EAEzBK,EAAcE,QAAQ,cAClBP,EAAO6T,UACP/N,EAAOmD,eAAehD,EAAQ,SAAU6F,GAC/BA,EAGDoH,EAAOrN,QAAQI,GAAQnE,WAAa,WAAamE,EAAS,WAAa6F,EAAI9L,EAAOoH,IAFlF8L,EAAOrN,QAAQI,GAAQnE,WAAa,WAAamE,EAAS,iBAYtFiN,EAAOuI,WAAa,SAAUvH,EAAMC,GAChC,MAAOA,GAAKrS,YAAc,WAAaoS,GAG3C/Z,QAAQM,QAAQ,QAAQW,MAAM,WAC1BgD,EAAW0F,WAAW,YAAa,oBAGvC1F,EAAW4G,IAAI,QAAS,SAAUkH,EAAOoR,GACrCnjB,QAAQ0D,QAAQqV,EAAOmK,eAAgB,SAAS5O,GAC5CA,MAEJyE,EAAOmK,oBAGXjf,EAAW4G,IAAI,SAAU,SAAUkH,EAAOoR,YAOrD,WACG,YACAnjB,SAAQ6D,OAAO,eAEVqD,WAAW,mBAAoB,SAAU,QAAS,SAAU,eAAgB,SAAU,YAAa,SAAU,SAAU,QAAS,UAAW,SAAU,SAAU6R,EAAQ5U,EAAO8X,EAAQxJ,EAAciO,EAAQza,EAAWO,EAAQmF,EAAQ+G,EAAOxO,EAAS6K,GACpP,GAAIqU,GAAsB,EAC1BrK,GAAOrG,MAAQA,EACfqG,EAAOvS,OAASA,EAChBuS,EAAOsK,eAAiB,WAExBtK,EAAOuK,QAAU,GACjBvK,EAAOjN,OAAS2G,EAAa3G,OAC7BiN,EAAOwK,QAAS,EAChBxK,EAAOyK,mBACPzU,EAAOmJ,aAEPa,EAAOhD,OAAO,YAAa,SAAUtV,GACjC,GAAcmG,SAAVnG,EACA,IAAK,GAAIoC,KAAKkW,GAAOzM,SACjByM,EAAOzM,SAASzJ,GAAGsZ,QAAU1b,IAKzCkL,EAAOC,SAASmN,EAAOjN,OAAQ,SAAUT,GAIrC,MAHA0N,GAAOlT,OAASwF,EAAMxF,OACtBkT,EAAO0K,WAAapY,EAAMS,OAEtBT,EAAMxF,OAAO6T,aACbzT,GAAUV,KAAK,MAKnBwT,EAAOlT,OAAO6d,oBACd3K,EAAOlT,OAAO6d,iBAAiB1hB,KAAK+W,EAAOlT,OAAOmY,cAC9CjF,EAAOlT,OAAO8d,qBACd5K,EAAOlT,OAAO6d,iBAAmB3K,EAAOlT,OAAO6d,iBAAiB9iB,OAAOmY,EAAOlT,OAAO8d,qBAGzF5K,EAAOhK,OAAS,SAAU7C,GACTtF,SAATsF,GACA6C,EAAO2J,QAAQxM,GAGnB6C,EAAOA,OAAOgK,EAAOjN,OAAQ,SAAUQ,EAAUG,EAAO7C,GAChD0C,IACAyM,EAAOzM,SAAWA,GAEtByM,EAAO6K,cAAgBnX,KAI/BsM,EAAO8K,aAAe9K,EAAO+K,iBAAmB5f,EAAQmB,WAAWwe,cAAgBT,EACnFrU,EAAO4J,SAASI,EAAO8K,cACvB9U,EAAO2J,QAAQ,GAGfK,EAAOhK,SAGPgK,EAAOgL,YAAc,WAEjB,GADAhL,EAAO8K,aAAe9K,EAAO+K,iBACzB/K,EAAOiL,YAAc,GAAKjL,EAAO8K,aAAe,EAAG,CACnD,GAAI3X,IAAS6M,EAAOiL,YAAc,GAAKjL,EAAO8K,YAC9C9U,GAAO2J,QAAQxM,OAEf6C,GAAO2J,QAAQ,EAEnB3J,GAAO4J,SAASI,EAAO8K,cACvB9K,EAAOhK,UAGXgK,EAAO9L,GAAK,SAAU3M,GAClB,MAAOA,GAAQyY,EAAOlT,OAAOoH,KAGjC8L,EAAOzN,MAAQ,SAAUhL,GACrB,MAAOA,GAAQyY,EAAOlT,OAAOyF,MAAM+B,WAGvC0L,EAAOkL,SAAW,SAAU3jB,GACxB,GAAI2jB,GAAWlL,EAAOlT,OAAOyF,OAASyN,EAAOlT,OAAOyF,MAAM+B,QAC1D,OAAO4W,IAAY3jB,EAAQyY,EAAOlT,OAAOyF,MAAM+B,WAGnD0L,EAAOjM,OAAS,SAAUxM,EAASwL,GAC/B,GAAIT,EAEAA,GADD/K,EAAQ4jB,IACC5jB,EAAQ4jB,IAERpY,CAEZ,IAAIvE,GAAM,WAAa8D,EAAQ,WAAa4X,mBAAmBlK,EAAO9L,GAAG3M,GAIzE,OAHIyY,GAAOkL,SAAS3jB,KAChBiH,GAAO,IAAM0b,mBAAmBlK,EAAOzN,MAAMhL,KAE1CiH,GAGXwR,EAAOI,WAAa,SAAU7Y,GAC1B,QAASA,EAAQyY,EAAOlT,OAAOoH,KAAqC,KAA9B3M,EAAQyY,EAAOlT,OAAOoH,MAGhE8L,EAAOoL,mBAAqB,SAAU/T,EAAO9P,GACzC,GAAIud,GAAIrX,EAAO6P,SAASjG,EAAO9P,EAC/B,OAAcsG,UAANiX,GAAyB,KAANA,EAAY,UAAYA,GAGvD9E,EAAOT,OAAS,SAAU8L,EAAU5L,GAChCzJ,EAAOwJ,UAAU6L,EAAU5L,GAC3BO,EAAOhK,OAAO,IAGlBgK,EAAON,QAAU,SAAU2L,GACvB,MAAOrV,GAAO0J,QAAQ2L,QAG1BrL,GAAOlO,IAAI,mBAAoB,SAAUkH,EAAOzN,GAC5CyU,EAAOhK,OAAO,QAItBgK,EAAOgE,YAAc,SAAU/T,GAC3B,GAAIgU,EACAA,IACAhU,EAAGgU,EAEP,IAAIoF,GAAgB1B,EAAO3N,MACvB9L,YAAa,sBACbC,WAAY,oBACZmb,KAAM,KACNzgB,SACIiW,MAAO,WACH,MAAOkB,GAAOlB,SAK1BuK,GAAc7V,OAAOpK,KAAK,WACtB6a,GAAM,EACNhU,GAAG,SAKdoT,OAAO,cAAe,OAAQ,SAAUgE,GACrC,MAAO,UAAUiE,GACb,MAAIA,GACOjE,EAAKkE,YAAYD,EAAKE,YAEtBF,MAOlBnd,WAAW,qBAAsB,SAAU,iBAAkB,QAAS,SAAU6R,EAAQ2J,EAAgB7K,GAErGkB,EAAO4J,GAAK,WACRD,EAAeE,MAAM,OAGzB7J,EAAOgJ,OAAS,WACZW,EAAeG,QAAQ,cAI9B3b,WAAW,2BAA4B,SAAU,iBAAkB,QAAS,SAAU6R,EAAQ2J,EAAgB7K,UAItH,WACG,YAEA7X,SAAQ6D,OAAO,eACVqD,WAAW,oBAAqB,SAAU,YAAa,gBAAiB,SAAU6R,EAAQ9S,EAAWC,GAClG,GAAIse,GAAS,WACTte,EAAcE,QAAQ,SAAUC,GAC5B0S,EAAO1S,KAAOA,IAGtBme,KACAzL,EAAOlO,IAAI,QAAS,SAAUkH,EAAOzN,GACjCkgB,MAGJzL,EAAO3R,OAAS,WACZlB,EAAckB,SACdnB,EAAUV,KAAK,kBAI9B,WACG,YACAvF,SAAQ6D,OAAO,eAEdqD,WAAW,sBAAuB,SAAU,eAAgB,aAAc,SAAU,UAAW,SAAU6R,EAAQtG,EAAcxO,EAAY0H,EAAQzH,GAChJ,GAAI2H,EACJkN,GAAOlO,IAAI,sBAAuB,SAAUkH,EAAOE,GAC/CpG,EAAYoG,EAAQ9E,OAAOrB,OASvBD,EACAF,EAAOC,SAASC,EAAW,SAAUqG,GAC7BA,EAAErM,OAAOyF,OACTyN,EAAO1L,SAAW6E,EAAErM,OAAOyF,MAAM+B,SACjC0L,EAAO0L,aAAe,UAAY1L,EAAO1L,SAAW,SACpD0L,EAAO2L,YAAcxS,EAAErM,OAAOyF,MAAMoZ,YAEhC/Y,EAAOJ,SAASM,GAChBkN,EAAO0L,aAAe,SAAW9Y,EAAOJ,SAASM,GAAWT,IAAM,IAAMO,EAAOJ,SAASM,GAAWpL,MAEhGyR,EAAErM,OAAOyF,MAAMqZ,UACd5L,EAAO6L,QAAS,EAChB7L,EAAO5N,SAAS4N,EAAO2L,YAAY,KAEnC3L,EAAO6L,QAAS,IAKxB7L,EAAO1L,SAAWzG,OAClBmS,EAAO0L,aAAe7d,OACtBmS,EAAO2L,YAAc9d,WAI7BmS,EAAO1L,SAAWzG,OAClBmS,EAAO0L,aAAe7d,OACtBmS,EAAO2L,YAAc9d,UAI7BmS,EAAO5N,SAAW,SAAU1K,GACxBsY,EAAO0L,aAAe,SAAW1L,EAAO1L,SAAW,IAAM5M,EACzDkL,EAAOR,SAAS4N,EAAO1L,SAAU5M,EAAOoL,GAExC5H,EAAW0F,WAAW,qBAG1BoP,EAAOvN,YAAc,WACjBuN,EAAO0L,aAAe,UAAY1L,EAAO1L,SAAW,SAEpD1B,EAAOH,YAAYK,GACnB5H,EAAW0F,WAAW,qBAE1BoP,EAAO1L,SAAWzG,aAIzB,WACG,YAEA5G,SAAQ6D,OAAO,eACVqD,WAAW,uBAAwB,SAAU,aAAc,UAAW,SAAU6R,EAAQ6H,EAAY1c,GAEjG6U,EAAO8L,WAAa,KAAM,MACtB3gB,EAAQmB,WAAWiD,gBACnByQ,EAAO+L,eAAgB,EACvBlE,EAAWrY,IAAIrE,EAAQmB,WAAWiD,kBAElCyQ,EAAO+L,eAAgB,EACvB/L,EAAOxQ,IAAM,SAAUwc,GACnBnE,EAAWrY,IAAIwc","file":"ri-backoffice.min.js","sourcesContent":["(function (angular) {\n\n    'use strict';\n\n    //Generic   \n\n    function makeArray(arr) {\n        if(!arr){\n            return [];\n        }\n        return angular.isArray(arr) ? arr : [arr];\n    }\n\n    //Angular\n\n    function provideRootElement(modules, element) {\n        element = angular.element(element);\n        modules.unshift(['$provide',\n            function ($provide) {\n                $provide.value('$rootElement', element);\n            }]);\n    }\n\n    function createInjector(injectorModules, element) {\n        var modules = ['ng'].concat(makeArray(injectorModules));\n        if (element) {\n            provideRootElement(modules, element);\n        }\n        return angular.injector(modules);\n    }\n\n    function bootstrapApplication(angularApp) {\n        angular.element(document).ready(function () {\n            angular.bootstrap(document, [angularApp]);\n        });\n    }\n\n    angular.lazy = function (app, modules) {\n\n        var injector = createInjector(modules),\n            $q = injector.get('$q'),\n            promises = [],\n            errorCallback = angular.noop,\n            loadingCallback = angular.noop,\n            doneCallback = angular.noop;\n\n        return {\n\n            resolve: function (promise) {\n                promise = $q.when(injector.instantiate(promise));\n                promises.push(promise);\n                return this;\n            },\n\n            bootstrap: function () {\n\n                loadingCallback();\n\n                return $q.all(promises)\n                    .then(function () {\n                        bootstrapApplication(app);\n                    }, errorCallback)\n                    .finally(doneCallback);\n            },\n\n            loading: function(callback){\n                loadingCallback = callback;\n                return this;\n            },\n\n            done: function(callback){\n                doneCallback = callback;\n                return this;\n            },\n\n            error: function(callback){\n                errorCallback = callback;\n                return this;\n            }\n        };\n\n    };\n\n})(angular);\n(function () {\r\n    'use strict';\r\n    var app = angular.module('injectorApp', ['ngRoute', 'ngBiscuit', 'schemaForm', 'datePicker', 'ui.select',\r\n            'ui.ace', 'ui.codemirror', 'ui.bootstrap', 'ngFileUpload', 'routeInjector-tinymce',\r\n            'ngDroplet', 'punchCard', 'nvd3ChartDirectives', 'flash', 'ngDialog', 'angular-loading-bar',\r\n            'pascalprecht.translate', 'ngCookies'],\r\n        ['$rootScopeProvider', function ($rootScopeProvider) {\r\n            $rootScopeProvider.digestTtl(15);\r\n        }])\r\n        .run(['$rootScope', 'configs', function ($rootScope, configs) {\r\n            $rootScope.configs = configs;\r\n        }]);\r\n\r\n    angular.lazy(\"injectorApp\")\r\n        .resolve(['$http', function ($http) {\r\n            return $http.get('/configs')\r\n                .then(function (resp) {\r\n                    app.constant('configs', resp.data);\r\n                });\r\n        }])\r\n        .resolve(['$http', '$q', function ($http, $q) {\r\n\r\n            var deferred = $q.defer();\r\n            $http.get('/admin/extensions').then(function (resp) {\r\n                app.constant('extensions', resp.data);\r\n\r\n                var extensions = resp.data;\r\n                var assets = $('asset-loader');\r\n                var scripts = [];\r\n\r\n                for (var i = 0; i < assets.length; i++) {\r\n                    var cache = [];\r\n\r\n                    var asset = assets[i];\r\n                    var src = asset.attributes.src.nodeValue;\r\n                    var type = asset.attributes.type.nodeValue;\r\n\r\n                    if (src === 'files') {\r\n                        if (extensions.files[type] && extensions.files[type].length) {\r\n                            cache = cache.concat(extensions.files[type]);\r\n                        }\r\n                    } else if (src === 'pages') {\r\n                        for (var j in extensions.pages) {\r\n                            var p = extensions.pages[j];\r\n                            if (p.backoffice) {\r\n                                if (p[type] && p[type].length) {\r\n                                    cache = cache.concat(p[type]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (type === 'css') {\r\n                        asset.appendChild(createCSSNodes(cache));\r\n                    } else if (type === 'js') {\r\n                        if (cache && cache.length) {\r\n                            scripts = scripts.concat(cache);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //$.getMultiScripts(scripts).done(function () {\r\n                //    deferred.resolve();\r\n                //});\r\n                getScripts(scripts, function () {\r\n                    deferred.resolve();\r\n                });\r\n\r\n            });\r\n\r\n            return deferred.promise;\r\n        }])\r\n        .bootstrap();\r\n\r\n    function createCSSNodes(obj) {\r\n        var div = document.createElement('div');\r\n        for (var i in obj) {\r\n            var link = document.createElement('link');\r\n            link.href = obj[i];\r\n            link.rel = 'stylesheet';\r\n            div.appendChild(link);\r\n        }\r\n        return div;\r\n    }\r\n\r\n    function getScripts(scripts, callback) {\r\n        if(!scripts ||  !scripts.length){\r\n            return callback();\r\n        }\r\n        var progress = 0;\r\n        var internalCallback = function () {\r\n            if (++progress == scripts.length) {\r\n                $.ajaxSetup({async:true});\r\n                callback();\r\n            }\r\n        };\r\n\r\n        $.ajaxSetup({async:false});\r\n        scripts.forEach(function (script) {\r\n            $.getScript(script, internalCallback);\r\n        });\r\n\r\n    }\r\n\r\n    $.getMultiScripts = function (arr, path) {\r\n        var _arr = $.map(arr, function (scr) {\r\n            return $.getScript((path || \"\") + scr);\r\n        });\r\n\r\n        _arr.push($.Deferred(function (deferred) {\r\n            $(deferred.resolve);\r\n        }));\r\n\r\n        return $.when.apply($, _arr);\r\n    };\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .config(['$routeProvider', 'configs', 'extensions', 'customMenuProvider', function ($routeProvider, configs, extensions, customMenuProvider) {\r\n\r\n            var authCheck = function ($q, $rootScope, $location, $http, loginProvider, configs) {\r\n                var defer = $q.defer();\r\n                if (configs.auth) {\r\n                    loginProvider.getUser(function (user) {\r\n                        if (!user) {\r\n                            $location.path('/login');\r\n                        } else {\r\n                            $http.defaults.headers.common.Authorization = 'BEARER ' + user.token;\r\n                            $rootScope.login = undefined;\r\n                        }\r\n                        defer.resolve();\r\n                    });\r\n\r\n                } else {\r\n                    $rootScope.allowedUser = true;\r\n                    defer.resolve();\r\n                }\r\n                return defer.promise;\r\n            };\n            authCheck.$inject = ['$q', '$rootScope', '$location', '$http', 'loginProvider', 'configs'];\r\n\r\n            var homePage = 'html/models.html';\r\n            if (configs.backoffice.home) {\r\n                homePage = configs.backoffice.home;\r\n            }\r\n\r\n            $routeProvider\r\n                .when('/', {\r\n                    templateUrl: homePage,\r\n                    controller: 'MainController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema', {\r\n                    templateUrl: 'html/model.html',\r\n                    controller: 'ModelController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/model/:schema/new', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'CreateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/update/:id/:shard', {\r\n                    templateUrl: 'html/create-and-update.html',\r\n                    controller: 'UpdateController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    },\r\n                    reloadOnSearch: false\r\n                })\r\n                .when('/model/:schema/graphs', {\r\n                    templateUrl: 'html/graphs.html',\r\n                    controller: 'GraphsController',\r\n                    resolve: {\r\n                        app: authCheck\r\n                    }\r\n                })\r\n                .when('/login', {\r\n                    // login / password\r\n                    templateUrl: 'html/login.html',\r\n                    controller: 'LoginController',\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.getUser(function (user) {\r\n                                if (user) {\r\n                                    $location.path('/');\r\n                                } else {\r\n                                    $rootScope.login = true;\r\n                                }\r\n                                defer.resolve();\r\n                            });\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                })\r\n                .when('/logout', {\r\n                    resolve: {\r\n                        app: ['$q', '$rootScope', '$location', 'loginProvider', function ($q, $rootScope, $location, loginProvider) {\r\n                            var defer = $q.defer();\r\n                            loginProvider.logout();\r\n                            $location.path('/');\r\n                            defer.resolve();\r\n                            return defer.promise;\r\n                        }]\r\n                    }\r\n                }).when('/settings', {\r\n                    templateUrl: 'html/settings.html',\r\n                    controller: 'SettingsController'\r\n                });\r\n\r\n\r\n            if (extensions && extensions.pages) {\r\n                var menu = [];\r\n                for (var i in extensions.pages) {\r\n                    var page = extensions.pages[i];\r\n\r\n                    if (page.backoffice) {\r\n                        $routeProvider.when('/' + page.url, {\r\n                            templateUrl: page.template,\r\n                            controller: page.controller,\r\n                            resolve: {\r\n                                app: authCheck\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (page.menu) {\r\n                        menu.push(page.menu);\r\n                    }\r\n                }\r\n                customMenuProvider.setCustomMenu(menu);\r\n            }\r\n\r\n            $routeProvider.otherwise({redirectTo: '/'});\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .config(['$translateProvider', '$translatePartialLoaderProvider', 'configs', function ($translateProvider, $translatePartialLoaderProvider, configs) {\n            var i18n = configs.backoffice.i18n;\n            $translatePartialLoaderProvider.addPart('login');\n            $translatePartialLoaderProvider.addPart('model');\n            $translatePartialLoaderProvider.addPart('models');\n            $translatePartialLoaderProvider.addPart('navbar');\n            $translatePartialLoaderProvider.addPart('search');\n            $translatePartialLoaderProvider.addPart('create_update');\n            //$translatePartialLoaderProvider.addPart('flash');\n            $translatePartialLoaderProvider.addPart('version_dialog');\n\n            if (i18n && i18n.length) {\n                for (var i = 0; i < i18n.length; i++) {\n                    $translatePartialLoaderProvider.addPart(i18n[i]);\n                }\n            }\n\n            $translateProvider.useLoader('$translatePartialLoader', {\n                urlTemplate: 'i18n/{part}/{lang}.json'\n            });\n            $translateProvider.registerAvailableLanguageKeys(['en', 'es']);\n            var def = \"en\";\n            $translateProvider.fallbackLanguage('en');\n            $translateProvider.useLocalStorage();\n            if (configs.backoffice.uniqueLanguage) {\n                def = configs.backoffice.uniqueLanguage;\n                $translateProvider.use(def);\n            }\n            $translateProvider.preferredLanguage(def);\n        }]);\n\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('customMenu', function () {\r\n        var menuElements;\r\n\r\n        this.setCustomMenu = function(value) {\r\n            menuElements = value;\r\n        };\r\n\r\n        this.$get = function(){\r\n            return menuElements;\r\n        };\r\n    });\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .provider('loginProvider', function () {\r\n\r\n            this.$get = ['$http', '$location', 'cookieStore', '$rootScope', function ($http, $location, cookieStore, $rootScope) {\r\n                var factory = {};\r\n                $http.defaults.headers.common['Client-Type'] = 'backoffice';\r\n                $http.defaults.headers.common.profile = 'back';\r\n                factory.login = function (userModel, cb) {\r\n                    $http.post('/auth/login', userModel).success(function (res) {\r\n                        var user = {};\r\n                        //user.name = userModel.login;\r\n                        user.login = userModel.login;\r\n                        user.role = res.role;\r\n                        user.token = res.token;\r\n                        var cookieOptions = {path: '/', end: Infinity};\r\n                        cookieStore.put('user', JSON.stringify(user), cookieOptions);\r\n                        $http.defaults.headers.common.Authorization = 'BEARER ' + res.token;\r\n                        $rootScope.$broadcast('login', user);\r\n                        $rootScope.allowedUser = true;\r\n                        cb(user);\r\n                    }).error(function (err) {\r\n                        var cookieOptions = {path: '/'};\r\n                        cookieStore.remove('user', cookieOptions);\r\n                        $rootScope.$broadcast('logout', undefined);\r\n                        $rootScope.allowedUser = false;\r\n                        cb(false);\r\n                    });\r\n                };\r\n\r\n                factory.getUser = function (cb) {\r\n                    var user = JSON.parse(cookieStore.get('user'));\r\n                    if (user && !$rootScope.allowedUser && user.login && (user.password || user.token)) {\r\n                        factory.login(user, function (logged) {\r\n                            if (logged) {\r\n                                angular.extend(user, logged);\r\n                                cb(logged);\r\n                            } else {\r\n                                cb(undefined);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        if (!user) {\r\n                            $rootScope.allowedUser = false;\r\n                        } else {\r\n                            //$rootScope.$broadcast('login', user);\r\n                        }\r\n\r\n                        cb(user);\r\n                    }\r\n                };\r\n\r\n                factory.logout = function () {\r\n                    var cookieOptions = {path: '/'};\r\n                    cookieStore.remove('user', cookieOptions);\r\n                    $location.path('/login');\r\n                    $rootScope.$broadcast('logout', undefined);\r\n                };\r\n\r\n                return factory;\r\n            }];\r\n        });\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .provider('models', function () {\r\n                var overrides = {};\r\n                var service = {};\r\n\r\n                this.override = function (_method, _function) {\r\n                    overrides[_method] = _function;\r\n                };\r\n\r\n                this.getService = function () {\r\n                    return service;\r\n                };\r\n\r\n\r\n                this.$get = ['$rootScope', '$http', 'Upload', 'configs', 'common', function ($rootScope, $http, Upload, configs, common) {\r\n\r\n                    var modelsConfig = {};\r\n                    var singlesCache = {};\r\n                    var shards = {};\r\n                    var prefix = '';\r\n\r\n                    $rootScope.$on('logout', function () {\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    $rootScope.$on('invalidate', function () {\r\n                        console.log(\"invalidate models provider\");\r\n                        service.invalidate();\r\n                    });\r\n\r\n                    service.invalidate = function () {\r\n                        shards = {};\r\n                        singlesCache = {};\r\n                        modelsConfig = {};\r\n                    };\r\n\r\n                    service.getHttp = function () {\r\n                        return $http;\r\n                    };\r\n\r\n                    service.getUpload = function () {\r\n                        return Upload;\r\n                    };\r\n\r\n                    service.setShard = function (key, value, model) {\r\n                        var shard = {};\r\n                        shard.key = key;\r\n                        shard.value = value;\r\n                        shard.model = model;\r\n                        shards[model] = shard;\r\n                    };\r\n\r\n                    service.getShard = function (model) {\r\n                        return shards[model];\r\n                    };\r\n\r\n                    service.removeShard = function (model) {\r\n                        delete shards[model];\r\n                    };\r\n\r\n                    service.getModels = function (cb) {\r\n                        prefix = configs.app.prefix;\r\n\r\n                        //AVOID CACHE (FOR CHANGING MODELS WHEN LOGIN LOGOUT :)\r\n                        $http.get('/schemas').then(function (schemas) {\r\n                            var models = schemas.data;\r\n                            cb(models);\r\n                        });\r\n                    };\r\n\r\n                    service.getModel = function (modelName, cb) {\r\n                        if (!modelsConfig[modelName] && cb) {\r\n                            $http.get('/schema/' + modelName).then(function (schema) {\r\n                                $http.get('/schema/' + modelName + '/formconfig').then(function (config) {\r\n                                    modelsConfig[modelName] = {};\r\n                                    modelsConfig[modelName].schema = schema.data;\r\n                                    modelsConfig[modelName].config = config.data;\r\n                                    cb(modelsConfig[modelName]);\r\n                                });\r\n                            });\r\n                        } else if (!modelsConfig[modelName] && !cb) {\r\n                            var schema = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName,\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            var config = JSON.parse($.ajax({\r\n                                type: \"GET\",\r\n                                url: '/schema/' + modelName + '/formconfig',\r\n                                async: false\r\n                            }).responseText);\r\n\r\n                            modelsConfig[modelName] = {};\r\n                            modelsConfig[modelName].schema = schema;\r\n                            modelsConfig[modelName].config = config;\r\n\r\n                            return modelsConfig[modelName];\r\n\r\n                        } else {\r\n                            if (cb) {\r\n                                cb(modelsConfig[modelName]);\r\n                            } else {\r\n                                return modelsConfig[modelName];\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    service.getModelElements = function (modelName, skip, limit, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var plural = (data.config.plural || data.config.path + 's' || modelName + 's');\r\n                            var body = {\r\n                                skip: skip,\r\n                                limit: limit\r\n                            };\r\n                            if (service.getShard(modelName)) {\r\n                                body[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + plural, body).success(function (elements) {\r\n                                cb(elements.result, elements.status.count);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getModelSchema = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.schema);\r\n                        });\r\n                    };\r\n\r\n                    service.getModelConfig = function (modelName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            return cb(data.config);\r\n                        });\r\n                    };\r\n\r\n                    service.postDocument = function (modelName, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.post(prefix + '/' + path, JSON.stringify(model)).then(function (response) {\r\n                                return cb(response);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.getUrl = function (modelName, cb) {\r\n                        throw new Error(\"Not implemented\");\r\n                    };\r\n\r\n                    service.getDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        if (!modelName) {\r\n                            return cb();\r\n                        }\r\n                        if (!id) {\r\n                            return cb();\r\n                        }\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var qParams = {\r\n                                params: {\r\n                                    type: \"back\"\r\n                                }\r\n                            };\r\n\r\n                            service.getModelConfig(modelName, function (cfg) {\r\n                                if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                    qParams.params[cfg.shard.shardKey] = shard;\r\n                                } else if (service.getShard(modelName)) {\r\n                                    qParams.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                                }\r\n\r\n                                $http.get(prefix + '/' + path + '/' + id, qParams).success(function (document) {\r\n                                    return cb(document, null);\r\n                                }).error(function (data) {\r\n                                    return cb(null, data);\r\n                                });\r\n                            });\r\n\r\n                        });\r\n                    };\r\n\r\n                    service.putDocument = function (modelName, id, model, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.put(prefix + '/' + path + '/' + id, JSON.stringify(model)).then(function (document) {\r\n                                return cb(document);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocument = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (cfg.path || modelName);\r\n\r\n                            var opts = {params: {}};\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.removeDocumentByMongoId = function (modelName, id, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModel(modelName, function (data) {\r\n                            var cfg = data.config;\r\n                            var path = (data.config.path || modelName);\r\n\r\n                            var opts = {\r\n                                params: {\r\n                                    type: 'raw'\r\n                                }\r\n                            };\r\n\r\n                            if (shard && cfg.shard && cfg.shard.shardKey) {\r\n                                opts.params[cfg.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                opts.params[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.delete(prefix + '/' + path + '/' + id, opts).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.uploadImage = function (modelName, id, fieldName, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: image,\r\n                                fileFormDataName: ['image']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.uploadFile = function (modelName, id, fieldName, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            Upload.upload({\r\n                                url: prefix + '/' + path + '/' + id + '/' + fieldName, //upload.php script, node.js route, or servlet url\r\n                                data: {index: index},\r\n                                file: file,\r\n                                fileFormDataName: ['file']\r\n                            }).progress(function (evt) {\r\n                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\r\n                            }).success(function (data, status, headers, config) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.deleteImage = function (modelName, id, index, image, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/image/' + image).then(cb);\r\n                        });\r\n                    };\r\n\r\n\r\n                    service.deleteFile = function (modelName, id, index, file, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            $http.delete(prefix + '/' + path + '/' + id + '/file/' + file).then(cb);\r\n                        });\r\n                    };\r\n\r\n                    service.getImageUrl = function (modelName, id, imageName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/image/' + imageName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getFileUrl = function (modelName, id, fileName, cb) {\r\n                        service.getModel(modelName, function (data) {\r\n                            var path = (data.config.path || modelName);\r\n                            var url = prefix + '/' + path + '/file/' + fileName + common.getRandomQuery();\r\n                            cb(url);\r\n                        });\r\n                    };\r\n\r\n                    service.getSingleModel = function (modelName, cb) {\r\n                        if (singlesCache[modelName]) {\r\n                            cb(singlesCache[modelName]);\r\n                        }\r\n                        else {\r\n                            service.search(modelName, {skip: 0, limit: 1}, function (elements, count) {\r\n                                if (count > 0) {\r\n                                    //We only cach if we found THE single document\r\n                                    singlesCache[modelName] = elements[0];\r\n                                    cb(elements[0]);\r\n                                } else {\r\n                                    //Do nothing from now\r\n                                    cb(null);\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n\r\n                    service.search = function (modelName, query, shard, cb) {\r\n                        if (!cb) {\r\n                            cb = shard;\r\n                            shard = undefined;\r\n                        }\r\n\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (shard && config.shard && config.shard.shardKey) {\r\n                                query[config.shard.shardKey] = shard;\r\n                            } else if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n                            $http.post(prefix + '/' + path, JSON.stringify(query)).success(function (documents) {\r\n                                if (documents.status.search_count !== undefined) {\r\n                                    cb(documents.result, documents.status.search_count);\r\n                                }\r\n                                else {\r\n                                    cb(documents.result, documents.status.count);\r\n                                }\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    service.export = function (modelName, format, searchQuery, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var query = {};\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n                            query.by = config.id;\r\n                            query.query = searchQuery || {};\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/export', query);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.import = function (modelName, format, file, query, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.plural || modelName);\r\n                            if (service.getShard(modelName)) {\r\n                                query[service.getShard(modelName).key] = service.getShard(modelName).value;\r\n                            }\r\n\r\n                            query.format = format;\r\n\r\n                            service.postAsForm(prefix + '/' + path + '/export', query, \"POST\", file);\r\n                            cb();\r\n                        });\r\n                    };\r\n\r\n                    service.postAsForm = function (path, params, method, file) {\r\n                        method = method || \"post\"; // Set method to post by default if not specified.\r\n\r\n                        if (file) {\r\n                            console.log(\"FILE\", file);\r\n                        }\r\n\r\n                        console.log(\"POST AS FORM\", path, params, method, file);\r\n\r\n                        // The rest of this code assumes you are not using a library.\r\n                        // It can be made less wordy if you use one.\r\n                        var form = document.createElement(\"form\");\r\n                        form.setAttribute(\"method\", method);\r\n                        form.setAttribute(\"action\", path + \"?token=\" + $http.defaults.headers.common.Authorization.replace(\"BEARER \", \"\"));\r\n\r\n                        for (var key in params) {\r\n\r\n                            if (params.hasOwnProperty(key)) {\r\n                                var hiddenField = document.createElement(\"input\");\r\n                                hiddenField.setAttribute(\"type\", \"hidden\");\r\n                                hiddenField.setAttribute(\"name\", key);\r\n                                if (typeof(params[key]) == \"object\") {\r\n                                    hiddenField.setAttribute(\"value\", JSON.stringify(params[key]));\r\n                                } else {\r\n                                    hiddenField.setAttribute(\"value\", params[key]);\r\n                                }\r\n\r\n                                form.appendChild(hiddenField);\r\n                            }\r\n                        }\r\n\r\n                        /*fieldAttr(params);\r\n\r\n                         function fieldAttr(obj, parent) {\r\n\r\n                         for (var key in obj) {\r\n                         var full = parent ? parent + \".\" + key : key;\r\n                         if(typeof(obj[key]) == \"object\"){\r\n                         fieldAttr(obj[key], full);\r\n                         }\r\n                         if (obj.hasOwnProperty(key)) {\r\n                         var hiddenField = document.createElement(\"input\");\r\n                         hiddenField.setAttribute(\"type\", \"hidden\");\r\n                         hiddenField.setAttribute(\"name\", full);\r\n                         hiddenField.setAttribute(\"value\", obj[full]);\r\n\r\n                         form.appendChild(hiddenField);\r\n                         }\r\n                         }\r\n                         }*/\r\n\r\n                        form.submit();\r\n                    };\r\n\r\n                    service.getGraph = function (modelName, graphID, cb) {\r\n                        service.getModelConfig(modelName, function (config) {\r\n                            var path = (config.path || modelName);\r\n                            $http.post(prefix + '/' + path + '/graphs/' + encodeURI(graphID)).success(function (data) {\r\n                                cb(data);\r\n                            });\r\n                        });\r\n                    };\r\n\r\n                    /**\r\n                     * Obatins point separated field {{field}} from schema {{schema}}\r\n                     * @param field\r\n                     * @param schema\r\n                     * @returns {*}\r\n                     */\r\n                    service.getFieldFromSchema = function (field, schema) {\r\n                        if (schema[field]) {\r\n                            return schema[field];\r\n                        } else {\r\n                            var elements = field.split('.');\r\n                            var retElem;\r\n                            for (var i in elements) {\r\n                                if (retElem && retElem.properties) {\r\n                                    retElem = retElem.properties[elements[i]];\r\n                                } else if (retElem && retElem.ref && retElem.denormalize && retElem.denormalize.indexOf(elements[i]) > -1) {\r\n                                    //Todo: Call api and resolve the model field\r\n                                    var refSchema = service.getModel(retElem.ref);\r\n                                    retElem = angular.copy(service.getFieldFromSchema(elements[i], refSchema.schema));\r\n                                    if (retElem && retElem.title) {\r\n                                        var index = field.lastIndexOf(\".\");\r\n                                        retElem.title = common.prettifyTitle(field.substring(0, index) + '.' + retElem.title);\r\n                                        //retElem.title = \"A \"+retElem.title;\r\n                                    }\r\n                                } else {\r\n                                    retElem = schema[elements[i]];\r\n                                }\r\n                            }\r\n\r\n                            return retElem;\r\n                        }\r\n                    };\r\n\r\n                    angular.forEach(Object.keys(overrides), function (key) {\r\n                        service[key] = overrides[key];\r\n                    });\r\n\r\n                    return service;\r\n                }];\r\n            }\r\n        );\r\n}());\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .factory('selectCacheService', function () {\n            return {\n                TIMEOUT_MS: 750,\n                timers: {},\n                cache: {}\n            };\n        })\n        .provider('selectCache', function () {\n            this.$get = ['$rootScope', 'models', 'selectCacheService', function ($rootScope, models, selectCacheService) {\n                var provider = {};\n\n                $rootScope.$on('$routeChangeStart', function (event, next, current) {\n                    if (next != current) {\n                        selectCacheService.cache = {};\n                        angular.forEach(Object.keys(selectCacheService.timers), function (m) {\n                            clearTimeout(selectCacheService.timers[m]);\n                            delete selectCacheService.timers[m];\n                        });\n                        //console.log(\"[SelectCache] CACHE CLEARED\");\n                    }\n                });\n\n                provider.search = function (modelName, b, shard, cb) {\n                    var body = JSON.stringify(b);\n                    //console.log(\"[SelectCache] POST FROM SELECT\", modelName, b);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].posts) {\n                        selectCacheService.cache[modelName].posts = {};\n                    }\n\n                    var cached = selectCacheService.cache[modelName].posts[body];\n                    if (!cached) {//A new query\n                        selectCacheService.cache[modelName].posts[body] = {}; //CALLBACKS\n                        selectCacheService.cache[modelName].posts[body].cbks = [cb]; //CALLBACKS\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP POST\", modelName, b);\n                        models.search(modelName, b, shard, function (response, count) {\n                            //console.log(\"[SelectCache] POST SELECT RESULT\", modelName, b, {\n                            //    count: count,\n                            //    response: response\n                            //});\n                            selectCacheService.cache[modelName].posts[body].res = {\n                                response: response,\n                                count: count\n                            };\n                            angular.forEach(selectCacheService.cache[modelName].posts[body].cbks, function (cbk) {\n                                cbk(response, count);\n                            });\n                            selectCacheService.cache[modelName].posts[body].cbks = [];\n                        });\n\n                    } else if (!cached.res && cached.cbks) {//Not finished query\n                        cached.cbks.push(cb);\n                        //console.log(\"[SelectCache] ADDED CB FOR POST\", modelName, b);\n                    } else { //Finished query\n                        cached.cbks.push(cb);\n                        angular.forEach(cached.cbks, function (cbk) {\n                            //console.log(\"[SelectCache] CACHED POST\", modelName, b, {\n                            //    count: cached.res.count,\n                            //    response: cached.res.response\n                            //});\n                            cbk(cached.res.response, cached.res.count);\n                        });\n                        cached.cbks = [];\n                    }\n                };\n\n                provider.getDocument = function (modelName, id, shard, cb) {\n                    //console.log(\"[SelectCache] GET FROM SELECT\", modelName, id);\n\n                    if (!selectCacheService.cache[modelName]) {\n                        selectCacheService.cache[modelName] = {};\n                    }\n\n                    if (!selectCacheService.cache[modelName].gets) {\n                        selectCacheService.cache[modelName].gets = {};\n                    }\n\n                    if (id) {\n                        if (!selectCacheService.cache[modelName].gets[id]) {\n                            selectCacheService.cache[modelName].gets[id] = {};\n                        }\n\n                        if (!selectCacheService.cache[modelName].gets[id].cbks) {\n                            selectCacheService.cache[modelName].gets[id].cbks = [];\n                        }\n\n                        if (selectCacheService.cache[modelName].gets[id].result) {\n                            //console.log(\"[SelectCache] CACHED VALUE\", modelName, id, selectCacheService.cache[modelName].gets[id].result);\n                            cb(selectCacheService.cache[modelName].gets[id].result);\n                        } else if (selectCacheService.cache[modelName].gets[id].cbks.indexOf(cb) == -1) {\n                            selectCacheService.cache[modelName].gets[id].cbks.push(cb);\n                            //console.log(\"[SelectCache] ADDED CB FOR GET\", modelName, id);\n\n                            if (selectCacheService.timers[modelName]) {\n                                clearTimeout(selectCacheService.timers[modelName]);\n                            }\n\n                            //TODO: Possible bug, ASYNC MODELNAME && SHARD !!!!!\n                            selectCacheService.timers[modelName] = setTimeout(function(){\n                                httpCall(modelName, shard);\n                            }, selectCacheService.TIMEOUT_MS);\n                        }\n                    } else{\n                        //WE HAVE TO RELEASE THE GETDOCUMENT CALLBACK!!!\n                        cb();\n                    }\n                };\n\n                function httpCall(model, shard) {\n                    models.getModelConfig(model, function (cfg) {\n                        var q = {};\n                        if (shard && cfg.shard.shardKey) {\n                            q[cfg.shard.shardKey] = shard;\n                        }\n\n                        var keys = Object.keys(selectCacheService.cache[model].gets);\n                        if (keys.length == 1) {\n                            q[cfg.id] = keys[0];\n                        } else {\n                            q.$or = [];\n                            angular.forEach(keys, function (id) {\n                                if (!selectCacheService.cache[model].gets[id].result) {\n                                    var singleQ = {};\n                                    singleQ[cfg.id] = id;\n                                    q.$or.push(singleQ);\n                                }\n                            });\n                        }\n\n                        //console.log(\"[SelectCache] >>>>>>>>>>>>>> HTTP GETS\", model, q);\n                        models.search(model, {query: q}, function (result, count) {\n                            //console.log(\"[SelectCache] GET SELECT RESULT\", model, q, result);\n                            angular.forEach(result, function (doc) {\n                                var id = doc[cfg.id];\n                                selectCacheService.cache[model].gets[id].result = doc;\n                            });\n\n                            angular.forEach(Object.keys(selectCacheService.cache[model].gets), function (idKey) {\n                                var getObj = selectCacheService.cache[model].gets[idKey];\n                                if (getObj.cbks) {\n                                    angular.forEach(getObj.cbks, function (cb) {\n                                        cb(getObj.result);\n                                    });\n                                    delete getObj.cbks;\n                                }\n                            });\n                        });\n                    });\n                }\n\n                return provider;\n            }];\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('httpResponseInterceptor', ['$q', '$location', '$routeParams', 'flash', '$injector', 'configs', function ($q, $location, $routeParams, flash, $injector, configs) {\r\n\r\n            return {\r\n                response: function (response) {\r\n                    //console.log(response);\r\n                    if (response.headers(\"routeinjector\") && (response.headers(\"routeinjector\") !== configs.backoffice.version)) {\r\n                        var ngDialog = $injector.get(\"ngDialog\");\r\n                        if (ngDialog.getOpenDialogs().length === 0) {\r\n                            ngDialog.open({\r\n                                template: \"dialogVersionMismatch\",\r\n                                className: 'ngdialog-theme-default ngdialog-theme-custom'\r\n                            });\r\n                        }\r\n                    }\r\n                    if (response.status === 401) {\r\n                        console.log(\"Response 401\");\r\n                    } else if (response.status === 201) {\r\n                        flash.success(\"Done\", \"Document saved successfully\");\r\n                    }\r\n                    return response || $q.when(response);\r\n                },\r\n                responseError: function (rejection) {\r\n\r\n                    var models = $injector.get(\"models\");\r\n\r\n                    var modelName = $routeParams.schema;\r\n                    var modelId = $routeParams.id;\r\n\r\n                    var errorInReferencedProperty;\r\n                    var prefix = configs.app.prefix;\r\n\r\n                    if (modelName) {\r\n                        models.getModelConfig(modelName, function (model) {\r\n                            var path = \"/\" + model.path + \"/\" + modelId;\r\n                            if (prefix) {\r\n                                path = \"/\" + path;\r\n                            }\r\n\r\n                            errorInReferencedProperty = path !== rejection.config.url;\r\n                            handleError(errorInReferencedProperty);\r\n\r\n                        });\r\n                    } else {\r\n                        handleError(true);\r\n                    }\r\n\r\n                    function handleError(ignoreError) {\r\n                        function redirectError() {\r\n                            if ($location.url() != \"/login\" && $location.url() != \"/logout\" && $location.url() != \"/\") {\r\n                                if ($routeParams.schema) {\r\n                                    $location.path('/model/' + $routeParams.schema);\r\n                                } else {\r\n                                    $location.path('/');\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (rejection.status === 401) {\r\n                            console.log(\"Response Error 401\", rejection);\r\n                            redirectError();\r\n\r\n                            if ($location.url() != \"/login\") {\r\n                                flash.error(\"Unauthorized\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (rejection.status === 500) {\r\n                            flash.error(\"Internal server error\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 400) {  //Client error\r\n                            flash.error(\"Bad Request\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && !ignoreError) {\r\n                            redirectError();\r\n                            flash.error(\"Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 404 && ignoreError) {\r\n                            flash.warning(\"Property Not Found\", JSON.stringify(rejection.data));\r\n                        } else if (rejection.status === 403) {\r\n                            if (rejection.data && rejection.data.errors) {\r\n                                var errors = [];\r\n                                angular.forEach(Object.keys(rejection.data.errors), function (e) {\r\n                                    errors.push(\"<strong>\" + e + \"</strong> validation failed. Caused by: \" + rejection.data.errors[e].message);\r\n                                });\r\n                                errors.splice(0, 0, \"Validation Error \" + rejection.status + \"\");\r\n                                flash.error.apply(this, errors);\r\n                            } else {\r\n                                flash.error(\"Validation Error \" + rejection.status + \"\", JSON.stringify(rejection.data));\r\n                            }\r\n                        } else if (Math.floor(rejection.status / 100) == 4 || Math.floor(rejection.status / 100) == 5) {\r\n                            redirectError();\r\n                            flash.error(\"Error \" + rejection.status, JSON.stringify(rejection.data));\r\n                        }\r\n                    }\r\n\r\n                    return $q.reject(rejection);\r\n                }\r\n            };\r\n        }\r\n        ])\r\n        .config(['$httpProvider', function ($httpProvider) {\r\n            //Http Interceptor to check failures\r\n            $httpProvider.interceptors.push('httpResponseInterceptor');\r\n        }]);\r\n}());\r\n\n//(function () {\r\n//    'use strict';\r\n//    angular.module('injectorApp')\r\n//        .factory('flash', function ($rootScope) {\r\n//            var queue = [];\r\n//            var currentMessage = \"\";\r\n//\r\n//            $rootScope.$on(\"$routeChangeSuccess\", function () {\r\n//                currentMessage = queue.shift() || \"\";\r\n//            });\r\n//\r\n//            return {\r\n//                setMessage: function (message) {\r\n//                    queue.push(message);\r\n//                },\r\n//                getMessage: function () {\r\n//                    return currentMessage;\r\n//                }\r\n//            };\r\n//        });\r\n//}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('dependsOn', ['$http', 'configs', 'common', 'models', function ($http, configs, common, models) {\r\n        var factory = {};\r\n\r\n        factory.find = function (obj) {\r\n            var depArr = [];\r\n            function innerDependsOn(obj, index) {\r\n                if (typeof obj == \"object\") {\r\n                    $.each(obj, function (k, v) {\r\n                        // k is either an array index or object key\r\n                        if (k == 'dependsOn') {\r\n                            depArr.push({\r\n                                path: index,\r\n                                field: v.field,\r\n                                params: v.params,\r\n                                func: v.func\r\n                            });\r\n                        }\r\n                        if (!index) {\r\n                            index = k;\r\n                        }\r\n                        else {\r\n                            index = index + '.' + k;\r\n                        }\r\n                        innerDependsOn(v, index);\r\n                        var indexArray = index.split('.');\r\n                        indexArray.pop();\r\n                        index = indexArray.join('.');\r\n                    });\r\n                }\r\n                else {\r\n                    var indexArray = index.split('.');\r\n                    indexArray.pop();\r\n                    index = indexArray.join('.');\r\n                }\r\n            }\r\n\r\n            innerDependsOn(obj);\r\n            return depArr;\r\n        };\r\n\r\n        factory.apply = function (scope, modelName, doc) {\r\n            function updateFunc(modelConfig, dependsValue, arrayIndex) {\r\n                return function(newVal, oldVal) {\r\n                    if (newVal) {\r\n                        //configs.getRoutesConfig(function (c) {\r\n                            var url = configs.app.prefix + '/_' + modelConfig.path + '/' + dependsValue.func ;\r\n                            var body = {};\r\n                            angular.forEach(dependsValue.params, function (param) {\r\n                                body[param]= safeAccess(doc, param);\r\n                            });\r\n\r\n                            /*if(arrayIndex !== undefined){ //TODO: I'm not sure...\r\n                                url += '/' + arrayIndex;\r\n                            }*/\r\n\r\n                            $http.post(url, body).success(function (data) {\r\n                                var replaced = dependsValue.path.replace(/properties\\./g, '');\r\n\r\n                                if(arrayIndex !== undefined){\r\n                                    replaced = replaced.replace(/\\.items/g, '[' + arrayIndex + ']');\r\n                                }\r\n\r\n                                common.setField(replaced, doc, data);\r\n                            });\r\n                        //});\r\n                    }\r\n                };\r\n            }\r\n\r\n\r\n            models.getModel(modelName, function (m) {\r\n                var depArr = factory.find(m.schema);\r\n                $.each(depArr, function (k, v) {\r\n                    if ((/(this\\.)/).test(v.field)) {\r\n                        var path = v.path.replace(/properties\\./g, '');\r\n                        var root = path.split('.')[0];\r\n                        var targetField = v.field.replace(/(this\\.)/, \"\");\r\n\r\n                        if ((/(items)/).test(path)) { //Is an array\r\n                            scope.$watchCollection(\"model.\" + root, function (nV, oV) {\r\n                                if (nV && nV instanceof Array) {\r\n                                    for (var i in nV) {\r\n                                        var normPath = root + \"[\" + i + \"].\" + targetField;\r\n                                        for (var p in v.params) {\r\n                                            v.params[p] = normPath;\r\n                                        }\r\n                                        scope.$watch(\"model.\" + normPath, updateFunc(m.config, angular.copy(v), angular.copy(i)));\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else{ // Is an object\r\n                            var normPath = root + \".\" + targetField;\r\n                            scope.$watch('model' + '.' + normPath, updateFunc(m.config, angular.copy(v)));\r\n                        }\r\n                    } else {\r\n                        scope.$watch('model' + '.' + v.field, updateFunc(m.config, v));\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        return factory;\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('common', ['$rootScope', function ($rootScope) {\r\n\r\n            var factory = {};\r\n\r\n            factory.hasAngularVariable = function (url) {\r\n                return (/\\{{(.*)\\}}/).test(url);\r\n            };\r\n\r\n            factory.deAngularizeUrl = function (doc, url) {\r\n                return url.replace(/\\{{(.*)\\}}/g, function (ng, matched) {\r\n\r\n                    var f = factory.getField(matched, doc);\r\n                    return f;\r\n                });\r\n            };\r\n\r\n            factory.getAngularVariables = function (url) {\r\n                return /\\{{(.*)\\}}/.exec(url)[1];\r\n            };\r\n\r\n            factory.prettifyTitle = function (title, separator) {\r\n                title = title || \"\";\r\n                separator = separator || \".\";\r\n                return title\r\n                    // look for \".\"  user.age will be User -> Age\r\n                    //TODO: Look for separator instead of \".\"\r\n                    .replace(/(\\.([a-z]|[A-Z]))/g, function (str) {\r\n                        return \" <i class='fa fa-angle-right'></i> \" + str.replace(\".\", \"\").toUpperCase();\r\n                    })\r\n                    // insert a space before all caps\r\n                    .replace(/([A-Z])/g, ' $1')\r\n                    // uppercase the first character\r\n                    .replace(/^./, function (str) {\r\n                        return str.toUpperCase();\r\n                    });\r\n            };\r\n\r\n            /**\r\n             * Gets field value in point separated {{field}} from the model {{element}}. Also accepts [] notation.\r\n             * @param field\r\n             * @param element\r\n             * @returns {*}\r\n             */\r\n            factory.getField = function (field, element) {\r\n                if (element) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ret = element;\r\n                        var returnArray;\r\n                        var parentArr;\r\n                        for (var path in splitted) {\r\n\r\n                            //Method for extrat array[].a fields or array[0].a fields.\r\n                            if ((/(\\[\\d*\\])/).test(splitted[path])) {\r\n                                //Is an array !!!\r\n                                var rootElem = splitted[path].replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = splitted[path].match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                if (ret) {\r\n                                    if (index) {\r\n                                        ret = ret[rootElem][index];\r\n                                    }\r\n                                    else {\r\n                                        parentArr = rootElem;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parentArr) {\r\n                                    var tmp = ret;\r\n                                    returnArray = [];\r\n                                    for (var elem in tmp[parentArr]) {\r\n                                        returnArray.push(tmp[parentArr][elem][splitted[path]]);\r\n                                    }\r\n                                } else {\r\n                                    if (ret) {\r\n                                        ret = ret[splitted[path]];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (returnArray) {\r\n                            return returnArray;\r\n                        }\r\n                        return ret;\r\n                    } else {\r\n                        return element[field];\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Sets value {{value}} to model {{model}} in the point sepparated field {{field}}\r\n             * @param field\r\n             * @param model\r\n             * @param value\r\n             */\r\n            factory.setField = function (field, model, value) {\r\n                if (model) {\r\n                    var splitted = field.split('.');\r\n                    if (splitted instanceof Array && splitted.length > 0) {\r\n                        var ref = model;\r\n                        for (var i = 0; i < splitted.length; i++) {\r\n                            var path = splitted[i];\r\n                            if ((/(\\[\\d*\\])/).test(path)) {\r\n                                var rootElem = path.replace(/(\\[\\d*\\])/, \"\");\r\n                                var index = path.match(/(\\d*)(?=\\])/)[0];\r\n\r\n                                var newPath;\r\n                                if (index === undefined) {\r\n                                    for (var arrInd in ref[rootElem]) {\r\n                                        newPath = splitted[i + 1];\r\n                                        factory.setField(newPath, ref[rootElem][arrInd], value);\r\n                                    }\r\n                                } else {\r\n                                    newPath = splitted[i + 1];\r\n                                    factory.setField(newPath, ref[rootElem][index], value);\r\n                                }\r\n                            } else {\r\n                                if (i < splitted.length - 1) {\r\n                                    if (!ref[path]) {\r\n                                        ref[path] = {};\r\n                                    }\r\n                                    ref = ref[path];\r\n                                } else {\r\n                                    ref[path] = value;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Obatins point separated field {{field}} from schema {{schema}}\r\n             * @param field\r\n             * @param schema\r\n             * @returns {*}\r\n             */\r\n            /*factory.getFieldFromSchema = function (field, schema) {\r\n             if (schema[field]) {\r\n             return schema[field];\r\n             } else {\r\n             var elements = field.split('.');\r\n             var retElem;\r\n             for (var i in elements) {\r\n             if (retElem && retElem.properties) {\r\n             retElem = retElem.properties[elements[i]];\r\n             } else if (retElem && retElem.denormalize && retElem.denormalize.indexOf(elements[i]) > -1) {\r\n             //Todo: Call api and resolve the model field\r\n             var refSchema = models.getModel(retElem.ref);\r\n             retElem = getFieldFromSchema(elements[i], refSchema.schema);\r\n             } else {\r\n             retElem = schema[elements[i]];\r\n             }\r\n             }\r\n             return retElem;\r\n             }\r\n             };*/\r\n\r\n            /**\r\n             * Obtains all the keys of an schema (using {{separator}} as nested level indicator)\r\n             * @param schema\r\n             * @param separator\r\n             * @returns {Array}\r\n             */\r\n            factory.getAllSchemaFields = function (schema, separator) {\r\n                separator = separator || \".\";\r\n                var fields = [];\r\n\r\n                function searchFields(obj, parent) {\r\n                    var keys = Object.keys(obj);\r\n                    angular.forEach(keys, function (k) {\r\n                        if (obj[k].properties) {\r\n                            searchFields(obj[k].properties, parent ? (parent + separator + k) : k);\r\n                        } else if (obj[k].denormalize) {\r\n                            angular.forEach(obj[k].denormalize, function (field) {\r\n                                fields.push((parent ? (parent + separator) : \"\") + k + separator + field);\r\n                            });\r\n                        } else {\r\n                            fields.push(parent ? (parent + separator + k) : k);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                searchFields(schema);\r\n\r\n                return fields;\r\n            };\r\n\r\n            /**\r\n             * Process the form and returns the schema form for the schemaForm module\r\n             * @param form\r\n             * @param submitButtons\r\n             * @returns {*|string[]}\r\n             */\r\n            factory.processForm = function (form, submitButtons) {\r\n                var showSubmitButtons = (submitButtons === undefined || submitButtons);\r\n                var innerForm;\r\n\r\n                if (form && form.tabs) {\r\n                    innerForm = innerForm || [];\r\n                    innerForm.push({\r\n                        \"type\": \"tabs\",\r\n                        \"tabs\": form.tabs\r\n                    });\r\n                } else if (form && form.items) {\r\n                    innerForm = form.items;\r\n                }\r\n\r\n                innerForm = innerForm || [\"*\"];\r\n\r\n                //TODO: Keep this comment out to wait if someone complains of missing feature\r\n                //if (showSubmitButtons) {\r\n                //    var hasSubmitButton = false;\r\n                //    angular.forEach(innerForm, function (item) {\r\n                //        if (item.type == \"submit\") {\r\n                //            hasSubmitButton = true;\r\n                //        }\r\n                //    });\r\n                //\r\n                //    if (!hasSubmitButton) {\r\n                //        innerForm.push({\r\n                //            type: \"submit\",\r\n                //            title: \"Save\"\r\n                //        });\r\n                //    }\r\n                //\r\n                //}\r\n\r\n                return innerForm;\r\n            };\r\n\r\n            factory.randomNumber = function () {\r\n                return (new Date()).getTime();\r\n            };\r\n\r\n            factory.getRandomQuery = function () {\r\n                return '?r=' + factory.randomNumber();\r\n            };\r\n\r\n            return factory;\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .factory('search', ['$rootScope', 'models', function ($rootScope, models) {\r\n            var query = {};\r\n\r\n            return {\r\n                setQuery: function (q) {\r\n                    query.query = q;\r\n                },\r\n                clearQuery: function() {\r\n                    this.setQuery({});\r\n                },\r\n                getQuery: function () {\r\n                    return query.query;\r\n                },\r\n                setSortBy: function (sort) {\r\n                    query.sortBy = sort;\r\n                },\r\n                addSortBy: function(field, asc) {\r\n                    query.sortBy = {};\r\n                    query.sortBy[field] = asc ? 1 : -1;\r\n                },\r\n                getSort: function(field) {\r\n                    if(query.sortBy) {\r\n                        return query.sortBy[field];\r\n                    } else {\r\n                        return undefined;\r\n                    }\r\n                },\r\n                setSkip: function(skip){\r\n                    query.skip = skip;\r\n                },\r\n                setLimit: function(limit){\r\n                    query.limit = limit;\r\n                },\r\n                search: function (schema,  callback) {\r\n                    models.search(schema, query, function (elements, count) {\r\n                        callback(elements, count, null);\r\n                    });\r\n                },\r\n                searchAndGroup: function(schema, callback) {\r\n                    //TODO: Montar la query con grupos\r\n                    //TODO: Volver al modelController y añadir una columna de grupo (p.ej. count)\r\n                    //TODO: Pintar !!\r\n                }\r\n            };\r\n\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('sideMenu', function () {\r\n            return {\r\n                restrict: 'E',\r\n                scope: false,\r\n                templateUrl: 'html/side-menu.html',\r\n                controller: ['$scope', '$routeParams', '$location', 'common', 'models', 'customMenu', '$window', '$rootScope', function ($scope, $routeParams, $location, common, models, customMenu, $window, $rootScope) {\r\n                    $scope.common = common;\r\n\r\n                    $scope.$on(\"$routeChangeStart\", function (event, next, current) {\r\n                        if (next.params.schema) {\r\n                            $scope.actualSchema = next.params.schema;\r\n                        }\r\n                    });\r\n                    $scope.isDisabled = false;\r\n                    $scope.isOpen = false;\r\n\r\n                    var render = function () {\r\n                        $scope.sections = new Sections();\r\n\r\n                        angular.forEach(customMenu, function (elem) {\r\n                            $scope.sections.add(elem.section, elem.title, elem);\r\n                        });\r\n\r\n                        models.getModels(function (m) {\r\n                            angular.forEach(m, function (schema) {\r\n                                models.getModelConfig(schema, function (config) {\r\n                                    if (config.isSingle) {\r\n                                        models.getSingleModel(schema, function (doc) {\r\n                                            if (doc) {\r\n                                                config.clickTo = \"model/\" + schema + \"/update/\" + doc[config.id];\r\n                                            } else {\r\n                                                config.clickTo = \"model/\" + schema + \"/new\";\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        config.clickTo = \"model/\" + schema;\r\n                                    }\r\n                                    $scope.sections.add(config.section, schema, config);\r\n                                });\r\n                            });\r\n                        });\r\n                    };\r\n\r\n\r\n                    render();\r\n                    $rootScope.$on('invalidate', function () {\r\n                        render();\r\n                    });\r\n\r\n                    $scope.openSection = function (section) {\r\n                        $scope.actualSection = section;\r\n                    };\r\n\r\n                    $scope.click = function (section, name, conf) {\r\n                        $scope.parentSchema = section;\r\n                        $scope.actualSchema = name;\r\n                        $scope.actualSection = section;\r\n                        if (conf.clickTo) {\r\n                            $location.path(conf.clickTo);\r\n                        } else if (conf.url) {\r\n                            $window.location.href = conf.url;\r\n                        }\r\n                    };\r\n\r\n                    $scope.isInstanceOf = function (obj) {\r\n                        return (obj instanceof Section);\r\n                    };\r\n\r\n                    $scope.debug = function (a, b) {\r\n                        console.log(a, b);\r\n                    };\r\n                }]\r\n            };\r\n        });\r\n}());\r\n\r\nvar Section = function () {\r\n};\r\nvar Sections = function () {\r\n\r\n\r\n    var menu = {};\r\n\r\n    this.get = function () {\r\n        return menu;\r\n    };\r\n\r\n\r\n    this.add = function (key, schema, config) {\r\n        /**\r\n         * Dot notation loop: http://stackoverflow.com/a/10253459/607354\r\n         */\r\n        var levels = key.split(\".\");\r\n        var curLevel = menu;\r\n        var i = 0;\r\n        while (i < levels.length - 1) {\r\n            if (typeof curLevel[levels[i]] === 'undefined') {\r\n                curLevel[levels[i]] = new Section();\r\n            }\r\n\r\n            curLevel = curLevel[levels[i]];\r\n            i++;\r\n        }\r\n\r\n        curLevel[levels[levels.length - 1]] = curLevel[levels[levels.length - 1]] || new Section();\r\n        curLevel[levels[levels.length - 1]][schema] = config;\r\n    };\r\n};\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive('scrollToItem', function () {\n            return {\n                restrict: 'A',\n                scope: {\n                    scrollTo: \"@\"\n                },\n                link: function (scope, $elm, attr) {\n\n                    $elm.on('click', function () {\n                        $('html,body').animate({scrollTop: $(scope.scrollTo).offset().top}, \"slow\");\n                    });\n                }\n            };\n        });\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .directive('compile', ['$compile', function($compile) {\r\n        // directive factory creates a link function\r\n        return function(scope, element, attrs) {\r\n            scope.$watch(\r\n                function(scope) {\r\n                    // watch the 'compile' expression for changes\r\n                    return scope.$eval(attrs.compile);\r\n                },\r\n                function(value) {\r\n                    // when the 'compile' expression changes\r\n                    // assign it into the current DOM\r\n                    element.html(value);\r\n\r\n                    // compile the new DOM and link it to the current\r\n                    // scope.\r\n                    // NOTE: we only compile .childNodes so that\r\n                    // we don't get into infinite loop compiling ourselves\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            );\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorPunchcard', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-punchcard/injector-punchcard.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var modelName = $routeParams.schema;\r\n                models.getGraph(modelName, attrs.graph, function(data){\r\n                    scope.elements = Object.keys(data);\r\n                    scope.selected = scope.elements[0];\r\n                    scope.punchCardData = data[scope.selected];\r\n                    scope.$watch('selected', function(selected){\r\n                       scope.punchCardData = data[selected];\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp').directive('injectorBargraph', ['$routeParams', 'models', function ($routeParams, models) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: true,\r\n            templateUrl: 'js/directives/injector-bargraph/injector-bargraph.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n\r\n                var modelName = $routeParams.schema;\r\n                models.getModelConfig(modelName, function (config) {\r\n                    models.getGraph(modelName, attrs.graph, function (data) {\r\n\r\n                        var graph = {};\r\n                        for(var i in config.graphs){\r\n                            var g = config.graphs[i];\r\n\r\n                            if(g.title == attrs.graph){\r\n                                graph = g;\r\n                            }\r\n                        }\r\n\r\n                        scope.elements = Object.keys(data);\r\n                        scope.selected = scope.elements[0];\r\n\r\n                        if(graph.groupMode == \"series\"){\r\n                            scope.selectEnabled = false;\r\n\r\n                        } else if(graph.groupMode == \"select\"){\r\n                            scope.selectEnabled = true;\r\n                        } else{\r\n                            console.error(\"Invalid configuration at bargraph group Mode:\", graph.groupMode);\r\n                        }\r\n\r\n                        if (scope.selectEnabled === true) {\r\n                            //GroupedBy with select2 !!\r\n                            scope.barsData = [\r\n                                {\r\n                                    key: scope.selected,\r\n                                    values: data[scope.selected]\r\n                                }\r\n                            ];\r\n\r\n                            scope.$watch('selected', function (selected) {\r\n                                if (scope.selectEnabled === true) {\r\n                                    scope.barsData = [\r\n                                        {\r\n                                            key: selected,\r\n                                            values: data[selected]\r\n                                        }\r\n                                    ];\r\n                                }\r\n                            });\r\n\r\n                        } else {\r\n                            //Grouped by in legend !\r\n                            scope.barsData = [];\r\n                            for (var key in data) {\r\n                                scope.barsData.push(\r\n                                    {\r\n                                        key: key,\r\n                                        values: data[key]\r\n                                    });\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp').directive('modelButtons', ['$routeParams', '$http', '$q', '$route', 'models', '$location', function ($routeParams, $http, $q, $route, models, $location) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: false, //Use the parent scope, in this case the modelController (this directive always will be loaded in the model page!)\r\n            //If not, we should set scope to true and implement here all the functions\r\n            templateUrl: 'js/directives/model-buttons/model-buttons.html',\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.performAction = function (action) {\r\n                    if (action.type && action.type == \"form\") {\r\n                        //post as form\r\n                        models.postAsForm(action.path, action.data, 'post');\r\n                    } else if (action.type && action.type == \"location\") {\r\n                        $location.path(action.location);\r\n                    } else {\r\n                        var req = {\r\n                            method: action.method,\r\n                            url: action.path,\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            data: action.data\r\n                        };\r\n\r\n                        $http(req);\r\n                    }\r\n                };\r\n\r\n                function exportElements() {\r\n                    var checked = scope.elements.filter(function (x) {\r\n                        return x.checked;\r\n                    });\r\n\r\n                    if (checked && checked.length > 0) {\r\n                        var query = {$or: []};\r\n                        angular.forEach(checked, function (elem) {\r\n                            query.$or.push({_id: elem._id});//We search by id\r\n                        });\r\n                        return query;\r\n                    } else {\r\n                        return scope.query;\r\n                    }\r\n                }\r\n\r\n                scope.export = function exportModels(format) {\r\n                    models.export(scope.schema, format, exportElements(), function (doc) {\r\n                    });\r\n                };\r\n\r\n\r\n                scope.import = function importModels(format) {\r\n                    console.log(\"IMPORT\", format, scope.schema);\r\n                    var file = \"\";\r\n                    models.import(scope.schema, format, file, function (doc) {\r\n                    });\r\n                };\r\n\r\n                scope.enableDelete = function () {\r\n                    if (!scope.elements) {\r\n                        return false;\r\n                    }\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    return checkedValues.length > 0;\r\n                };\r\n\r\n                scope.removeSelected = function removeSelected() {\r\n                    var checkedValues = scope.elements.filter(function (val) {\r\n                        return val.checked;\r\n                    });\r\n\r\n                    if (checkedValues.length > 0) {\r\n                        scope.promptAlert(function (del) {\r\n                            if (del) {\r\n                                var deletions = [];\r\n                                angular.forEach(checkedValues, function (element) {\r\n                                    var deferred = $q.defer();\r\n                                    deletions.push(deferred.promise);\r\n\r\n                                    models.getModelConfig(scope.schema, function (cfg) {\r\n                                        var shard;\r\n\r\n                                        if (cfg.shard && cfg.shard.shardKey) {\r\n                                            shard = element[cfg.shard.shardKey];\r\n                                        }\r\n\r\n                                        if (scope.isDisabled(element)) {\r\n                                            models.removeDocumentByMongoId(scope.schema, element._id, shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        } else {\r\n                                            models.removeDocument(scope.schema, scope.id(element), shard, function (doc) {\r\n                                                deferred.resolve();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                });\r\n                                $q.all(deletions).then(function () {\r\n                                    $route.reload();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .directive('searchInModel', ['$routeParams', 'models', 'common', 'search', function ($routeParams, models, common, search) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.searches = [];\r\n                    scope.models = models;\r\n                    var modelName = $routeParams.schema;\r\n\r\n\r\n                    scope.buildPath = function (field, schema) {\r\n                        var sc = models.getFieldFromSchema(field, schema);\r\n                        var title;\r\n                        if (sc && sc.title) {\r\n                            var i = field.lastIndexOf(\".\");\r\n                            if (i > -1 && sc.title.indexOf(\"<i\") == -1) {//TODO: ÑAPA DE LAS GUAPAS, ESTO HAY QUE CAMBIARLO\r\n                                title = common.prettifyTitle(field.substring(0, i) + '.' + sc.title);\r\n                            } else {\r\n                                title = sc.title;\r\n                            }\r\n\r\n                        } else {\r\n                            title = common.prettifyTitle(field);\r\n                        }\r\n\r\n                        return title;\r\n                    };\r\n\r\n                    scope.updateSearch = function (elemSearch, field, noSearch) {\r\n                        var index;\r\n                        if (elemSearch.field) {\r\n                            index = scope.availableFields.indexOf(elemSearch.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(elemSearch.field);\r\n                            }\r\n                        }\r\n\r\n                        var fieldFromSchema = models.getFieldFromSchema(field, scope.schema);\r\n\r\n                        elemSearch.title = fieldFromSchema.title;\r\n                        elemSearch.field = field;\r\n                        //elemSearch.placeholder = \"Search in \" + modelName + \" by \" + elemSearch.field;\r\n                        elemSearch.placeholder = {modelName: modelName, field: elemSearch.field};\r\n                        elemSearch.ref = (fieldFromSchema.ref && !fieldFromSchema.denormalize) ? fieldFromSchema.ref : undefined;\r\n\r\n                        //console.log(elemSearch);\r\n\r\n                        index = scope.availableFields.indexOf(field);\r\n                        if (index > -1) {\r\n                            scope.availableFields.splice(index, 1);\r\n                        }\r\n\r\n                        if (!noSearch) {\r\n                            scope.search();\r\n                        }\r\n                    };\r\n\r\n                    scope.addSearch = function (field) {\r\n                        var s = {};\r\n                        field = field || scope.availableFields[0];\r\n\r\n                        s.clear = function () {\r\n                            s.value = \"\";\r\n                            scope.search();\r\n                        };\r\n\r\n                        s.remove = function () {\r\n\r\n                            var index = scope.searches.indexOf(s);\r\n                            if (index > -1) {\r\n                                scope.searches.splice(index, 1);\r\n                            }\r\n\r\n                            index = scope.availableFields.indexOf(s.field);\r\n                            if (index == -1) {\r\n                                scope.availableFields.push(s.field);\r\n                            }\r\n                            scope.search();\r\n                        };\r\n\r\n                        scope.updateSearch(s, field, true);\r\n                        scope.searches.push(s);\r\n                    };\r\n\r\n                    models.getModelSchema(modelName, function (schema) {\r\n                        if (schema) {\r\n                            scope.schema = schema;\r\n                            scope.allFields = common.getAllSchemaFields(schema);\r\n                            scope.availableFields = scope.allFields.filter(function (val) {\r\n                                var f = models.getFieldFromSchema(val, schema);\r\n                                return (f && f.format != \"image\" && f.format != \"mixed\");\r\n                            });\r\n                        }\r\n                    });\r\n                    models.getModelConfig(modelName, function (config) {\r\n                        scope.addSearch(config.displayField);\r\n                    });\r\n\r\n                    /*scope.$on('$routeChangeSuccess', function (event, current, previous) {\r\n                     searchFunc(current.params.schema);\r\n                     });*/\r\n\r\n                    //scope.newSearch = function () {\r\n                    //    scope.addSearch(scope.availableFields[0]);\r\n                    //};\r\n\r\n                    scope.search = function () {\r\n                        var query = {};\r\n\r\n                        models.getModelSchema(modelName, function (schema) {\r\n                            angular.forEach(scope.searches, function (s) {\r\n                                var singleQuery = {};\r\n                                if (s.value) {\r\n                                    var sfield = models.getFieldFromSchema(s.field, schema);\r\n                                    if (sfield) {\r\n                                        if (sfield.type == \"string\" && !sfield.format && !sfield.ref) {\r\n                                            if (s.value !== \"\") {\r\n                                                singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                            }\r\n                                        } else if (sfield.type == \"string\" && sfield.format == \"date\") {\r\n                                            if (s.value !== \"\") {\r\n                                                singleQuery[s.field] = s.value;\r\n                                            }\r\n                                        } else if (sfield.ref && !sfield.denormalize) {\r\n                                            singleQuery[s.field] = s.value;\r\n                                            //References may be we should load before some useful information for querying references\r\n                                        } else if (sfield.ref && sfield.denormalize) {\r\n                                            singleQuery[s.field] = {$regex: s.value, $options: 'i'};\r\n                                        } else {\r\n                                            singleQuery[s.field] = s.value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                angular.extend(query, singleQuery);\r\n                            });\r\n                        });\r\n\r\n                        search.setQuery(query);\r\n                        search.setSkip(0);\r\n                        scope.$parent.search();\r\n\r\n                    };\r\n                }\r\n            };\r\n        }])\r\n        .directive(\"searchRefInModel\", ['models', 'common', function (models, common) {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: false,\r\n                templateUrl: 'js/directives/search-model/search-ref-model.html',\r\n                link: function (scope, element, attrs, ngModel) {\r\n                    scope.elemsearch = scope.$eval(attrs.elemsearch);\r\n                    var ref = scope.elemsearch.ref;\r\n\r\n                    if (!element.select) {\r\n                        return;\r\n                    }\r\n\r\n                    var displayField = \"\";\r\n                    var idSelect = \"\";\r\n\r\n                    function getDocumentById(modelId) {\r\n                        return function (query, skip) {\r\n                            return models.getModel(ref, function (m) {\r\n                                var config = m.config;\r\n                                var elem = \"\";\r\n                                if (modelId instanceof Object) {\r\n                                    elem = modelId[config.id];\r\n                                } else {\r\n                                    elem = modelId;\r\n                                }\r\n                                models.getDocument(ref, elem, function (doc) {\r\n                                    displayField = config.displayField;\r\n                                    idSelect = config.id;\r\n\r\n                                    var q = {};\r\n                                    q.query = {};\r\n                                    var regex = query.search;\r\n                                    q.query.$or = [];\r\n\r\n                                    var forDisplay = {};\r\n                                    forDisplay[displayField] = {$regex: regex, $options: 'i'};\r\n                                    q.query.$or.push(forDisplay);\r\n\r\n\r\n                                    if (config.id != \"_id\" && m.schema[config.id] && m.schema[config.id].type == \"string\") {\r\n                                        var forID = {};\r\n                                        forID[idSelect] = {$regex: regex, $options: 'i'};\r\n                                        q.query.$or.push(forID);\r\n                                    }\r\n\r\n                                    q.limit = 20;\r\n                                    q.skip = skip;\r\n\r\n                                    //SHARDING\r\n                                    if (models.getShard(ref)) {\r\n                                        q[models.getShard(ref).key] = models.getShard(ref).value;\r\n                                    }\r\n\r\n                                    models.search(ref, q, function (response, count) {\r\n                                        if (skip) {\r\n                                            scope.searchRes = scope.searchRes.concat(response);\r\n                                        } else {\r\n                                            scope.searchRes = response;\r\n                                        }\r\n\r\n                                        if (doc) {\r\n                                            var present = scope.searchRes.some(function (element) {\r\n                                                return element[config.id] == doc[config.id];\r\n                                            });\r\n\r\n                                            if (!present) {\r\n                                                scope.searchRes.splice(0, 0, doc);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        };\r\n                    }\r\n\r\n                    var elements = getDocumentById(scope.$eval(attrs.ngModel));\r\n\r\n                    scope.disabled = false;\r\n                    scope.searchEnabled = true;\r\n                    scope.searchRes = [];\r\n                    scope.search = elements;\r\n\r\n                    scope.printSelectedElement = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f + \" <\" + document[idSelect] + \">\";\r\n                            } else {\r\n                                return \"No display field. ID: <\" + document[idSelect] + \">\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectDisplayField = function (document) {\r\n                        if (document) {\r\n                            var f = common.getField(displayField, document);\r\n                            if (f && f !== \"\" && f.length > 0) {\r\n                                return f;\r\n                            } else {\r\n                                return \"<empty>\";\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    scope.selectIdField = function (document) {\r\n                        if (document !== undefined) {\r\n                            return document[idSelect] || \"No ID\";\r\n                        }\r\n                    };\r\n\r\n                    scope.$on('refreshSelect2' + ref, function () {\r\n                        console.log(\"REFRESH SELECT2\");\r\n                        elements();\r\n                    });\r\n\r\n                    element.find('ul').bind('scroll', function () {\r\n                        var raw = arguments[0].target;\r\n                        if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {\r\n                            elements(scope.$select, (raw.children[0].children.length - 2));\r\n                        }\r\n                    });\r\n\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\n    'use strict';\n    angular.module('injectorApp').directive('ellipsis', function () {\n        return {\n            restrict: 'A',\n            scope: true,\n            link: function (scope, element, attrs, ngModel) {\n                var width = element.width();\n                element.css(\"width\", width);\n                element.css(\"text-overflow\", 'ellipsis');\n                element.css(\"overflow\", 'hidden');\n                element.css(\"white-space\", 'nowrap');\n                // Do calculation\n                //var model = scope.$eval(attrs.ngModel);\n                //console.log(\"Model\", model);\n                //console.log(\"Model > Length\", model.width());\n            }\n        };\n    });\n}());\n(function () {\n    'use strict';\n    angular.module('injectorApp')\n        .directive(\n            \"mAppLoading\",\n            ['$animate', function ($animate) {\n                // Return the directive configuration.\n                return ({\n                    link: link,\n                    restrict: \"C\"\n                });\n                // I bind the JavaScript events to the scope.\n                function link(scope, element, attributes) {\n                    // Due to the way AngularJS prevents animation during the bootstrap\n                    // of the application, we can't animate the top-level container; but,\n                    // since we added \"ngAnimateChildren\", we can animated the inner\n                    // container during this phase.\n                    // --\n                    // NOTE: Am using .eq(1) so that we don't animate the Style block.\n                    $animate.leave(element.children().eq(1)).then(\n                        function cleanupAfterAnimation() {\n                            // Remove the root directive element.\n                            element.remove();\n                            // Clear the closed-over variable references.\n                            scope = element = attributes = null;\n                        }\n                    );\n                }\n            }]\n        );\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('CreateController', ['$scope', '$http', '$location', '$routeParams', 'models', '$controller', function ($scope, $http, $location, $routeParams, models, $controller) {\r\n            var modelName = $routeParams.schema;\r\n            $scope.action = \"create\";\r\n            models.getModel(modelName, function (m) {\r\n                if (!m.config.post) {\r\n                    $location.path('/model/' + modelName);\r\n                } else {\r\n                    $scope.model = {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $scope.action = \"create\";\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                }\r\n            });\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('GraphsController', ['$scope', '$routeParams', '$sce', '$compile', 'models', function ($scope, $routeParams, $sce, $compile, models) {\r\n        $scope.schema = $routeParams.schema;\r\n\r\n        models.getModelConfig($scope.schema, function (config) {\r\n            $scope.config = config;\r\n            $scope.graphs = config.graphs;\r\n        });\r\n\r\n        $scope.getTag = function (graph) {\r\n            var tag = graph.type;\r\n            return '<injector-'+ tag +' graph=\"' + graph.title + '\"></injector-'+ tag +'>';\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('UpdateController', ['$scope', '$http', '$routeParams', '$location', 'models', '$controller', function ($scope, $http, $routeParams, $location, models, $controller) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var shard = $routeParams.shard;\r\n\r\n            models.getModel(modelName, function (m) {\r\n                models.getDocument(modelName, id, shard, function (document) {\r\n                    $scope.prune(document);\r\n                    $scope.action = \"update\";\r\n                    $scope.model = document || {};\r\n                    var m_copy = angular.copy(m);\r\n                    $scope.m = m;\r\n                    $scope.m_copy = m_copy;\r\n                    $controller('FormController', {$scope: $scope}); //This works\r\n                });\r\n            });\r\n\r\n            //We made this in client because is an specific management of angular-schema-form\r\n            $scope.prune = function (document) {\r\n                for (var key in document) {\r\n                    var elem = document[key];\r\n                    if (elem && (typeof elem === 'object' || elem instanceof Array)) {\r\n                        $scope.prune(elem);\r\n                    }\r\n                    if (elem == null) {//Angular schema form does not allow null elements. Undefined is better\r\n                        document[key] = undefined;\r\n                    }\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('FormController', ['$rootScope', '$scope', '$http', '$location', '$routeParams', '$anchorScroll', '$timeout', '$modal', 'models', 'configs', 'dependsOn', 'common', '$window', 'flash', '$translate', function ($rootScope, $scope, $http, $location, $routeParams, $anchorScroll, $timeout, $modal, models, configs, dependsOn, common, $window, flash, $translate) {\r\n            var modelName = $routeParams.schema;\r\n            var id = $routeParams.id;\r\n            var modified = false;\r\n\r\n            $scope.buttonsPosition = configs.backoffice.buttonsPosition || 'bottom';\r\n\r\n            function walkThroughSchema(schema) {\r\n                var keys = Object.keys(schema);\r\n                for (var i in keys) {\r\n                    if(schema[keys[i]]) {\r\n                        if (schema[keys[i]].editOnCreate) {\r\n                            var action = $scope.action.toLowerCase();\r\n                            schema[keys[i]].readonly = !(action === \"create\");\r\n                        }\r\n\r\n                        if (schema[keys[i]].i18nTitle) {\r\n                            schema[keys[i]].title = $translate.instant(schema[keys[i]].i18nTitle);\r\n                        }\r\n\r\n                        var type = schema[keys[i]].type;\r\n                        if ((type === 'array' || type === 'object') && schema[keys[i]].properties) {\r\n                            walkThroughSchema(schema[keys[i]].properties);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            $scope.m = angular.copy($scope.m_copy);\r\n            walkThroughSchema($scope.m.schema);\r\n\r\n            $scope.schema = {\r\n                \"type\": \"object\",\r\n                \"title\": modelName,\r\n                \"action\": $scope.action,\r\n                \"properties\": $scope.m.schema\r\n            };\r\n\r\n            $scope.form = common.processForm($scope.m.config.form);\r\n\r\n            if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n            }\r\n\r\n            $rootScope.$on('shardChangeEvent', function () {\r\n                if ($scope.action.toLowerCase() == \"create\" && models.getShard(modelName) && models.getShard(modelName).value) {\r\n                    $scope.model[models.getShard(modelName).key] = models.getShard(modelName).value;\r\n                }\r\n            });\r\n\r\n\r\n            dependsOn.apply($scope, modelName, $scope.model);\r\n\r\n            $timeout(function () {\r\n                $scope.$watch('model', function (newVal, oldVal) {\r\n                    if (!angular.equals(newVal, oldVal)) {\r\n                        modified = true;\r\n                    }\r\n                }, true);\r\n            }, 0);\r\n\r\n            $scope.schemaHREF = function () {\r\n                $location.path(\"/model/\" + modelName);\r\n                $location.hash('');\r\n            };\r\n\r\n            $scope.submitForm = function (form, model, isApply) {\r\n                $scope.$broadcast('schemaFormValidate');\r\n                if (form.$valid) {\r\n                    if ($scope.action.toLowerCase() == 'update' && $scope.m.config.put) {\r\n                        models.putDocument(modelName, id, model, function (response) {\r\n                            if (response.status == '200') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                $scope.$broadcast('puttedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    } else if ($scope.action.toLowerCase() == 'create' && $scope.m.config.post) {\r\n                        models.postDocument(modelName, model, function (response) {\r\n                            if (response.status == '201') {\r\n                                modified = false;\r\n                                flash.success(\"Done\", \"Document saved successfully\");\r\n                                $scope.$broadcast('postedDocument', response.data);\r\n                                if (!isApply) {\r\n                                    $location.path('/model/' + modelName);\r\n                                    $location.hash('');\r\n                                } else {\r\n                                    $location.path('/model/' + modelName + '/update/' + response.data[Object.keys(response.data)[0]]);\r\n                                    $location.hash('');\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    $scope.validation = !form.$valid;\r\n                    $scope.validationErrors = form.$error;\r\n                    $location.hash('error');\r\n                    $anchorScroll.yOffset = 100;\r\n                    $anchorScroll();\r\n\r\n                }\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $window.history.back();\r\n            };\r\n\r\n            $scope.$on('$locationChangeStart', function (event, next, current) {\r\n                if ($scope.ngForm.$valid && modified) {\r\n                    event.preventDefault();\r\n\r\n                    var modalInstance = $modal.open({\r\n                        templateUrl: 'changedDocument.html',\r\n                        controller: 'ModalChangedCtrl',\r\n                        size: 'sm',\r\n                        resolve: {\r\n                            items: function () {\r\n                                return $scope.items;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function () { //CLOSE CALLBACK\r\n                        $scope.submitForm($scope.ngForm, $scope.model);\r\n                    }, function () { //DISMISS CALLBACK\r\n                        modified = false;\r\n                        var basePathLength = $location.absUrl().length - $location.url().length;\r\n                        $location.path(next.substring(basePathLength));\r\n                    });\r\n\r\n                }\r\n            });\r\n\r\n\r\n            $scope.$on('bkButton', function (event, form) {\r\n                if (form.action == 'api') {\r\n                    var http;\r\n                    var url = form.url;\r\n\r\n                    var getUrl = function (path) {\r\n                        return path.replace(/[^/]*:([^/]*)+/g, function (s, m) {\r\n                            return safeAccess($scope.model, m);\r\n                        });\r\n                    };\r\n\r\n                    url = getUrl(url);\r\n\r\n                    switch (form.method.toUpperCase()) {\r\n                        case 'GET':\r\n                            http = $http.get(url);\r\n                            break;\r\n                        case 'PUT':\r\n                            http = $http.put(url, $scope.model);\r\n                            break;\r\n                        case 'POST':\r\n                            var body = {};\r\n                            if (form.body) {\r\n                                angular.extend(body, form.body);\r\n                            } else {\r\n                                body = $scope.model;\r\n                            }\r\n                            http = $http.post(url, body);\r\n                            break;\r\n                        case 'DELETE':\r\n                            http = $http.delete(url);\r\n                            break;\r\n                        default :\r\n                            throw new Error('Method not configured properly');\r\n                    }\r\n                    if (http) {\r\n                        http.success(function (res) {\r\n                            angular.forEach(Object.keys(res), function (key) {\r\n                                $scope.model[key] = res[key];\r\n                            });\r\n                        }).error(function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                } else if (form.action == 'function') {\r\n                    window[form.func]($scope.model, $scope.m.schema);\r\n                }\r\n            });\r\n\r\n            $rootScope.$on('$translateChangeSuccess', function () {\r\n                walkThroughSchema($scope.schema.properties);\r\n                $scope.$broadcast('schemaFormRedraw');\r\n            });\r\n        }])\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalChangedCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n        .controller('LoginController', ['$http', '$scope', '$document', '$location', 'loginProvider', function ($http, $scope, $document, $location, loginProvider) {\r\n        $scope.update = function (user) {\r\n            loginProvider.login(user, function (res) {\r\n                if (!res) {\r\n                    $scope.loginError = 'Incorrect username of password';\r\n                } else{\r\n                    $location.path('/');\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .filter('encodeURIComponent', function() {\r\n            return window.encodeURIComponent;\r\n        })\r\n\r\n        .controller('MainController', ['$rootScope', '$scope', '$q', 'loginProvider', 'models', function ($rootScope, $scope, $q, loginProvider, models) {\r\n            $scope.postLoginFuncs = [];\r\n            //console.log($rootScope.$digestTtl);\r\n            $scope.postLoginFuncs.push(function(){\r\n                models.getModels(function (m) {\r\n                    $scope.schemas = {};\r\n                    angular.forEach(m, function (schema) {\r\n                        models.getModelConfig(schema, function (config) {\r\n                            $scope.schemas[schema] = config;\r\n                            \r\n                            loginProvider.getUser(function(){}); //Force first login\r\n                            if (config.isSingle) {\r\n                                models.getSingleModel(schema, function (doc) {\r\n                                    if (!doc) {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/new\";\r\n                                    } else {\r\n                                        $scope.schemas[schema].redirectTo = \"#/model/\" + schema + \"/update/\" + doc[config.id];\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n\r\n\r\n            $scope.schemaHREF = function (name, conf) {\r\n                return conf.redirectTo || \"#/model/\" + name;\r\n            };\r\n\r\n            angular.element('body').ready(function () {\r\n                $rootScope.$broadcast('bodyReady', 'MainController');\r\n            });\r\n\r\n            $rootScope.$on('login', function (event, args) {\r\n                angular.forEach($scope.postLoginFuncs, function(v){\r\n                    v();\r\n                });\r\n                $scope.postLoginFuncs = [];\r\n            });\r\n\r\n            $rootScope.$on('logout', function (event, args) {\r\n            });\r\n    }]);\r\n}());\r\n\r\n\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n        .controller('ModelController', ['$scope', '$http', '$route', '$routeParams', '$modal', '$location', 'common', 'models', 'flash', 'configs', 'search', function ($scope, $http, $route, $routeParams, $modal, $location, common, models, flash, configs, search) {\r\n            var defaultItemsPerPage = 20;\r\n            $scope.flash = flash;\r\n            $scope.common = common;\r\n            $scope.removeDisabled = 'disabled';\r\n\r\n            $scope.maxSize = 10;\r\n            $scope.schema = $routeParams.schema;\r\n            $scope.create = false;\r\n            $scope.checkedGroupIds = {};\r\n            search.clearQuery();\r\n\r\n            $scope.$watch(\"removeAll\", function (value) {\r\n                if (value !== undefined) {\r\n                    for (var i in $scope.elements) {\r\n                        $scope.elements[i].checked = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            models.getModel($scope.schema, function (model) {\r\n                $scope.config = model.config;\r\n                $scope.schemaForm = model.schema;\r\n\r\n                if (model.config.isSingle) { //In single documents, this page / controller should not appear anymore !\r\n                    $location.path('/');   //Redirect to home\r\n                    return;\r\n                }\r\n\r\n                //Build the array with all the displayable elements\r\n                $scope.config.allDisplayFields = [];\r\n                $scope.config.allDisplayFields.push($scope.config.displayField);\r\n                if ($scope.config.extraDisplayFields) {\r\n                    $scope.config.allDisplayFields = $scope.config.allDisplayFields.concat($scope.config.extraDisplayFields);\r\n                }\r\n\r\n                $scope.search = function (skip) {\r\n                    if (skip !== undefined) {\r\n                        search.setSkip(skip);\r\n                    }\r\n\r\n                    search.search($scope.schema, function (elements, count, err) {\r\n                        if (elements) {\r\n                            $scope.elements = elements;\r\n                        }\r\n                        $scope.totalElements = count;\r\n                    });\r\n                };\r\n\r\n                $scope.itemsPerPage = $scope.userItemsPerPage = configs.backoffice.itemsPerPage || defaultItemsPerPage;\r\n                search.setLimit($scope.itemsPerPage);\r\n                search.setSkip(0);\r\n\r\n                //Init elements\r\n                $scope.search();\r\n\r\n                // Init function of pageChanged\r\n                $scope.pageChanged = function () {\r\n                    $scope.itemsPerPage = $scope.userItemsPerPage;\r\n                    if ($scope.currentPage > 0 && $scope.itemsPerPage > 0) {\r\n                        var skip = (($scope.currentPage - 1) * $scope.itemsPerPage);\r\n                        search.setSkip(skip);\r\n                    } else {\r\n                        search.setSkip(0);\r\n                    }\r\n                    search.setLimit($scope.itemsPerPage);\r\n                    $scope.search();\r\n                };\r\n\r\n                $scope.id = function (element) {\r\n                    return element[$scope.config.id];\r\n                };\r\n\r\n                $scope.shard = function (element) {\r\n                    return element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.hasShard = function (element) {\r\n                    var hasShard = $scope.config.shard && $scope.config.shard.shardKey;\r\n                    return hasShard && element[$scope.config.shard.shardKey];\r\n                };\r\n\r\n                $scope.getUrl = function (element, schema) {\r\n                    var model;\r\n                    if(element.__t) {\r\n                        model = element.__t;\r\n                    } else {\r\n                        model = schema;\r\n                    }\r\n                    var url = \"#/model/\" + model + \"/update/\" + encodeURIComponent($scope.id(element));\r\n                    if ($scope.hasShard(element)) {\r\n                        url += \"/\" + encodeURIComponent($scope.shard(element));\r\n                    }\r\n                    return url;\r\n                };\r\n\r\n                $scope.isDisabled = function (element) {\r\n                    return !(element[$scope.config.id] && element[$scope.config.id] !== \"\");\r\n                };\r\n\r\n                $scope.displayCustomField = function (field, element) {\r\n                    var s = common.getField(field, element);\r\n                    return (s === undefined || s === \"\") ? \"<empty>\" : s;\r\n                };\r\n\r\n                $scope.sortBy = function (property, asc) {\r\n                    search.addSortBy(property, asc);\r\n                    $scope.search(0);\r\n                };\r\n\r\n                $scope.getSort = function (property) {\r\n                    return search.getSort(property);\r\n                };\r\n\r\n                $scope.$on('shardChangeEvent', function (event, data) {\r\n                    $scope.search(0);\r\n                });\r\n            });\r\n\r\n            $scope.promptAlert = function (cb) {\r\n                var del;\r\n                if (del) {\r\n                    cb(del);\r\n                }\r\n                var modalInstance = $modal.open({\r\n                    templateUrl: 'myModalContent.html',\r\n                    controller: 'ModalInstanceCtrl',\r\n                    size: 'sm',\r\n                    resolve: {\r\n                        items: function () {\r\n                            return $scope.items;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                modalInstance.result.then(function () {\r\n                    del = true;\r\n                    cb(true);\r\n                });\r\n            };\r\n        }])\r\n\r\n        .filter('to_trusted', ['$sce', function ($sce) {\r\n            return function (text) {\r\n                if (text) {\r\n                    return $sce.trustAsHtml(text.toString());\r\n                } else {\r\n                    return text;\r\n                }\r\n            };\r\n        }])\r\n\r\n        // Please note that $modalInstance represents a modal window (instance) dependency.\r\n        // It is not the same as the $modal service used above.\r\n        .controller('ModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n\r\n            $scope.ok = function () {\r\n                $modalInstance.close('ok');\r\n            };\r\n\r\n            $scope.cancel = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }])\r\n\r\n        .controller('ImportModalInstanceCtrl', ['$scope', '$modalInstance', 'items', function ($scope, $modalInstance, items) {\r\n        }]);\r\n}());\r\n\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('injectorApp')\r\n        .controller('NavbarController', ['$scope', '$location', 'loginProvider', function ($scope, $location, loginProvider) {\r\n            var navbar = function () {\r\n                loginProvider.getUser(function (user) {\r\n                    $scope.user = user;\r\n                });\r\n            };\r\n            navbar();\r\n            $scope.$on('login', function (event, data) {\r\n                navbar();\r\n            });\r\n\r\n            $scope.logout = function () {\r\n                loginProvider.logout();\r\n                $location.path('/logout');\r\n            };\r\n        }]);\r\n}());\n(function () {\r\n    'use strict';\r\n    angular.module('injectorApp')\r\n\r\n    .controller('ShardingController', ['$scope', '$routeParams', '$rootScope', 'models', 'configs', function ($scope, $routeParams, $rootScope, models, configs) {\r\n        var modelName;\r\n        $scope.$on('$routeChangeSuccess', function (event, current) {\r\n            modelName = current.params.schema;\r\n\r\n            /* JUAN: Continue here to implement sharding selector for custom pages\r\n             if(modelName == undefined) {\r\n                //ÑAPA para probar\r\n                modelName = \"Ingredient\";\r\n            }\r\n            */\r\n\r\n            if (modelName) {\r\n                models.getModel(modelName, function (m) {\r\n                    if (m.config.shard) {\r\n                        $scope.shardKey = m.config.shard.shardKey;\r\n                        $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n                        $scope.shardValues = m.config.shard.shardValues;\r\n\r\n                        if (models.getShard(modelName)) {\r\n                            $scope.shardKeyText = 'Using ' + models.getShard(modelName).key + ' ' + models.getShard(modelName).value;\r\n                        } else {\r\n                            if(m.config.shard.filtered){\r\n                                $scope.locked = true;\r\n                                $scope.setShard($scope.shardValues[0]);\r\n                            } else {\r\n                                $scope.locked = false;\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        $scope.shardKey = undefined;\r\n                        $scope.shardKeyText = undefined;\r\n                        $scope.shardValues = undefined;\r\n                    }\r\n                });\r\n            } else {\r\n                $scope.shardKey = undefined;\r\n                $scope.shardKeyText = undefined;\r\n                $scope.shardValues = undefined;\r\n            }\r\n        });\r\n\r\n        $scope.setShard = function (value) {\r\n            $scope.shardKeyText = 'Using ' + $scope.shardKey + ' ' + value;\r\n            models.setShard($scope.shardKey, value, modelName);\r\n\r\n            $rootScope.$broadcast('shardChangeEvent');\r\n        };\r\n\r\n        $scope.removeShard = function () {\r\n            $scope.shardKeyText = 'Select ' + $scope.shardKey + ' shard';\r\n            //models.setShard($scope.shardKey, '', modelName);\r\n            models.removeShard(modelName);\r\n            $rootScope.$broadcast('shardChangeEvent');\r\n        };\r\n        $scope.shardKey = undefined;\r\n    }]);\r\n}());\r\n\n(function () {\n    'use strict';\n\n    angular.module('injectorApp')\n        .controller('TranslateController', ['$scope', '$translate', 'configs', function ($scope, $translate, configs) {\n            //$scope.languages = $translate.getAvailableLanguageKeys();\n            $scope.languages = ['en', 'es'];\n            if (configs.backoffice.uniqueLanguage) {\n                $scope.showLanguages = false;\n                $translate.use(configs.backoffice.uniqueLanguage);\n            } else {\n                $scope.showLanguages = true;\n                $scope.use = function (lang) {\n                    $translate.use(lang);\n                };\n            }\n        }]);\n}());"]}